//
// xTCP - config
//
// These are all the structs relating to the TCP diagnotic module in the kernel
//
//
// Build this using buf build ( https://buf.build/ ), see the buf config in the root folder

// https://protobuf.dev/programming-guides/encoding/#structure

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: xtcp_config/v1/xtcp_config.proto

package xtcp_config

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_xtcp_config_v1_xtcp_config_proto_rawDescGZIP(), []int{0}
}

type GetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *XtcpConfig            `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_xtcp_config_v1_xtcp_config_proto_rawDescGZIP(), []int{1}
}

func (x *GetResponse) GetConfig() *XtcpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *XtcpConfig            `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRequest) Reset() {
	*x = SetRequest{}
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRequest) ProtoMessage() {}

func (x *SetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRequest.ProtoReflect.Descriptor instead.
func (*SetRequest) Descriptor() ([]byte, []int) {
	return file_xtcp_config_v1_xtcp_config_proto_rawDescGZIP(), []int{2}
}

func (x *SetRequest) GetConfig() *XtcpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *XtcpConfig            `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetResponse) Reset() {
	*x = SetResponse{}
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetResponse) ProtoMessage() {}

func (x *SetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetResponse.ProtoReflect.Descriptor instead.
func (*SetResponse) Descriptor() ([]byte, []int) {
	return file_xtcp_config_v1_xtcp_config_proto_rawDescGZIP(), []int{3}
}

func (x *SetResponse) GetConfig() *XtcpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetPollFrequencyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Poll frequency
	// This is how often xtcp sends the netlink dump request
	// Recommend not too frequently, so maybe 30s or 60s
	// https://pkg.go.dev/google.golang.org/protobuf/types/known/durationpb
	PollFrequency *durationpb.Duration `protobuf:"bytes,20,opt,name=poll_frequency,json=pollFrequency,proto3" json:"poll_frequency,omitempty"`
	// Poll timeout per name space
	// Must be less than the poll frequency
	PollTimeout   *durationpb.Duration `protobuf:"bytes,30,opt,name=poll_timeout,json=pollTimeout,proto3" json:"poll_timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPollFrequencyRequest) Reset() {
	*x = SetPollFrequencyRequest{}
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPollFrequencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPollFrequencyRequest) ProtoMessage() {}

func (x *SetPollFrequencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPollFrequencyRequest.ProtoReflect.Descriptor instead.
func (*SetPollFrequencyRequest) Descriptor() ([]byte, []int) {
	return file_xtcp_config_v1_xtcp_config_proto_rawDescGZIP(), []int{4}
}

func (x *SetPollFrequencyRequest) GetPollFrequency() *durationpb.Duration {
	if x != nil {
		return x.PollFrequency
	}
	return nil
}

func (x *SetPollFrequencyRequest) GetPollTimeout() *durationpb.Duration {
	if x != nil {
		return x.PollTimeout
	}
	return nil
}

type SetPollFrequencyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *XtcpConfig            `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPollFrequencyResponse) Reset() {
	*x = SetPollFrequencyResponse{}
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPollFrequencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPollFrequencyResponse) ProtoMessage() {}

func (x *SetPollFrequencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPollFrequencyResponse.ProtoReflect.Descriptor instead.
func (*SetPollFrequencyResponse) Descriptor() ([]byte, []int) {
	return file_xtcp_config_v1_xtcp_config_proto_rawDescGZIP(), []int{5}
}

func (x *SetPollFrequencyResponse) GetConfig() *XtcpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// xtcp configuration
type XtcpConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Netlink socket timeout in milliseconds
	// Recommend 5000
	NlTimeoutMilliseconds uint64 `protobuf:"varint,10,opt,name=nl_timeout_milliseconds,json=nlTimeoutMilliseconds,proto3" json:"nl_timeout_milliseconds,omitempty"`
	// Poll frequency
	// This is how often xtcp sends the netlink dump request
	// Recommend not too frequently, so maybe 30s or 60s
	// https://pkg.go.dev/google.golang.org/protobuf/types/known/durationpb
	PollFrequency *durationpb.Duration `protobuf:"bytes,20,opt,name=poll_frequency,json=pollFrequency,proto3" json:"poll_frequency,omitempty"`
	// Poll timeout per name space
	// Must be less than the poll frequency
	PollTimeout *durationpb.Duration `protobuf:"bytes,30,opt,name=poll_timeout,json=pollTimeout,proto3" json:"poll_timeout,omitempty"`
	// Maximum number of loops, or zero (0) for forever
	MaxLoops uint64 `protobuf:"varint,40,opt,name=max_loops,json=maxLoops,proto3" json:"max_loops,omitempty"`
	// Netlinker goroutines per netlink socket ( recommend 1,2,4 range )
	Netlinkers uint32 `protobuf:"varint,50,opt,name=netlinkers,proto3" json:"netlinkers,omitempty"`
	// nlmsg_seq sequence number (start). This gets incremented.
	NlmsgSeq uint32 `protobuf:"varint,60,opt,name=nlmsg_seq,json=nlmsgSeq,proto3" json:"nlmsg_seq,omitempty"`
	// netlinker packetSize.  buffer size = packetSize * packetSizeMply. Use zero (0) for syscall.Getpagesize()
	// recommend using 0
	PacketSize uint64 `protobuf:"varint,70,opt,name=packet_size,json=packetSize,proto3" json:"packet_size,omitempty"`
	// netlinker packetSize multiplier.  buffer size = packetSize * packetSizeMply
	PacketSizeMply uint32 `protobuf:"varint,80,opt,name=packet_size_mply,json=packetSizeMply,proto3" json:"packet_size_mply,omitempty"`
	// Write netlink packets to writeFiles number of files ( to generate test data ) per netlinker
	// xtcp will capture this many Netlink response packets when it starts
	// This is PER netlinker
	WriteFiles uint32 `protobuf:"varint,90,opt,name=write_files,json=writeFiles,proto3" json:"write_files,omitempty"`
	// Write files path
	CapturePath string `protobuf:"bytes,100,opt,name=capture_path,json=capturePath,proto3" json:"capture_path,omitempty"`
	// modulus. Report every X socket diag messages to output
	Modulus uint64 `protobuf:"varint,110,opt,name=modulus,proto3" json:"modulus,omitempty"`
	// Marshalling of the exported data (proto,json,prototext)
	MarshalTo string `protobuf:"bytes,120,opt,name=marshal_to,json=marshalTo,proto3" json:"marshal_to,omitempty"`
	// kafka:127.0.0.1:9092, udp:127.0.0.1:13000, or nsq:127.0.0.1:4150, or null:
	Dest string `protobuf:"bytes,130,opt,name=dest,proto3" json:"dest,omitempty"`
	// Kafka or NSQ topic
	Topic string `protobuf:"bytes,140,opt,name=topic,proto3" json:"topic,omitempty"`
	// Kafka Produce context timeout.  Use 0 for no context timeout
	// Recommend a small timeout, like 1-2 seconds
	// kgo seems to have a bug, because the timeout is always expired
	KafkaProduceTimeout *durationpb.Duration `protobuf:"bytes,150,opt,name=kafka_produce_timeout,json=kafkaProduceTimeout,proto3" json:"kafka_produce_timeout,omitempty"`
	// DebugLevel
	DebugLevel uint32 `protobuf:"varint,160,opt,name=debug_level,json=debugLevel,proto3" json:"debug_level,omitempty"`
	// Label applied to the protobuf
	Label string `protobuf:"bytes,170,opt,name=label,proto3" json:"label,omitempty"`
	// Tag applied to the protobuf
	Tag string `protobuf:"bytes,180,opt,name=tag,proto3" json:"tag,omitempty"`
	// GRPC listening port
	GrpcPort             uint32                `protobuf:"varint,190,opt,name=grpc_port,json=grpcPort,proto3" json:"grpc_port,omitempty"`
	EnabledDeserializers *EnabledDeserializers `protobuf:"bytes,200,opt,name=enabled_deserializers,json=enabledDeserializers,proto3" json:"enabled_deserializers,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *XtcpConfig) Reset() {
	*x = XtcpConfig{}
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XtcpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XtcpConfig) ProtoMessage() {}

func (x *XtcpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XtcpConfig.ProtoReflect.Descriptor instead.
func (*XtcpConfig) Descriptor() ([]byte, []int) {
	return file_xtcp_config_v1_xtcp_config_proto_rawDescGZIP(), []int{6}
}

func (x *XtcpConfig) GetNlTimeoutMilliseconds() uint64 {
	if x != nil {
		return x.NlTimeoutMilliseconds
	}
	return 0
}

func (x *XtcpConfig) GetPollFrequency() *durationpb.Duration {
	if x != nil {
		return x.PollFrequency
	}
	return nil
}

func (x *XtcpConfig) GetPollTimeout() *durationpb.Duration {
	if x != nil {
		return x.PollTimeout
	}
	return nil
}

func (x *XtcpConfig) GetMaxLoops() uint64 {
	if x != nil {
		return x.MaxLoops
	}
	return 0
}

func (x *XtcpConfig) GetNetlinkers() uint32 {
	if x != nil {
		return x.Netlinkers
	}
	return 0
}

func (x *XtcpConfig) GetNlmsgSeq() uint32 {
	if x != nil {
		return x.NlmsgSeq
	}
	return 0
}

func (x *XtcpConfig) GetPacketSize() uint64 {
	if x != nil {
		return x.PacketSize
	}
	return 0
}

func (x *XtcpConfig) GetPacketSizeMply() uint32 {
	if x != nil {
		return x.PacketSizeMply
	}
	return 0
}

func (x *XtcpConfig) GetWriteFiles() uint32 {
	if x != nil {
		return x.WriteFiles
	}
	return 0
}

func (x *XtcpConfig) GetCapturePath() string {
	if x != nil {
		return x.CapturePath
	}
	return ""
}

func (x *XtcpConfig) GetModulus() uint64 {
	if x != nil {
		return x.Modulus
	}
	return 0
}

func (x *XtcpConfig) GetMarshalTo() string {
	if x != nil {
		return x.MarshalTo
	}
	return ""
}

func (x *XtcpConfig) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

func (x *XtcpConfig) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *XtcpConfig) GetKafkaProduceTimeout() *durationpb.Duration {
	if x != nil {
		return x.KafkaProduceTimeout
	}
	return nil
}

func (x *XtcpConfig) GetDebugLevel() uint32 {
	if x != nil {
		return x.DebugLevel
	}
	return 0
}

func (x *XtcpConfig) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *XtcpConfig) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *XtcpConfig) GetGrpcPort() uint32 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

func (x *XtcpConfig) GetEnabledDeserializers() *EnabledDeserializers {
	if x != nil {
		return x.EnabledDeserializers
	}
	return nil
}

type EnabledDeserializers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       map[string]bool        `protobuf:"bytes,1,rep,name=enabled,proto3" json:"enabled,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnabledDeserializers) Reset() {
	*x = EnabledDeserializers{}
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnabledDeserializers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnabledDeserializers) ProtoMessage() {}

func (x *EnabledDeserializers) ProtoReflect() protoreflect.Message {
	mi := &file_xtcp_config_v1_xtcp_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnabledDeserializers.ProtoReflect.Descriptor instead.
func (*EnabledDeserializers) Descriptor() ([]byte, []int) {
	return file_xtcp_config_v1_xtcp_config_proto_rawDescGZIP(), []int{7}
}

func (x *EnabledDeserializers) GetEnabled() map[string]bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

var File_xtcp_config_v1_xtcp_config_proto protoreflect.FileDescriptor

var file_xtcp_config_v1_xtcp_config_proto_rawDesc = []byte{
	0x0a, 0x20, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31,
	0x2f, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0c, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x74, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x74, 0x63, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x40,
	0x0a, 0x0a, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78,
	0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x74,
	0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x41, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x58, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xb4, 0x02, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x11, 0xba, 0x48, 0x0e, 0xc8, 0x01, 0x01, 0xaa, 0x01, 0x08, 0x22, 0x04, 0x08,
	0x80, 0xf5, 0x24, 0x32, 0x00, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0xba, 0x48, 0x0e, 0xc8, 0x01, 0x01, 0xaa, 0x01, 0x08,
	0x22, 0x04, 0x08, 0x80, 0xf5, 0x24, 0x32, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3a, 0x73, 0xba, 0x48, 0x70, 0x1a, 0x6e, 0x0a, 0x0f, 0x58, 0x74,
	0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x12, 0x32, 0x50,
	0x6f, 0x6c, 0x6c, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x70, 0x6f,
	0x6c, 0x6c, 0x20, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x1a, 0x27, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x20, 0x3c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x6c,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x4e, 0x0a, 0x18, 0x53, 0x65,
	0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc6, 0x09, 0x0a, 0x0a, 0x58,
	0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x17, 0x6e, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xc8,
	0x01, 0x01, 0x32, 0x06, 0x18, 0xa0, 0x8d, 0x06, 0x28, 0x00, 0x52, 0x15, 0x6e, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x53, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0xba, 0x48, 0x0e, 0xc8, 0x01, 0x01, 0xaa, 0x01, 0x08, 0x22,
	0x04, 0x08, 0x80, 0xf5, 0x24, 0x2a, 0x00, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x6c, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0xba, 0x48, 0x0e, 0xc8, 0x01, 0x01, 0xaa,
	0x01, 0x08, 0x22, 0x04, 0x08, 0x80, 0xf5, 0x24, 0x2a, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x6f, 0x6f, 0x70, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xc8,
	0x01, 0x00, 0x32, 0x06, 0x18, 0xa0, 0x8d, 0x06, 0x28, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c,
	0x6f, 0x6f, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01,
	0x2a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x6c, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x2a, 0x05, 0x18,
	0x90, 0x4e, 0x28, 0x00, 0x52, 0x08, 0x6e, 0x6c, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x2f,
	0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xc8, 0x01, 0x00, 0x32, 0x06, 0x18, 0xc0, 0x84,
	0x3d, 0x28, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x36, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d,
	0x70, 0x6c, 0x79, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01,
	0x00, 0x2a, 0x04, 0x18, 0x64, 0x28, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x4d, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xba, 0x48,
	0x0a, 0xc8, 0x01, 0x00, 0x2a, 0x05, 0x18, 0xe8, 0x07, 0x28, 0x00, 0x52, 0x0a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba,
	0x48, 0x09, 0xc8, 0x01, 0x00, 0x72, 0x04, 0x10, 0x01, 0x18, 0x50, 0x52, 0x0b, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x75, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0xc8, 0x01,
	0x01, 0x32, 0x06, 0x18, 0xc0, 0x84, 0x3d, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x75, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x5f, 0x74, 0x6f,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x72, 0x04,
	0x10, 0x04, 0x18, 0x28, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x54, 0x6f, 0x12,
	0x21, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xba, 0x48, 0x09, 0xc8, 0x01, 0x01, 0x72, 0x04, 0x10, 0x04, 0x18, 0x28, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0xc8, 0x01, 0x00, 0x72, 0x04, 0x10, 0x01, 0x18, 0x28,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x60, 0x0a, 0x15, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x10, 0xba, 0x48, 0x0d, 0xc8, 0x01, 0x00, 0xaa, 0x01, 0x07, 0x22, 0x03, 0x08,
	0xd8, 0x04, 0x32, 0x00, 0x52, 0x13, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01, 0x01, 0x2a, 0x05, 0x18, 0xe8, 0x07, 0x28, 0x00, 0x52, 0x0a,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8,
	0x01, 0x00, 0x72, 0x02, 0x18, 0x28, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07,
	0xc8, 0x01, 0x00, 0x72, 0x02, 0x18, 0x28, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x09,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0e, 0xba, 0x48, 0x0b, 0xc8, 0x01, 0x01, 0x2a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x28, 0x01,
	0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x62, 0x0a, 0x15, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x78, 0x74, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x73,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x00, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x3a, 0x73,
	0xba, 0x48, 0x70, 0x1a, 0x6e, 0x0a, 0x0f, 0x58, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x12, 0x32, 0x50, 0x6f, 0x6c, 0x6c, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6c, 0x65, 0x73,
	0x73, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x6c, 0x20, 0x70, 0x6f, 0x6c, 0x6c,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x27, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x20,
	0x3e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x78, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xe1, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1a,
	0x2e, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x78, 0x74, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a,
	0x01, 0x2a, 0x1a, 0x12, 0x2f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x12, 0x5d, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x2e,
	0x78, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x78, 0x74, 0x63, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01,
	0x2a, 0x1a, 0x12, 0x2f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x53, 0x65, 0x74, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x6c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x2e, 0x78, 0x74, 0x63,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x6c, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x1a, 0x1f, 0x2f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x8d, 0x01, 0x0a, 0x12, 0x63, 0x6f,
	0x6d, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x42, 0x0f, 0x58, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x11, 0x2e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x78, 0x74, 0x63, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xa2, 0x02, 0x03, 0x58, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x58,
	0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x58,
	0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x58,
	0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x58, 0x74, 0x63, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_xtcp_config_v1_xtcp_config_proto_rawDescOnce sync.Once
	file_xtcp_config_v1_xtcp_config_proto_rawDescData = file_xtcp_config_v1_xtcp_config_proto_rawDesc
)

func file_xtcp_config_v1_xtcp_config_proto_rawDescGZIP() []byte {
	file_xtcp_config_v1_xtcp_config_proto_rawDescOnce.Do(func() {
		file_xtcp_config_v1_xtcp_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_xtcp_config_v1_xtcp_config_proto_rawDescData)
	})
	return file_xtcp_config_v1_xtcp_config_proto_rawDescData
}

var file_xtcp_config_v1_xtcp_config_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_xtcp_config_v1_xtcp_config_proto_goTypes = []any{
	(*GetRequest)(nil),               // 0: xtcp_config.v1.GetRequest
	(*GetResponse)(nil),              // 1: xtcp_config.v1.GetResponse
	(*SetRequest)(nil),               // 2: xtcp_config.v1.SetRequest
	(*SetResponse)(nil),              // 3: xtcp_config.v1.SetResponse
	(*SetPollFrequencyRequest)(nil),  // 4: xtcp_config.v1.SetPollFrequencyRequest
	(*SetPollFrequencyResponse)(nil), // 5: xtcp_config.v1.SetPollFrequencyResponse
	(*XtcpConfig)(nil),               // 6: xtcp_config.v1.XtcpConfig
	(*EnabledDeserializers)(nil),     // 7: xtcp_config.v1.EnabledDeserializers
	nil,                              // 8: xtcp_config.v1.EnabledDeserializers.EnabledEntry
	(*durationpb.Duration)(nil),      // 9: google.protobuf.Duration
}
var file_xtcp_config_v1_xtcp_config_proto_depIdxs = []int32{
	6,  // 0: xtcp_config.v1.GetResponse.config:type_name -> xtcp_config.v1.XtcpConfig
	6,  // 1: xtcp_config.v1.SetRequest.config:type_name -> xtcp_config.v1.XtcpConfig
	6,  // 2: xtcp_config.v1.SetResponse.config:type_name -> xtcp_config.v1.XtcpConfig
	9,  // 3: xtcp_config.v1.SetPollFrequencyRequest.poll_frequency:type_name -> google.protobuf.Duration
	9,  // 4: xtcp_config.v1.SetPollFrequencyRequest.poll_timeout:type_name -> google.protobuf.Duration
	6,  // 5: xtcp_config.v1.SetPollFrequencyResponse.config:type_name -> xtcp_config.v1.XtcpConfig
	9,  // 6: xtcp_config.v1.XtcpConfig.poll_frequency:type_name -> google.protobuf.Duration
	9,  // 7: xtcp_config.v1.XtcpConfig.poll_timeout:type_name -> google.protobuf.Duration
	9,  // 8: xtcp_config.v1.XtcpConfig.kafka_produce_timeout:type_name -> google.protobuf.Duration
	7,  // 9: xtcp_config.v1.XtcpConfig.enabled_deserializers:type_name -> xtcp_config.v1.EnabledDeserializers
	8,  // 10: xtcp_config.v1.EnabledDeserializers.enabled:type_name -> xtcp_config.v1.EnabledDeserializers.EnabledEntry
	0,  // 11: xtcp_config.v1.ConfigService.Get:input_type -> xtcp_config.v1.GetRequest
	2,  // 12: xtcp_config.v1.ConfigService.Set:input_type -> xtcp_config.v1.SetRequest
	4,  // 13: xtcp_config.v1.ConfigService.SetPollFrequency:input_type -> xtcp_config.v1.SetPollFrequencyRequest
	1,  // 14: xtcp_config.v1.ConfigService.Get:output_type -> xtcp_config.v1.GetResponse
	3,  // 15: xtcp_config.v1.ConfigService.Set:output_type -> xtcp_config.v1.SetResponse
	5,  // 16: xtcp_config.v1.ConfigService.SetPollFrequency:output_type -> xtcp_config.v1.SetPollFrequencyResponse
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_xtcp_config_v1_xtcp_config_proto_init() }
func file_xtcp_config_v1_xtcp_config_proto_init() {
	if File_xtcp_config_v1_xtcp_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xtcp_config_v1_xtcp_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xtcp_config_v1_xtcp_config_proto_goTypes,
		DependencyIndexes: file_xtcp_config_v1_xtcp_config_proto_depIdxs,
		MessageInfos:      file_xtcp_config_v1_xtcp_config_proto_msgTypes,
	}.Build()
	File_xtcp_config_v1_xtcp_config_proto = out.File
	file_xtcp_config_v1_xtcp_config_proto_rawDesc = nil
	file_xtcp_config_v1_xtcp_config_proto_goTypes = nil
	file_xtcp_config_v1_xtcp_config_proto_depIdxs = nil
}
