//
// xTCP - eXport TCP Inet Diagnostic messages
//
// These are all the structs relating to the TCP diagnotic module in the kernel
//
// Please note that protobufs smallest size is 32 bits, so we actually expand uint8/16 to uint32s.
// In the protos below, I've commented which ones are uint8/16
//
// There are links to the kernel source showing where the struct came from.
//
// Build this using buf build ( https://buf.build/ ), see the buf config in the root folder

// Little reminder on compiling
// https://developers.google.com/protocol-buffers/docs/gotutorial
// go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
// protoc --go_out=paths=source_relative:. xtcppb.proto

// https://protobuf.dev/programming-guides/encoding/#structure

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: xtcp_flat_record/v1/xtcp_flat_record.proto

package xtcp_flat_record

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	XTCPFlatRecordService_FlatRecords_FullMethodName     = "/xtcp_flat_record.v1.XTCPFlatRecordService/FlatRecords"
	XTCPFlatRecordService_PollFlatRecords_FullMethodName = "/xtcp_flat_record.v1.XTCPFlatRecordService/PollFlatRecords"
)

// XTCPFlatRecordServiceClient is the client API for XTCPFlatRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XTCPFlatRecordServiceClient interface {
	// If xtcp is polling, this will return the stream
	FlatRecords(ctx context.Context, in *FlatRecordsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FlatRecordsResponse], error)
	// If xtcp is not polling, this allows the client to send a poll request
	PollFlatRecords(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PollFlatRecordsRequest, FlatRecordsResponse], error)
}

type xTCPFlatRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXTCPFlatRecordServiceClient(cc grpc.ClientConnInterface) XTCPFlatRecordServiceClient {
	return &xTCPFlatRecordServiceClient{cc}
}

func (c *xTCPFlatRecordServiceClient) FlatRecords(ctx context.Context, in *FlatRecordsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FlatRecordsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &XTCPFlatRecordService_ServiceDesc.Streams[0], XTCPFlatRecordService_FlatRecords_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FlatRecordsRequest, FlatRecordsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XTCPFlatRecordService_FlatRecordsClient = grpc.ServerStreamingClient[FlatRecordsResponse]

func (c *xTCPFlatRecordServiceClient) PollFlatRecords(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PollFlatRecordsRequest, FlatRecordsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &XTCPFlatRecordService_ServiceDesc.Streams[1], XTCPFlatRecordService_PollFlatRecords_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PollFlatRecordsRequest, FlatRecordsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XTCPFlatRecordService_PollFlatRecordsClient = grpc.BidiStreamingClient[PollFlatRecordsRequest, FlatRecordsResponse]

// XTCPFlatRecordServiceServer is the server API for XTCPFlatRecordService service.
// All implementations must embed UnimplementedXTCPFlatRecordServiceServer
// for forward compatibility.
type XTCPFlatRecordServiceServer interface {
	// If xtcp is polling, this will return the stream
	FlatRecords(*FlatRecordsRequest, grpc.ServerStreamingServer[FlatRecordsResponse]) error
	// If xtcp is not polling, this allows the client to send a poll request
	PollFlatRecords(grpc.BidiStreamingServer[PollFlatRecordsRequest, FlatRecordsResponse]) error
	mustEmbedUnimplementedXTCPFlatRecordServiceServer()
}

// UnimplementedXTCPFlatRecordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedXTCPFlatRecordServiceServer struct{}

func (UnimplementedXTCPFlatRecordServiceServer) FlatRecords(*FlatRecordsRequest, grpc.ServerStreamingServer[FlatRecordsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FlatRecords not implemented")
}
func (UnimplementedXTCPFlatRecordServiceServer) PollFlatRecords(grpc.BidiStreamingServer[PollFlatRecordsRequest, FlatRecordsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PollFlatRecords not implemented")
}
func (UnimplementedXTCPFlatRecordServiceServer) mustEmbedUnimplementedXTCPFlatRecordServiceServer() {}
func (UnimplementedXTCPFlatRecordServiceServer) testEmbeddedByValue()                               {}

// UnsafeXTCPFlatRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XTCPFlatRecordServiceServer will
// result in compilation errors.
type UnsafeXTCPFlatRecordServiceServer interface {
	mustEmbedUnimplementedXTCPFlatRecordServiceServer()
}

func RegisterXTCPFlatRecordServiceServer(s grpc.ServiceRegistrar, srv XTCPFlatRecordServiceServer) {
	// If the following call pancis, it indicates UnimplementedXTCPFlatRecordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&XTCPFlatRecordService_ServiceDesc, srv)
}

func _XTCPFlatRecordService_FlatRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlatRecordsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XTCPFlatRecordServiceServer).FlatRecords(m, &grpc.GenericServerStream[FlatRecordsRequest, FlatRecordsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XTCPFlatRecordService_FlatRecordsServer = grpc.ServerStreamingServer[FlatRecordsResponse]

func _XTCPFlatRecordService_PollFlatRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(XTCPFlatRecordServiceServer).PollFlatRecords(&grpc.GenericServerStream[PollFlatRecordsRequest, FlatRecordsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XTCPFlatRecordService_PollFlatRecordsServer = grpc.BidiStreamingServer[PollFlatRecordsRequest, FlatRecordsResponse]

// XTCPFlatRecordService_ServiceDesc is the grpc.ServiceDesc for XTCPFlatRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XTCPFlatRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xtcp_flat_record.v1.XTCPFlatRecordService",
	HandlerType: (*XTCPFlatRecordServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FlatRecords",
			Handler:       _XTCPFlatRecordService_FlatRecords_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PollFlatRecords",
			Handler:       _XTCPFlatRecordService_PollFlatRecords_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "xtcp_flat_record/v1/xtcp_flat_record.proto",
}
