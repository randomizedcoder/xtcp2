//
// xTCP - eXport TCP Inet Diagnostic messages
//
// These are all the structs relating to the TCP diagnotic module in the kernel
//
// Please note that protobufs smallest size is 32 bits, so we actually expand uint8/16 to uint32s.
// In the protos below, I've commented which ones are uint8/16
//
// There are links to the kernel source showing where the struct came from.
//
// Build this using buf build ( https://buf.build/ ), see the buf config in the root folder

// Little reminder on compiling
// https://developers.google.com/protocol-buffers/docs/gotutorial
// go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
// protoc --go_out=paths=source_relative:. xtcppb.proto

// https://protobuf.dev/programming-guides/encoding/#structure

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: xtcp_flat_record/v1/xtcp_flat_record.proto

package xtcp_flat_record

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type XtcpFlatRecord_CongestionAlgorithm int32

const (
	XtcpFlatRecord_CONGESTION_ALGORITHM_UNSPECIFIED XtcpFlatRecord_CongestionAlgorithm = 0
	XtcpFlatRecord_CONGESTION_ALGORITHM_CUBIC       XtcpFlatRecord_CongestionAlgorithm = 1
	XtcpFlatRecord_CONGESTION_ALGORITHM_DCTCP       XtcpFlatRecord_CongestionAlgorithm = 2
	XtcpFlatRecord_CONGESTION_ALGORITHM_VEGAS       XtcpFlatRecord_CongestionAlgorithm = 3
	XtcpFlatRecord_CONGESTION_ALGORITHM_PRAGUE      XtcpFlatRecord_CongestionAlgorithm = 4
	XtcpFlatRecord_CONGESTION_ALGORITHM_BBR1        XtcpFlatRecord_CongestionAlgorithm = 5
	XtcpFlatRecord_CONGESTION_ALGORITHM_BBR2        XtcpFlatRecord_CongestionAlgorithm = 6
	XtcpFlatRecord_CONGESTION_ALGORITHM_BBR3        XtcpFlatRecord_CongestionAlgorithm = 7
)

// Enum value maps for XtcpFlatRecord_CongestionAlgorithm.
var (
	XtcpFlatRecord_CongestionAlgorithm_name = map[int32]string{
		0: "CONGESTION_ALGORITHM_UNSPECIFIED",
		1: "CONGESTION_ALGORITHM_CUBIC",
		2: "CONGESTION_ALGORITHM_DCTCP",
		3: "CONGESTION_ALGORITHM_VEGAS",
		4: "CONGESTION_ALGORITHM_PRAGUE",
		5: "CONGESTION_ALGORITHM_BBR1",
		6: "CONGESTION_ALGORITHM_BBR2",
		7: "CONGESTION_ALGORITHM_BBR3",
	}
	XtcpFlatRecord_CongestionAlgorithm_value = map[string]int32{
		"CONGESTION_ALGORITHM_UNSPECIFIED": 0,
		"CONGESTION_ALGORITHM_CUBIC":       1,
		"CONGESTION_ALGORITHM_DCTCP":       2,
		"CONGESTION_ALGORITHM_VEGAS":       3,
		"CONGESTION_ALGORITHM_PRAGUE":      4,
		"CONGESTION_ALGORITHM_BBR1":        5,
		"CONGESTION_ALGORITHM_BBR2":        6,
		"CONGESTION_ALGORITHM_BBR3":        7,
	}
)

func (x XtcpFlatRecord_CongestionAlgorithm) Enum() *XtcpFlatRecord_CongestionAlgorithm {
	p := new(XtcpFlatRecord_CongestionAlgorithm)
	*p = x
	return p
}

func (x XtcpFlatRecord_CongestionAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XtcpFlatRecord_CongestionAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_xtcp_flat_record_v1_xtcp_flat_record_proto_enumTypes[0].Descriptor()
}

func (XtcpFlatRecord_CongestionAlgorithm) Type() protoreflect.EnumType {
	return &file_xtcp_flat_record_v1_xtcp_flat_record_proto_enumTypes[0]
}

func (x XtcpFlatRecord_CongestionAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XtcpFlatRecord_CongestionAlgorithm.Descriptor instead.
func (XtcpFlatRecord_CongestionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDescGZIP(), []int{3, 0}
}

type FlatRecordsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlatRecordsRequest) Reset() {
	*x = FlatRecordsRequest{}
	mi := &file_xtcp_flat_record_v1_xtcp_flat_record_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatRecordsRequest) ProtoMessage() {}

func (x *FlatRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xtcp_flat_record_v1_xtcp_flat_record_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatRecordsRequest.ProtoReflect.Descriptor instead.
func (*FlatRecordsRequest) Descriptor() ([]byte, []int) {
	return file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDescGZIP(), []int{0}
}

type FlatRecordsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	XtcpFlatRecord *XtcpFlatRecord        `protobuf:"bytes,1,opt,name=xtcp_flat_record,json=xtcpFlatRecord,proto3" json:"xtcp_flat_record,omitempty"` //xtcp_flat_record xtcp_flat_record                 = 1;
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FlatRecordsResponse) Reset() {
	*x = FlatRecordsResponse{}
	mi := &file_xtcp_flat_record_v1_xtcp_flat_record_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlatRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlatRecordsResponse) ProtoMessage() {}

func (x *FlatRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_xtcp_flat_record_v1_xtcp_flat_record_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlatRecordsResponse.ProtoReflect.Descriptor instead.
func (*FlatRecordsResponse) Descriptor() ([]byte, []int) {
	return file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDescGZIP(), []int{1}
}

func (x *FlatRecordsResponse) GetXtcpFlatRecord() *XtcpFlatRecord {
	if x != nil {
		return x.XtcpFlatRecord
	}
	return nil
}

type PollFlatRecordsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PollFlatRecordsRequest) Reset() {
	*x = PollFlatRecordsRequest{}
	mi := &file_xtcp_flat_record_v1_xtcp_flat_record_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollFlatRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollFlatRecordsRequest) ProtoMessage() {}

func (x *PollFlatRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_xtcp_flat_record_v1_xtcp_flat_record_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollFlatRecordsRequest.ProtoReflect.Descriptor instead.
func (*PollFlatRecordsRequest) Descriptor() ([]byte, []int) {
	return file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDescGZIP(), []int{2}
}

// xtcp_flat_record is the record type exported by xtcp with ALL the inet_diag information
type XtcpFlatRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// message xtcp_flat_record {
	Sec      uint64 `protobuf:"varint,1,opt,name=sec,proto3" json:"sec,omitempty"`
	Nsec     uint64 `protobuf:"varint,2,opt,name=nsec,proto3" json:"nsec,omitempty"`
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// network namespace
	Netns string `protobuf:"bytes,4,opt,name=netns,proto3" json:"netns,omitempty"`
	// network namespace id
	// TODO xtcp does not currently get the id
	Nsid uint32 `protobuf:"varint,5,opt,name=nsid,proto3" json:"nsid,omitempty"`
	// free form string
	Label string `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	// free form string
	Tag                              string `protobuf:"bytes,7,opt,name=tag,proto3" json:"tag,omitempty"`
	RecordCounter                    uint64 `protobuf:"varint,8,opt,name=record_counter,json=recordCounter,proto3" json:"record_counter,omitempty"`
	SocketFd                         uint64 `protobuf:"varint,9,opt,name=socket_fd,json=socketFd,proto3" json:"socket_fd,omitempty"`
	NetlinkerId                      uint64 `protobuf:"varint,10,opt,name=netlinker_id,json=netlinkerId,proto3" json:"netlinker_id,omitempty"`
	InetDiagMsgFamily                uint32 `protobuf:"varint,101,opt,name=inet_diag_msg_family,json=inetDiagMsgFamily,proto3" json:"inet_diag_msg_family,omitempty"`                                                  // uint8
	InetDiagMsgState                 uint32 `protobuf:"varint,102,opt,name=inet_diag_msg_state,json=inetDiagMsgState,proto3" json:"inet_diag_msg_state,omitempty"`                                                     // uint8
	InetDiagMsgTimer                 uint32 `protobuf:"varint,103,opt,name=inet_diag_msg_timer,json=inetDiagMsgTimer,proto3" json:"inet_diag_msg_timer,omitempty"`                                                     // uint8
	InetDiagMsgRetrans               uint32 `protobuf:"varint,104,opt,name=inet_diag_msg_retrans,json=inetDiagMsgRetrans,proto3" json:"inet_diag_msg_retrans,omitempty"`                                               // uint8
	InetDiagMsgSocketSourcePort      uint32 `protobuf:"varint,105,opt,name=inet_diag_msg_socket_source_port,json=inetDiagMsgSocketSourcePort,proto3" json:"inet_diag_msg_socket_source_port,omitempty"`                // __be16
	InetDiagMsgSocketDestinationPort uint32 `protobuf:"varint,106,opt,name=inet_diag_msg_socket_destination_port,json=inetDiagMsgSocketDestinationPort,proto3" json:"inet_diag_msg_socket_destination_port,omitempty"` // __be16
	InetDiagMsgSocketSource          []byte `protobuf:"bytes,107,opt,name=inet_diag_msg_socket_source,json=inetDiagMsgSocketSource,proto3" json:"inet_diag_msg_socket_source,omitempty"`
	InetDiagMsgSocketDestination     []byte `protobuf:"bytes,108,opt,name=inet_diag_msg_socket_destination,json=inetDiagMsgSocketDestination,proto3" json:"inet_diag_msg_socket_destination,omitempty"`
	InetDiagMsgSocketInterface       uint32 `protobuf:"varint,109,opt,name=inet_diag_msg_socket_interface,json=inetDiagMsgSocketInterface,proto3" json:"inet_diag_msg_socket_interface,omitempty"`
	InetDiagMsgSocketCookie          uint64 `protobuf:"varint,110,opt,name=inet_diag_msg_socket_cookie,json=inetDiagMsgSocketCookie,proto3" json:"inet_diag_msg_socket_cookie,omitempty"` // [2]uint32
	InetDiagMsgSocketDestAsn         uint64 `protobuf:"varint,111,opt,name=inet_diag_msg_socket_dest_asn,json=inetDiagMsgSocketDestAsn,proto3" json:"inet_diag_msg_socket_dest_asn,omitempty"`
	InetDiagMsgSocketNextHopAsn      uint64 `protobuf:"varint,112,opt,name=inet_diag_msg_socket_next_hop_asn,json=inetDiagMsgSocketNextHopAsn,proto3" json:"inet_diag_msg_socket_next_hop_asn,omitempty"`
	InetDiagMsgExpires               uint32 `protobuf:"varint,113,opt,name=inet_diag_msg_expires,json=inetDiagMsgExpires,proto3" json:"inet_diag_msg_expires,omitempty"`
	InetDiagMsgRqueue                uint32 `protobuf:"varint,114,opt,name=inet_diag_msg_rqueue,json=inetDiagMsgRqueue,proto3" json:"inet_diag_msg_rqueue,omitempty"`
	InetDiagMsgWqueue                uint32 `protobuf:"varint,115,opt,name=inet_diag_msg_wqueue,json=inetDiagMsgWqueue,proto3" json:"inet_diag_msg_wqueue,omitempty"`
	InetDiagMsgUid                   uint32 `protobuf:"varint,116,opt,name=inet_diag_msg_uid,json=inetDiagMsgUid,proto3" json:"inet_diag_msg_uid,omitempty"`
	InetDiagMsgInode                 uint32 `protobuf:"varint,117,opt,name=inet_diag_msg_inode,json=inetDiagMsgInode,proto3" json:"inet_diag_msg_inode,omitempty"`
	MemInfoRmem                      uint32 `protobuf:"varint,201,opt,name=mem_info_rmem,json=memInfoRmem,proto3" json:"mem_info_rmem,omitempty"`
	MemInfoWmem                      uint32 `protobuf:"varint,202,opt,name=mem_info_wmem,json=memInfoWmem,proto3" json:"mem_info_wmem,omitempty"`
	MemInfoFmem                      uint32 `protobuf:"varint,203,opt,name=mem_info_fmem,json=memInfoFmem,proto3" json:"mem_info_fmem,omitempty"`
	MemInfoTmem                      uint32 `protobuf:"varint,204,opt,name=mem_info_tmem,json=memInfoTmem,proto3" json:"mem_info_tmem,omitempty"`
	TcpInfoState                     uint32 `protobuf:"varint,301,opt,name=tcp_info_state,json=tcpInfoState,proto3" json:"tcp_info_state,omitempty"`                   // uint8
	TcpInfoCaState                   uint32 `protobuf:"varint,302,opt,name=tcp_info_ca_state,json=tcpInfoCaState,proto3" json:"tcp_info_ca_state,omitempty"`           // uint8
	TcpInfoRetransmits               uint32 `protobuf:"varint,303,opt,name=tcp_info_retransmits,json=tcpInfoRetransmits,proto3" json:"tcp_info_retransmits,omitempty"` // uint8
	TcpInfoProbes                    uint32 `protobuf:"varint,304,opt,name=tcp_info_probes,json=tcpInfoProbes,proto3" json:"tcp_info_probes,omitempty"`                // uint8
	TcpInfoBackoff                   uint32 `protobuf:"varint,305,opt,name=tcp_info_backoff,json=tcpInfoBackoff,proto3" json:"tcp_info_backoff,omitempty"`             // uint8
	TcpInfoOptions                   uint32 `protobuf:"varint,306,opt,name=tcp_info_options,json=tcpInfoOptions,proto3" json:"tcp_info_options,omitempty"`             // uint8
	// __u8	_snd_wscale : 4, _rcv_wscale : 4;
	// __u8	_delivery_rate_app_limited:1, _fastopen_client_fail:2;
	TcpInfoSendScale              uint32 `protobuf:"varint,307,opt,name=tcp_info_send_scale,json=tcpInfoSendScale,proto3" json:"tcp_info_send_scale,omitempty"`                                            // uint4
	TcpInfoRcvScale               uint32 `protobuf:"varint,308,opt,name=tcp_info_rcv_scale,json=tcpInfoRcvScale,proto3" json:"tcp_info_rcv_scale,omitempty"`                                               // uint4
	TcpInfoDeliveryRateAppLimited uint32 `protobuf:"varint,309,opt,name=tcp_info_delivery_rate_app_limited,json=tcpInfoDeliveryRateAppLimited,proto3" json:"tcp_info_delivery_rate_app_limited,omitempty"` // uint8
	TcpInfoFastOpenClientFailed   uint32 `protobuf:"varint,310,opt,name=tcp_info_fast_open_client_failed,json=tcpInfoFastOpenClientFailed,proto3" json:"tcp_info_fast_open_client_failed,omitempty"`       // uint8
	TcpInfoRto                    uint32 `protobuf:"varint,315,opt,name=tcp_info_rto,json=tcpInfoRto,proto3" json:"tcp_info_rto,omitempty"`
	TcpInfoAto                    uint32 `protobuf:"varint,316,opt,name=tcp_info_ato,json=tcpInfoAto,proto3" json:"tcp_info_ato,omitempty"`
	TcpInfoSndMss                 uint32 `protobuf:"varint,317,opt,name=tcp_info_snd_mss,json=tcpInfoSndMss,proto3" json:"tcp_info_snd_mss,omitempty"`
	TcpInfoRcvMss                 uint32 `protobuf:"varint,318,opt,name=tcp_info_rcv_mss,json=tcpInfoRcvMss,proto3" json:"tcp_info_rcv_mss,omitempty"`
	TcpInfoUnacked                uint32 `protobuf:"varint,319,opt,name=tcp_info_unacked,json=tcpInfoUnacked,proto3" json:"tcp_info_unacked,omitempty"`
	TcpInfoSacked                 uint32 `protobuf:"varint,320,opt,name=tcp_info_sacked,json=tcpInfoSacked,proto3" json:"tcp_info_sacked,omitempty"`
	TcpInfoLost                   uint32 `protobuf:"varint,321,opt,name=tcp_info_lost,json=tcpInfoLost,proto3" json:"tcp_info_lost,omitempty"`
	TcpInfoRetrans                uint32 `protobuf:"varint,322,opt,name=tcp_info_retrans,json=tcpInfoRetrans,proto3" json:"tcp_info_retrans,omitempty"`
	TcpInfoFackets                uint32 `protobuf:"varint,323,opt,name=tcp_info_fackets,json=tcpInfoFackets,proto3" json:"tcp_info_fackets,omitempty"`
	// Times
	TcpInfoLastDataSent uint32 `protobuf:"varint,324,opt,name=tcp_info_last_data_sent,json=tcpInfoLastDataSent,proto3" json:"tcp_info_last_data_sent,omitempty"`
	TcpInfoLastAckSent  uint32 `protobuf:"varint,325,opt,name=tcp_info_last_ack_sent,json=tcpInfoLastAckSent,proto3" json:"tcp_info_last_ack_sent,omitempty"`
	TcpInfoLastDataRecv uint32 `protobuf:"varint,326,opt,name=tcp_info_last_data_recv,json=tcpInfoLastDataRecv,proto3" json:"tcp_info_last_data_recv,omitempty"`
	TcpInfoLastAckRecv  uint32 `protobuf:"varint,327,opt,name=tcp_info_last_ack_recv,json=tcpInfoLastAckRecv,proto3" json:"tcp_info_last_ack_recv,omitempty"`
	// Metrics
	TcpInfoPmtu          uint32 `protobuf:"varint,328,opt,name=tcp_info_pmtu,json=tcpInfoPmtu,proto3" json:"tcp_info_pmtu,omitempty"`
	TcpInfoRcvSsthresh   uint32 `protobuf:"varint,329,opt,name=tcp_info_rcv_ssthresh,json=tcpInfoRcvSsthresh,proto3" json:"tcp_info_rcv_ssthresh,omitempty"`
	TcpInfoRtt           uint32 `protobuf:"varint,330,opt,name=tcp_info_rtt,json=tcpInfoRtt,proto3" json:"tcp_info_rtt,omitempty"`
	TcpInfoRttVar        uint32 `protobuf:"varint,331,opt,name=tcp_info_rtt_var,json=tcpInfoRttVar,proto3" json:"tcp_info_rtt_var,omitempty"`
	TcpInfoSndSsthresh   uint32 `protobuf:"varint,332,opt,name=tcp_info_snd_ssthresh,json=tcpInfoSndSsthresh,proto3" json:"tcp_info_snd_ssthresh,omitempty"`
	TcpInfoSndCwnd       uint32 `protobuf:"varint,333,opt,name=tcp_info_snd_cwnd,json=tcpInfoSndCwnd,proto3" json:"tcp_info_snd_cwnd,omitempty"`
	TcpInfoAdvMss        uint32 `protobuf:"varint,334,opt,name=tcp_info_adv_mss,json=tcpInfoAdvMss,proto3" json:"tcp_info_adv_mss,omitempty"`
	TcpInfoReordering    uint32 `protobuf:"varint,335,opt,name=tcp_info_reordering,json=tcpInfoReordering,proto3" json:"tcp_info_reordering,omitempty"`
	TcpInfoRcvRtt        uint32 `protobuf:"varint,336,opt,name=tcp_info_rcv_rtt,json=tcpInfoRcvRtt,proto3" json:"tcp_info_rcv_rtt,omitempty"`
	TcpInfoRcvSpace      uint32 `protobuf:"varint,337,opt,name=tcp_info_rcv_space,json=tcpInfoRcvSpace,proto3" json:"tcp_info_rcv_space,omitempty"`
	TcpInfoTotalRetrans  uint32 `protobuf:"varint,338,opt,name=tcp_info_total_retrans,json=tcpInfoTotalRetrans,proto3" json:"tcp_info_total_retrans,omitempty"`
	TcpInfoPacingRate    uint64 `protobuf:"varint,339,opt,name=tcp_info_pacing_rate,json=tcpInfoPacingRate,proto3" json:"tcp_info_pacing_rate,omitempty"`
	TcpInfoMaxPacingRate uint64 `protobuf:"varint,340,opt,name=tcp_info_max_pacing_rate,json=tcpInfoMaxPacingRate,proto3" json:"tcp_info_max_pacing_rate,omitempty"`
	TcpInfoBytesAcked    uint64 `protobuf:"varint,341,opt,name=tcp_info_bytes_acked,json=tcpInfoBytesAcked,proto3" json:"tcp_info_bytes_acked,omitempty"`          // RFC4898 tcpEStatsAppHCThruOctetsAcked
	TcpInfoBytesReceived uint64 `protobuf:"varint,342,opt,name=tcp_info_bytes_received,json=tcpInfoBytesReceived,proto3" json:"tcp_info_bytes_received,omitempty"` // RFC4898 tcpEStatsAppHCThruOctetsReceived
	TcpInfoSegsOut       uint32 `protobuf:"varint,343,opt,name=tcp_info_segs_out,json=tcpInfoSegsOut,proto3" json:"tcp_info_segs_out,omitempty"`                   // RFC4898 tcpEStatsPerfSegsOut
	TcpInfoSegsIn        uint32 `protobuf:"varint,344,opt,name=tcp_info_segs_in,json=tcpInfoSegsIn,proto3" json:"tcp_info_segs_in,omitempty"`                      // RFC4898 tcpEStatsPerfSegsIn
	TcpInfoNotSentBytes  uint32 `protobuf:"varint,345,opt,name=tcp_info_not_sent_bytes,json=tcpInfoNotSentBytes,proto3" json:"tcp_info_not_sent_bytes,omitempty"`
	TcpInfoMinRtt        uint32 `protobuf:"varint,346,opt,name=tcp_info_min_rtt,json=tcpInfoMinRtt,proto3" json:"tcp_info_min_rtt,omitempty"`
	TcpInfoDataSegsIn    uint32 `protobuf:"varint,347,opt,name=tcp_info_data_segs_in,json=tcpInfoDataSegsIn,proto3" json:"tcp_info_data_segs_in,omitempty"`    // RFC4898 tcpEStatsDataSegsIn
	TcpInfoDataSegsOut   uint32 `protobuf:"varint,348,opt,name=tcp_info_data_segs_out,json=tcpInfoDataSegsOut,proto3" json:"tcp_info_data_segs_out,omitempty"` // RFC4898 tcpEStatsDataSegsOut
	TcpInfoDeliveryRate  uint64 `protobuf:"varint,349,opt,name=tcp_info_delivery_rate,json=tcpInfoDeliveryRate,proto3" json:"tcp_info_delivery_rate,omitempty"`
	TcpInfoBusyTime      uint64 `protobuf:"varint,350,opt,name=tcp_info_busy_time,json=tcpInfoBusyTime,proto3" json:"tcp_info_busy_time,omitempty"`                // Time (usec) busy sending data
	TcpInfoRwndLimited   uint64 `protobuf:"varint,351,opt,name=tcp_info_rwnd_limited,json=tcpInfoRwndLimited,proto3" json:"tcp_info_rwnd_limited,omitempty"`       // Time (usec) limited by receive window
	TcpInfoSndbufLimited uint64 `protobuf:"varint,352,opt,name=tcp_info_sndbuf_limited,json=tcpInfoSndbufLimited,proto3" json:"tcp_info_sndbuf_limited,omitempty"` // Time (usec) limited by send buffer
	TcpInfoDelivered     uint32 `protobuf:"varint,353,opt,name=tcp_info_delivered,json=tcpInfoDelivered,proto3" json:"tcp_info_delivered,omitempty"`
	TcpInfoDeliveredCe   uint32 `protobuf:"varint,354,opt,name=tcp_info_delivered_ce,json=tcpInfoDeliveredCe,proto3" json:"tcp_info_delivered_ce,omitempty"`
	// https://tools.ietf.org/html/rfc4898 TCP Extended Statistics MIB
	TcpInfoBytesSent          uint64 `protobuf:"varint,355,opt,name=tcp_info_bytes_sent,json=tcpInfoBytesSent,proto3" json:"tcp_info_bytes_sent,omitempty"`                              // RFC4898 tcpEStatsPerfHCDataOctetsOut
	TcpInfoBytesRetrans       uint64 `protobuf:"varint,356,opt,name=tcp_info_bytes_retrans,json=tcpInfoBytesRetrans,proto3" json:"tcp_info_bytes_retrans,omitempty"`                     // RFC4898 tcpEStatsPerfOctetsRetrans
	TcpInfoDsackDups          uint32 `protobuf:"varint,357,opt,name=tcp_info_dsack_dups,json=tcpInfoDsackDups,proto3" json:"tcp_info_dsack_dups,omitempty"`                              // RFC4898 tcpEStatsStackDSACKDups
	TcpInfoReordSeen          uint32 `protobuf:"varint,358,opt,name=tcp_info_reord_seen,json=tcpInfoReordSeen,proto3" json:"tcp_info_reord_seen,omitempty"`                              // reordering events seen
	TcpInfoRcvOoopack         uint32 `protobuf:"varint,359,opt,name=tcp_info_rcv_ooopack,json=tcpInfoRcvOoopack,proto3" json:"tcp_info_rcv_ooopack,omitempty"`                           // Out-of-order packets received
	TcpInfoSndWnd             uint32 `protobuf:"varint,360,opt,name=tcp_info_snd_wnd,json=tcpInfoSndWnd,proto3" json:"tcp_info_snd_wnd,omitempty"`                                       // peer's advertised receive window after scaling (bytes)
	TcpInfoRcvWnd             uint32 `protobuf:"varint,361,opt,name=tcp_info_rcv_wnd,json=tcpInfoRcvWnd,proto3" json:"tcp_info_rcv_wnd,omitempty"`                                       // local advertised receive window after scaling (bytes)
	TcpInfoRehash             uint32 `protobuf:"varint,362,opt,name=tcp_info_rehash,json=tcpInfoRehash,proto3" json:"tcp_info_rehash,omitempty"`                                         // PLB or timeout triggered rehash attempts
	TcpInfoTotalRto           uint32 `protobuf:"varint,363,opt,name=tcp_info_total_rto,json=tcpInfoTotalRto,proto3" json:"tcp_info_total_rto,omitempty"`                                 // Total number of RTO timeouts, including SYN/SYN-ACK and recurring timeouts
	TcpInfoTotalRtoRecoveries uint32 `protobuf:"varint,364,opt,name=tcp_info_total_rto_recoveries,json=tcpInfoTotalRtoRecoveries,proto3" json:"tcp_info_total_rto_recoveries,omitempty"` // Total number of RTO recoveries, including any unfinished recovery
	TcpInfoTotalRtoTime       uint32 `protobuf:"varint,365,opt,name=tcp_info_total_rto_time,json=tcpInfoTotalRtoTime,proto3" json:"tcp_info_total_rto_time,omitempty"`                   // Total time spent in RTO recoveries in milliseconds, including any unfinished recovery
	// Please note it's recommended to use the enum for efficency, but keeping the string
	// just in case we need to quickly put a different algorithm in without updating the enum.
	// Obviously it's optional, so it low cost.
	CongestionAlgorithmString string                             `protobuf:"bytes,400,opt,name=congestion_algorithm_string,json=congestionAlgorithmString,proto3" json:"congestion_algorithm_string,omitempty"`                                                        // INET_DIAG_CONG 4
	CongestionAlgorithmEnum   XtcpFlatRecord_CongestionAlgorithm `protobuf:"varint,401,opt,name=congestion_algorithm_enum,json=congestionAlgorithmEnum,proto3,enum=xtcp_flat_record.v1.XtcpFlatRecord_CongestionAlgorithm" json:"congestion_algorithm_enum,omitempty"` // INET_DIAG_CONG 4
	TypeOfService             uint32                             `protobuf:"varint,501,opt,name=type_of_service,json=typeOfService,proto3" json:"type_of_service,omitempty"`                                                                                           // INET_DIAG_TOS 5 uint8
	TrafficClass              uint32                             `protobuf:"varint,502,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`                                                                                                // INET_DIAG_TCLASS 6 uint8
	SkMemInfoRmemAlloc        uint32                             `protobuf:"varint,601,opt,name=sk_mem_info_rmem_alloc,json=skMemInfoRmemAlloc,proto3" json:"sk_mem_info_rmem_alloc,omitempty"`
	SkMemInfoRcvBuf           uint32                             `protobuf:"varint,602,opt,name=sk_mem_info_rcv_buf,json=skMemInfoRcvBuf,proto3" json:"sk_mem_info_rcv_buf,omitempty"`
	SkMemInfoWmemAlloc        uint32                             `protobuf:"varint,603,opt,name=sk_mem_info_wmem_alloc,json=skMemInfoWmemAlloc,proto3" json:"sk_mem_info_wmem_alloc,omitempty"`
	SkMemInfoSndBuf           uint32                             `protobuf:"varint,604,opt,name=sk_mem_info_snd_buf,json=skMemInfoSndBuf,proto3" json:"sk_mem_info_snd_buf,omitempty"`
	SkMemInfoFwdAlloc         uint32                             `protobuf:"varint,605,opt,name=sk_mem_info_fwd_alloc,json=skMemInfoFwdAlloc,proto3" json:"sk_mem_info_fwd_alloc,omitempty"`
	SkMemInfoWmemQueued       uint32                             `protobuf:"varint,606,opt,name=sk_mem_info_wmem_queued,json=skMemInfoWmemQueued,proto3" json:"sk_mem_info_wmem_queued,omitempty"`
	SkMemInfoOptmem           uint32                             `protobuf:"varint,607,opt,name=sk_mem_info_optmem,json=skMemInfoOptmem,proto3" json:"sk_mem_info_optmem,omitempty"`
	SkMemInfoBacklog          uint32                             `protobuf:"varint,608,opt,name=sk_mem_info_backlog,json=skMemInfoBacklog,proto3" json:"sk_mem_info_backlog,omitempty"`
	SkMemInfoDrops            uint32                             `protobuf:"varint,609,opt,name=sk_mem_info_drops,json=skMemInfoDrops,proto3" json:"sk_mem_info_drops,omitempty"`
	ShutdownState             uint32                             `protobuf:"varint,700,opt,name=shutdown_state,json=shutdownState,proto3" json:"shutdown_state,omitempty"` // UNIX_DIAG_SHUTDOWN 8uint8
	VegasInfoEnabled          uint32                             `protobuf:"varint,801,opt,name=vegas_info_enabled,json=vegasInfoEnabled,proto3" json:"vegas_info_enabled,omitempty"`
	VegasInfoRttCnt           uint32                             `protobuf:"varint,802,opt,name=vegas_info_rtt_cnt,json=vegasInfoRttCnt,proto3" json:"vegas_info_rtt_cnt,omitempty"`
	VegasInfoRtt              uint32                             `protobuf:"varint,803,opt,name=vegas_info_rtt,json=vegasInfoRtt,proto3" json:"vegas_info_rtt,omitempty"`
	VegasInfoMinRtt           uint32                             `protobuf:"varint,804,opt,name=vegas_info_min_rtt,json=vegasInfoMinRtt,proto3" json:"vegas_info_min_rtt,omitempty"`
	DctcpInfoEnabled          uint32                             `protobuf:"varint,901,opt,name=dctcp_info_enabled,json=dctcpInfoEnabled,proto3" json:"dctcp_info_enabled,omitempty"`
	DctcpInfoCeState          uint32                             `protobuf:"varint,902,opt,name=dctcp_info_ce_state,json=dctcpInfoCeState,proto3" json:"dctcp_info_ce_state,omitempty"`
	DctcpInfoAlpha            uint32                             `protobuf:"varint,903,opt,name=dctcp_info_alpha,json=dctcpInfoAlpha,proto3" json:"dctcp_info_alpha,omitempty"`
	DctcpInfoAbEcn            uint32                             `protobuf:"varint,904,opt,name=dctcp_info_ab_ecn,json=dctcpInfoAbEcn,proto3" json:"dctcp_info_ab_ecn,omitempty"`
	DctcpInfoAbTot            uint32                             `protobuf:"varint,905,opt,name=dctcp_info_ab_tot,json=dctcpInfoAbTot,proto3" json:"dctcp_info_ab_tot,omitempty"`
	BbrInfoBwLo               uint32                             `protobuf:"varint,1001,opt,name=bbr_info_bw_lo,json=bbrInfoBwLo,proto3" json:"bbr_info_bw_lo,omitempty"`
	BbrInfoBwHi               uint32                             `protobuf:"varint,1002,opt,name=bbr_info_bw_hi,json=bbrInfoBwHi,proto3" json:"bbr_info_bw_hi,omitempty"`
	BbrInfoMinRtt             uint32                             `protobuf:"varint,1003,opt,name=bbr_info_min_rtt,json=bbrInfoMinRtt,proto3" json:"bbr_info_min_rtt,omitempty"`
	BbrInfoPacingGain         uint32                             `protobuf:"varint,1004,opt,name=bbr_info_pacing_gain,json=bbrInfoPacingGain,proto3" json:"bbr_info_pacing_gain,omitempty"`
	BbrInfoCwndGain           uint32                             `protobuf:"varint,1005,opt,name=bbr_info_cwnd_gain,json=bbrInfoCwndGain,proto3" json:"bbr_info_cwnd_gain,omitempty"`
	ClassId                   uint32                             `protobuf:"varint,1101,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"` // INET_DIAG_CLASS_ID 17 uint32
	SockOpt                   uint32                             `protobuf:"varint,1102,opt,name=sock_opt,json=sockOpt,proto3" json:"sock_opt,omitempty"` // INET_DIAG_SOCKOPT
	CGroup                    uint64                             `protobuf:"varint,1203,opt,name=c_group,json=cGroup,proto3" json:"c_group,omitempty"`    // INET_DIAG_BC_CGROUP_COND
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *XtcpFlatRecord) Reset() {
	*x = XtcpFlatRecord{}
	mi := &file_xtcp_flat_record_v1_xtcp_flat_record_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XtcpFlatRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XtcpFlatRecord) ProtoMessage() {}

func (x *XtcpFlatRecord) ProtoReflect() protoreflect.Message {
	mi := &file_xtcp_flat_record_v1_xtcp_flat_record_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XtcpFlatRecord.ProtoReflect.Descriptor instead.
func (*XtcpFlatRecord) Descriptor() ([]byte, []int) {
	return file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDescGZIP(), []int{3}
}

func (x *XtcpFlatRecord) GetSec() uint64 {
	if x != nil {
		return x.Sec
	}
	return 0
}

func (x *XtcpFlatRecord) GetNsec() uint64 {
	if x != nil {
		return x.Nsec
	}
	return 0
}

func (x *XtcpFlatRecord) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *XtcpFlatRecord) GetNetns() string {
	if x != nil {
		return x.Netns
	}
	return ""
}

func (x *XtcpFlatRecord) GetNsid() uint32 {
	if x != nil {
		return x.Nsid
	}
	return 0
}

func (x *XtcpFlatRecord) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *XtcpFlatRecord) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *XtcpFlatRecord) GetRecordCounter() uint64 {
	if x != nil {
		return x.RecordCounter
	}
	return 0
}

func (x *XtcpFlatRecord) GetSocketFd() uint64 {
	if x != nil {
		return x.SocketFd
	}
	return 0
}

func (x *XtcpFlatRecord) GetNetlinkerId() uint64 {
	if x != nil {
		return x.NetlinkerId
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgFamily() uint32 {
	if x != nil {
		return x.InetDiagMsgFamily
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgState() uint32 {
	if x != nil {
		return x.InetDiagMsgState
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgTimer() uint32 {
	if x != nil {
		return x.InetDiagMsgTimer
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgRetrans() uint32 {
	if x != nil {
		return x.InetDiagMsgRetrans
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgSocketSourcePort() uint32 {
	if x != nil {
		return x.InetDiagMsgSocketSourcePort
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgSocketDestinationPort() uint32 {
	if x != nil {
		return x.InetDiagMsgSocketDestinationPort
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgSocketSource() []byte {
	if x != nil {
		return x.InetDiagMsgSocketSource
	}
	return nil
}

func (x *XtcpFlatRecord) GetInetDiagMsgSocketDestination() []byte {
	if x != nil {
		return x.InetDiagMsgSocketDestination
	}
	return nil
}

func (x *XtcpFlatRecord) GetInetDiagMsgSocketInterface() uint32 {
	if x != nil {
		return x.InetDiagMsgSocketInterface
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgSocketCookie() uint64 {
	if x != nil {
		return x.InetDiagMsgSocketCookie
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgSocketDestAsn() uint64 {
	if x != nil {
		return x.InetDiagMsgSocketDestAsn
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgSocketNextHopAsn() uint64 {
	if x != nil {
		return x.InetDiagMsgSocketNextHopAsn
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgExpires() uint32 {
	if x != nil {
		return x.InetDiagMsgExpires
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgRqueue() uint32 {
	if x != nil {
		return x.InetDiagMsgRqueue
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgWqueue() uint32 {
	if x != nil {
		return x.InetDiagMsgWqueue
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgUid() uint32 {
	if x != nil {
		return x.InetDiagMsgUid
	}
	return 0
}

func (x *XtcpFlatRecord) GetInetDiagMsgInode() uint32 {
	if x != nil {
		return x.InetDiagMsgInode
	}
	return 0
}

func (x *XtcpFlatRecord) GetMemInfoRmem() uint32 {
	if x != nil {
		return x.MemInfoRmem
	}
	return 0
}

func (x *XtcpFlatRecord) GetMemInfoWmem() uint32 {
	if x != nil {
		return x.MemInfoWmem
	}
	return 0
}

func (x *XtcpFlatRecord) GetMemInfoFmem() uint32 {
	if x != nil {
		return x.MemInfoFmem
	}
	return 0
}

func (x *XtcpFlatRecord) GetMemInfoTmem() uint32 {
	if x != nil {
		return x.MemInfoTmem
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoState() uint32 {
	if x != nil {
		return x.TcpInfoState
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoCaState() uint32 {
	if x != nil {
		return x.TcpInfoCaState
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRetransmits() uint32 {
	if x != nil {
		return x.TcpInfoRetransmits
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoProbes() uint32 {
	if x != nil {
		return x.TcpInfoProbes
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoBackoff() uint32 {
	if x != nil {
		return x.TcpInfoBackoff
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoOptions() uint32 {
	if x != nil {
		return x.TcpInfoOptions
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoSendScale() uint32 {
	if x != nil {
		return x.TcpInfoSendScale
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRcvScale() uint32 {
	if x != nil {
		return x.TcpInfoRcvScale
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoDeliveryRateAppLimited() uint32 {
	if x != nil {
		return x.TcpInfoDeliveryRateAppLimited
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoFastOpenClientFailed() uint32 {
	if x != nil {
		return x.TcpInfoFastOpenClientFailed
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRto() uint32 {
	if x != nil {
		return x.TcpInfoRto
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoAto() uint32 {
	if x != nil {
		return x.TcpInfoAto
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoSndMss() uint32 {
	if x != nil {
		return x.TcpInfoSndMss
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRcvMss() uint32 {
	if x != nil {
		return x.TcpInfoRcvMss
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoUnacked() uint32 {
	if x != nil {
		return x.TcpInfoUnacked
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoSacked() uint32 {
	if x != nil {
		return x.TcpInfoSacked
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoLost() uint32 {
	if x != nil {
		return x.TcpInfoLost
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRetrans() uint32 {
	if x != nil {
		return x.TcpInfoRetrans
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoFackets() uint32 {
	if x != nil {
		return x.TcpInfoFackets
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoLastDataSent() uint32 {
	if x != nil {
		return x.TcpInfoLastDataSent
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoLastAckSent() uint32 {
	if x != nil {
		return x.TcpInfoLastAckSent
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoLastDataRecv() uint32 {
	if x != nil {
		return x.TcpInfoLastDataRecv
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoLastAckRecv() uint32 {
	if x != nil {
		return x.TcpInfoLastAckRecv
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoPmtu() uint32 {
	if x != nil {
		return x.TcpInfoPmtu
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRcvSsthresh() uint32 {
	if x != nil {
		return x.TcpInfoRcvSsthresh
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRtt() uint32 {
	if x != nil {
		return x.TcpInfoRtt
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRttVar() uint32 {
	if x != nil {
		return x.TcpInfoRttVar
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoSndSsthresh() uint32 {
	if x != nil {
		return x.TcpInfoSndSsthresh
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoSndCwnd() uint32 {
	if x != nil {
		return x.TcpInfoSndCwnd
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoAdvMss() uint32 {
	if x != nil {
		return x.TcpInfoAdvMss
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoReordering() uint32 {
	if x != nil {
		return x.TcpInfoReordering
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRcvRtt() uint32 {
	if x != nil {
		return x.TcpInfoRcvRtt
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRcvSpace() uint32 {
	if x != nil {
		return x.TcpInfoRcvSpace
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoTotalRetrans() uint32 {
	if x != nil {
		return x.TcpInfoTotalRetrans
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoPacingRate() uint64 {
	if x != nil {
		return x.TcpInfoPacingRate
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoMaxPacingRate() uint64 {
	if x != nil {
		return x.TcpInfoMaxPacingRate
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoBytesAcked() uint64 {
	if x != nil {
		return x.TcpInfoBytesAcked
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoBytesReceived() uint64 {
	if x != nil {
		return x.TcpInfoBytesReceived
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoSegsOut() uint32 {
	if x != nil {
		return x.TcpInfoSegsOut
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoSegsIn() uint32 {
	if x != nil {
		return x.TcpInfoSegsIn
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoNotSentBytes() uint32 {
	if x != nil {
		return x.TcpInfoNotSentBytes
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoMinRtt() uint32 {
	if x != nil {
		return x.TcpInfoMinRtt
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoDataSegsIn() uint32 {
	if x != nil {
		return x.TcpInfoDataSegsIn
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoDataSegsOut() uint32 {
	if x != nil {
		return x.TcpInfoDataSegsOut
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoDeliveryRate() uint64 {
	if x != nil {
		return x.TcpInfoDeliveryRate
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoBusyTime() uint64 {
	if x != nil {
		return x.TcpInfoBusyTime
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRwndLimited() uint64 {
	if x != nil {
		return x.TcpInfoRwndLimited
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoSndbufLimited() uint64 {
	if x != nil {
		return x.TcpInfoSndbufLimited
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoDelivered() uint32 {
	if x != nil {
		return x.TcpInfoDelivered
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoDeliveredCe() uint32 {
	if x != nil {
		return x.TcpInfoDeliveredCe
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoBytesSent() uint64 {
	if x != nil {
		return x.TcpInfoBytesSent
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoBytesRetrans() uint64 {
	if x != nil {
		return x.TcpInfoBytesRetrans
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoDsackDups() uint32 {
	if x != nil {
		return x.TcpInfoDsackDups
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoReordSeen() uint32 {
	if x != nil {
		return x.TcpInfoReordSeen
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRcvOoopack() uint32 {
	if x != nil {
		return x.TcpInfoRcvOoopack
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoSndWnd() uint32 {
	if x != nil {
		return x.TcpInfoSndWnd
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRcvWnd() uint32 {
	if x != nil {
		return x.TcpInfoRcvWnd
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoRehash() uint32 {
	if x != nil {
		return x.TcpInfoRehash
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoTotalRto() uint32 {
	if x != nil {
		return x.TcpInfoTotalRto
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoTotalRtoRecoveries() uint32 {
	if x != nil {
		return x.TcpInfoTotalRtoRecoveries
	}
	return 0
}

func (x *XtcpFlatRecord) GetTcpInfoTotalRtoTime() uint32 {
	if x != nil {
		return x.TcpInfoTotalRtoTime
	}
	return 0
}

func (x *XtcpFlatRecord) GetCongestionAlgorithmString() string {
	if x != nil {
		return x.CongestionAlgorithmString
	}
	return ""
}

func (x *XtcpFlatRecord) GetCongestionAlgorithmEnum() XtcpFlatRecord_CongestionAlgorithm {
	if x != nil {
		return x.CongestionAlgorithmEnum
	}
	return XtcpFlatRecord_CONGESTION_ALGORITHM_UNSPECIFIED
}

func (x *XtcpFlatRecord) GetTypeOfService() uint32 {
	if x != nil {
		return x.TypeOfService
	}
	return 0
}

func (x *XtcpFlatRecord) GetTrafficClass() uint32 {
	if x != nil {
		return x.TrafficClass
	}
	return 0
}

func (x *XtcpFlatRecord) GetSkMemInfoRmemAlloc() uint32 {
	if x != nil {
		return x.SkMemInfoRmemAlloc
	}
	return 0
}

func (x *XtcpFlatRecord) GetSkMemInfoRcvBuf() uint32 {
	if x != nil {
		return x.SkMemInfoRcvBuf
	}
	return 0
}

func (x *XtcpFlatRecord) GetSkMemInfoWmemAlloc() uint32 {
	if x != nil {
		return x.SkMemInfoWmemAlloc
	}
	return 0
}

func (x *XtcpFlatRecord) GetSkMemInfoSndBuf() uint32 {
	if x != nil {
		return x.SkMemInfoSndBuf
	}
	return 0
}

func (x *XtcpFlatRecord) GetSkMemInfoFwdAlloc() uint32 {
	if x != nil {
		return x.SkMemInfoFwdAlloc
	}
	return 0
}

func (x *XtcpFlatRecord) GetSkMemInfoWmemQueued() uint32 {
	if x != nil {
		return x.SkMemInfoWmemQueued
	}
	return 0
}

func (x *XtcpFlatRecord) GetSkMemInfoOptmem() uint32 {
	if x != nil {
		return x.SkMemInfoOptmem
	}
	return 0
}

func (x *XtcpFlatRecord) GetSkMemInfoBacklog() uint32 {
	if x != nil {
		return x.SkMemInfoBacklog
	}
	return 0
}

func (x *XtcpFlatRecord) GetSkMemInfoDrops() uint32 {
	if x != nil {
		return x.SkMemInfoDrops
	}
	return 0
}

func (x *XtcpFlatRecord) GetShutdownState() uint32 {
	if x != nil {
		return x.ShutdownState
	}
	return 0
}

func (x *XtcpFlatRecord) GetVegasInfoEnabled() uint32 {
	if x != nil {
		return x.VegasInfoEnabled
	}
	return 0
}

func (x *XtcpFlatRecord) GetVegasInfoRttCnt() uint32 {
	if x != nil {
		return x.VegasInfoRttCnt
	}
	return 0
}

func (x *XtcpFlatRecord) GetVegasInfoRtt() uint32 {
	if x != nil {
		return x.VegasInfoRtt
	}
	return 0
}

func (x *XtcpFlatRecord) GetVegasInfoMinRtt() uint32 {
	if x != nil {
		return x.VegasInfoMinRtt
	}
	return 0
}

func (x *XtcpFlatRecord) GetDctcpInfoEnabled() uint32 {
	if x != nil {
		return x.DctcpInfoEnabled
	}
	return 0
}

func (x *XtcpFlatRecord) GetDctcpInfoCeState() uint32 {
	if x != nil {
		return x.DctcpInfoCeState
	}
	return 0
}

func (x *XtcpFlatRecord) GetDctcpInfoAlpha() uint32 {
	if x != nil {
		return x.DctcpInfoAlpha
	}
	return 0
}

func (x *XtcpFlatRecord) GetDctcpInfoAbEcn() uint32 {
	if x != nil {
		return x.DctcpInfoAbEcn
	}
	return 0
}

func (x *XtcpFlatRecord) GetDctcpInfoAbTot() uint32 {
	if x != nil {
		return x.DctcpInfoAbTot
	}
	return 0
}

func (x *XtcpFlatRecord) GetBbrInfoBwLo() uint32 {
	if x != nil {
		return x.BbrInfoBwLo
	}
	return 0
}

func (x *XtcpFlatRecord) GetBbrInfoBwHi() uint32 {
	if x != nil {
		return x.BbrInfoBwHi
	}
	return 0
}

func (x *XtcpFlatRecord) GetBbrInfoMinRtt() uint32 {
	if x != nil {
		return x.BbrInfoMinRtt
	}
	return 0
}

func (x *XtcpFlatRecord) GetBbrInfoPacingGain() uint32 {
	if x != nil {
		return x.BbrInfoPacingGain
	}
	return 0
}

func (x *XtcpFlatRecord) GetBbrInfoCwndGain() uint32 {
	if x != nil {
		return x.BbrInfoCwndGain
	}
	return 0
}

func (x *XtcpFlatRecord) GetClassId() uint32 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *XtcpFlatRecord) GetSockOpt() uint32 {
	if x != nil {
		return x.SockOpt
	}
	return 0
}

func (x *XtcpFlatRecord) GetCGroup() uint64 {
	if x != nil {
		return x.CGroup
	}
	return 0
}

// https://clickhouse.com/docs/en/interfaces/formats#protobuflist
type Envelope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Row           []*XtcpFlatRecord      `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty"` //repeated xtcp_flat_record row                     = 1;
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	mi := &file_xtcp_flat_record_v1_xtcp_flat_record_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_xtcp_flat_record_v1_xtcp_flat_record_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDescGZIP(), []int{4}
}

func (x *Envelope) GetRow() []*XtcpFlatRecord {
	if x != nil {
		return x.Row
	}
	return nil
}

var File_xtcp_flat_record_v1_xtcp_flat_record_proto protoreflect.FileDescriptor

var file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x78, 0x74,
	0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x22, 0x14, 0x0a, 0x12, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x13, 0x46, 0x6c, 0x61, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x10, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x5f,
	0x66, 0x6c, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x58,
	0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x78,
	0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x18, 0x0a,
	0x16, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa6, 0x2f, 0x0a, 0x0e, 0x58, 0x74, 0x63, 0x70,
	0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6e, 0x73, 0x65, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x65, 0x74, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x74,
	0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x73, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x6e, 0x73, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x66, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x46, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69,
	0x61, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64,
	0x69, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69,
	0x61, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x61,
	0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x69, 0x6e, 0x65, 0x74, 0x5f,
	0x64, 0x69, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x4f,
	0x0a, 0x25, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x69,
	0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x3c, 0x0a, 0x1b, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x6b,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73,
	0x67, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x46, 0x0a,
	0x20, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61,
	0x67, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1e, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69,
	0x61, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x69,
	0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x6e, 0x65,
	0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17,
	0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x3f, 0x0a, 0x1d, 0x69, 0x6e, 0x65, 0x74, 0x5f,
	0x64, 0x69, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x74, 0x41, 0x73, 0x6e, 0x12, 0x46, 0x0a, 0x21, 0x69, 0x6e, 0x65, 0x74,
	0x5f, 0x64, 0x69, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1b, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x73, 0x6e,
	0x12, 0x31, 0x0a, 0x15, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67, 0x52, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x61,
	0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x77, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x73, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67, 0x57,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69,
	0x61, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67, 0x55, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x13, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69,
	0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x6d, 0x65, 0x6d,
	0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x6d, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x77, 0x6d, 0x65, 0x6d, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x6d, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x6d, 0x65, 0x6d, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6d, 0x65, 0x6d, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x6d, 0x65, 0x6d, 0x18,
	0xcc, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x6d, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x63,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x63,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xae, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x18, 0xaf,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x63, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x18, 0xb0, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xb2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x63, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0xb3, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x63, 0x76, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0xb4,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x63,
	0x76, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0xb5, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1d, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66,
	0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74,
	0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x63,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x74, 0x6f, 0x18, 0xbb, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x74, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x74, 0x6f, 0x18, 0xbc, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x74, 0x6f,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6e, 0x64,
	0x5f, 0x6d, 0x73, 0x73, 0x18, 0xbd, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x63, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6e, 0x64, 0x4d, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x63,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x63, 0x76, 0x5f, 0x6d, 0x73, 0x73, 0x18, 0xbe,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x63,
	0x76, 0x4d, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xbf, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x63, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0xc1, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x18, 0xc2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0xc3, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xc4,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x61,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x63,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0xc5, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x63, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x35, 0x0a, 0x17, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0xc6, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x63, 0x76, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x76,
	0x18, 0xc7, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x76, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x6d, 0x74, 0x75, 0x18, 0xc8, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x6d, 0x74, 0x75,
	0x12, 0x32, 0x0a, 0x15, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x63, 0x76,
	0x5f, 0x73, 0x73, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0xc9, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x63, 0x76, 0x53, 0x73, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x72, 0x74, 0x74, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x63, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x74, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x74, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0xcb, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x74, 0x74, 0x56, 0x61,
	0x72, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6e,
	0x64, 0x5f, 0x73, 0x73, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0xcc, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6e, 0x64, 0x53, 0x73, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x73, 0x6e, 0x64, 0x5f, 0x63, 0x77, 0x6e, 0x64, 0x18, 0xcd, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6e, 0x64, 0x43, 0x77, 0x6e,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x64,
	0x76, 0x5f, 0x6d, 0x73, 0x73, 0x18, 0xce, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x63,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x64, 0x76, 0x4d, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74,
	0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0xcf, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x63, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x63, 0x76, 0x5f, 0x72, 0x74, 0x74,
	0x18, 0xd0, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x63, 0x76, 0x52, 0x74, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x72, 0x63, 0x76, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0xd1, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x63, 0x76, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0xd2,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x63,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0xd3, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x63, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xd5, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x41, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x63, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0xd6, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x63, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x73,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0xd7, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x63, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x67, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x5f, 0x69, 0x6e, 0x18,
	0xd8, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x67, 0x73, 0x49, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0xd9, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x74, 0x74,
	0x18, 0xda, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x69, 0x6e, 0x52, 0x74, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x5f, 0x69, 0x6e, 0x18,
	0xdb, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x65, 0x67, 0x73, 0x49, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x63, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0xdc, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x63, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x67, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xdd, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72,
	0x77, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0xdf, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x77, 0x6e, 0x64, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x73, 0x6e, 0x64, 0x62, 0x75, 0x66, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x18, 0xe0, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x6e, 0x64, 0x62, 0x75, 0x66, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x18, 0xe1, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x63, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x18, 0xe2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74,
	0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x43,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0xe3, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0xe4, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x63, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x73, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x70, 0x73, 0x18, 0xe5,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x73,
	0x61, 0x63, 0x6b, 0x44, 0x75, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x63, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0xe6,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x63, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x63, 0x76, 0x5f, 0x6f, 0x6f, 0x6f, 0x70, 0x61, 0x63, 0x6b, 0x18,
	0xe7, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x63, 0x76, 0x4f, 0x6f, 0x6f, 0x70, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x63, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6e, 0x64, 0x5f, 0x77, 0x6e, 0x64, 0x18, 0xe8, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6e, 0x64,
	0x57, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x72, 0x63, 0x76, 0x5f, 0x77, 0x6e, 0x64, 0x18, 0xe9, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x63, 0x76, 0x57, 0x6e, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x68, 0x61, 0x73, 0x68,
	0x18, 0xea, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x74, 0x6f, 0x18, 0xeb, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0xec, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x74, 0x63,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x74, 0x6f, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x63, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x74, 0x6f, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xed, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x63, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f,
	0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x90, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x74, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x91, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x74, 0x63, 0x70, 0x46, 0x6c,
	0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x17, 0x63, 0x6f,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xf5, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0xf6, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0xd9,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x6d, 0x65, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x6b, 0x5f,
	0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x63, 0x76, 0x5f, 0x62, 0x75, 0x66,
	0x18, 0xda, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x63, 0x76, 0x42, 0x75, 0x66, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x6b, 0x5f, 0x6d,
	0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x77, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x18, 0xdb, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x6b, 0x4d, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x57, 0x6d, 0x65, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x2d, 0x0a,
	0x13, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6e, 0x64,
	0x5f, 0x62, 0x75, 0x66, 0x18, 0xdc, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6b, 0x4d,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x12, 0x31, 0x0a, 0x15,
	0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x66, 0x77, 0x64, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0xdd, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6b,
	0x4d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x77, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12,
	0x35, 0x0a, 0x17, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x77,
	0x6d, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0xde, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x6d, 0x65, 0x6d,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x6d, 0x65, 0x6d, 0x18, 0xdf, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x70,
	0x74, 0x6d, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x18, 0xe0, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x61, 0x63,
	0x6b, 0x6c, 0x6f, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0xe1, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x72, 0x6f, 0x70, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x76, 0x65, 0x67, 0x61,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa1,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x65, 0x67, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x65, 0x67, 0x61, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x74, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0xa2, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x65, 0x67, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x74, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x67, 0x61, 0x73, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x74, 0x74, 0x18, 0xa3, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x76, 0x65, 0x67, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x74, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x76, 0x65, 0x67, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72,
	0x74, 0x74, 0x18, 0xa4, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x65, 0x67, 0x61, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x69, 0x6e, 0x52, 0x74, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x63,
	0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x85, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x63, 0x74, 0x63, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x63, 0x74,
	0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x86, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x63, 0x74, 0x63, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x63, 0x74,
	0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x87, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x63, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x63, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x61, 0x62, 0x5f, 0x65, 0x63, 0x6e, 0x18, 0x88, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x64, 0x63, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x62, 0x45, 0x63, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x64, 0x63, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61,
	0x62, 0x5f, 0x74, 0x6f, 0x74, 0x18, 0x89, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x63,
	0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x62, 0x54, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x62, 0x62, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62, 0x77, 0x5f, 0x6c, 0x6f, 0x18, 0xe9,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x62, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x77,
	0x4c, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x62, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x62,
	0x77, 0x5f, 0x68, 0x69, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x62, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x77, 0x48, 0x69, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x62, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x74, 0x74, 0x18, 0xeb, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x62, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x69, 0x6e, 0x52,
	0x74, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x62, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x62, 0x62, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x47, 0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x62, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x63, 0x77, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x62, 0x62, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x77, 0x6e, 0x64, 0x47, 0x61,
	0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0xcd,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x18, 0xce, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x99, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x24, 0x0a, 0x20,
	0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52,
	0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x43, 0x55, 0x42, 0x49, 0x43,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x44, 0x43, 0x54, 0x43, 0x50,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x56, 0x45, 0x47, 0x41, 0x53,
	0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x50, 0x52, 0x41, 0x47, 0x55,
	0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x42, 0x42, 0x52, 0x31,
	0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x42, 0x42, 0x52, 0x32, 0x10,
	0x06, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x42, 0x42, 0x52, 0x33, 0x10, 0x07,
	0x22, 0x41, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x03,
	0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x78, 0x74, 0x63, 0x70,
	0x5f, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x58, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x03,
	0x72, 0x6f, 0x77, 0x32, 0xe9, 0x01, 0x0a, 0x15, 0x58, 0x54, 0x43, 0x50, 0x46, 0x6c, 0x61, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a,
	0x0b, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x27, 0x2e, 0x78,
	0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x6c, 0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x2b, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x46,
	0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42,
	0xab, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x58, 0x74, 0x63,
	0x70, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x16, 0x2e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x66,
	0x6c, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0xa2, 0x02, 0x03, 0x58, 0x58, 0x58,
	0xaa, 0x02, 0x11, 0x58, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x11, 0x58, 0x74, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1d, 0x58, 0x74, 0x63, 0x70, 0x46,
	0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x58, 0x74, 0x63, 0x70, 0x46,
	0x6c, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDescOnce sync.Once
	file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDescData = file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDesc
)

func file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDescGZIP() []byte {
	file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDescOnce.Do(func() {
		file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDescData)
	})
	return file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDescData
}

var file_xtcp_flat_record_v1_xtcp_flat_record_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_xtcp_flat_record_v1_xtcp_flat_record_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_xtcp_flat_record_v1_xtcp_flat_record_proto_goTypes = []any{
	(XtcpFlatRecord_CongestionAlgorithm)(0), // 0: xtcp_flat_record.v1.XtcpFlatRecord.CongestionAlgorithm
	(*FlatRecordsRequest)(nil),              // 1: xtcp_flat_record.v1.FlatRecordsRequest
	(*FlatRecordsResponse)(nil),             // 2: xtcp_flat_record.v1.FlatRecordsResponse
	(*PollFlatRecordsRequest)(nil),          // 3: xtcp_flat_record.v1.PollFlatRecordsRequest
	(*XtcpFlatRecord)(nil),                  // 4: xtcp_flat_record.v1.XtcpFlatRecord
	(*Envelope)(nil),                        // 5: xtcp_flat_record.v1.Envelope
}
var file_xtcp_flat_record_v1_xtcp_flat_record_proto_depIdxs = []int32{
	4, // 0: xtcp_flat_record.v1.FlatRecordsResponse.xtcp_flat_record:type_name -> xtcp_flat_record.v1.XtcpFlatRecord
	0, // 1: xtcp_flat_record.v1.XtcpFlatRecord.congestion_algorithm_enum:type_name -> xtcp_flat_record.v1.XtcpFlatRecord.CongestionAlgorithm
	4, // 2: xtcp_flat_record.v1.Envelope.row:type_name -> xtcp_flat_record.v1.XtcpFlatRecord
	1, // 3: xtcp_flat_record.v1.XTCPFlatRecordService.FlatRecords:input_type -> xtcp_flat_record.v1.FlatRecordsRequest
	3, // 4: xtcp_flat_record.v1.XTCPFlatRecordService.PollFlatRecords:input_type -> xtcp_flat_record.v1.PollFlatRecordsRequest
	2, // 5: xtcp_flat_record.v1.XTCPFlatRecordService.FlatRecords:output_type -> xtcp_flat_record.v1.FlatRecordsResponse
	2, // 6: xtcp_flat_record.v1.XTCPFlatRecordService.PollFlatRecords:output_type -> xtcp_flat_record.v1.FlatRecordsResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_xtcp_flat_record_v1_xtcp_flat_record_proto_init() }
func file_xtcp_flat_record_v1_xtcp_flat_record_proto_init() {
	if File_xtcp_flat_record_v1_xtcp_flat_record_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xtcp_flat_record_v1_xtcp_flat_record_proto_goTypes,
		DependencyIndexes: file_xtcp_flat_record_v1_xtcp_flat_record_proto_depIdxs,
		EnumInfos:         file_xtcp_flat_record_v1_xtcp_flat_record_proto_enumTypes,
		MessageInfos:      file_xtcp_flat_record_v1_xtcp_flat_record_proto_msgTypes,
	}.Build()
	File_xtcp_flat_record_v1_xtcp_flat_record_proto = out.File
	file_xtcp_flat_record_v1_xtcp_flat_record_proto_rawDesc = nil
	file_xtcp_flat_record_v1_xtcp_flat_record_proto_goTypes = nil
	file_xtcp_flat_record_v1_xtcp_flat_record_proto_depIdxs = nil
}
