//
// xTCP - eXport TCP Inet Diagnostic messages
//
// These are all the structs relating to the TCP diagnotic module in the kernel
//
// Please note that protobufs smallest size is 32 bits, so we actually expand uint8/16 to uint32s.
// In the protos below, I've commented which ones are uint8/16
//
// There are links to the kernel source showing where the struct came from.
//

// Little reminder on compiling
// https://developers.google.com/protocol-buffers/docs/gotutorial
// go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
// protoc --go_out=paths=source_relative:. xtcppb.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: pkg/xtcppb/xtcppb.proto

// sadly the travis server hasn't been upgrade yet, so we can't do proto3

package xtcppb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type XtcpRecordCongestionAlgorithm int32

const (
	XtcpRecord_CONGESTION_ALGORITHM_UNSPECIFIED XtcpRecordCongestionAlgorithm = 0
	XtcpRecord_CONGESTION_ALGORITHM_CUBIC       XtcpRecordCongestionAlgorithm = 1
	XtcpRecord_CONGESTION_ALGORITHM_BBR1        XtcpRecordCongestionAlgorithm = 2
	XtcpRecord_CONGESTION_ALGORITHM_BBR2        XtcpRecordCongestionAlgorithm = 3
	XtcpRecord_CONGESTION_ALGORITHM_DCTCP       XtcpRecordCongestionAlgorithm = 4
)

// Enum value maps for XtcpRecordCongestionAlgorithm.
var (
	XtcpRecordCongestionAlgorithm_name = map[int32]string{
		0: "CONGESTION_ALGORITHM_UNSPECIFIED",
		1: "CONGESTION_ALGORITHM_CUBIC",
		2: "CONGESTION_ALGORITHM_BBR1",
		3: "CONGESTION_ALGORITHM_BBR2",
		4: "CONGESTION_ALGORITHM_DCTCP",
	}
	XtcpRecordCongestionAlgorithm_value = map[string]int32{
		"CONGESTION_ALGORITHM_UNSPECIFIED": 0,
		"CONGESTION_ALGORITHM_CUBIC":       1,
		"CONGESTION_ALGORITHM_BBR1":        2,
		"CONGESTION_ALGORITHM_BBR2":        3,
		"CONGESTION_ALGORITHM_DCTCP":       4,
	}
)

func (x XtcpRecordCongestionAlgorithm) Enum() *XtcpRecordCongestionAlgorithm {
	p := new(XtcpRecordCongestionAlgorithm)
	*p = x
	return p
}

func (x XtcpRecordCongestionAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XtcpRecordCongestionAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_xtcppb_xtcppb_proto_enumTypes[0].Descriptor()
}

func (XtcpRecordCongestionAlgorithm) Type() protoreflect.EnumType {
	return &file_pkg_xtcppb_xtcppb_proto_enumTypes[0]
}

func (x XtcpRecordCongestionAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XtcpRecordCongestionAlgorithm.Descriptor instead.
func (XtcpRecordCongestionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_pkg_xtcppb_xtcppb_proto_rawDescGZIP(), []int{0, 0}
}

// xtcp_record is the record type exported by xtcp with ALL the inet_diag information
type XtcpRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochTime   *Timespec64T `protobuf:"bytes,1,opt,name=epoch_time,json=epochTime,proto3" json:"epoch_time,omitempty"`
	Hostname    string       `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Tag         string       `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	InetDiagMsg *InetDiagMsg `protobuf:"bytes,100,opt,name=inet_diag_msg,json=inetDiagMsg,proto3" json:"inet_diag_msg,omitempty"`
	// might want to put more here
	// https://github.com/torvalds/linux/blob/29d9f30d4ce6c7a38745a54a8cddface10013490/include/uapi/linux/inet_diag.h#L133
	MemInfo *MemInfo `protobuf:"bytes,101,opt,name=mem_info,json=memInfo,proto3" json:"mem_info,omitempty"` // INET_DIAG_MEMINFO 1
	TcpInfo *TcpInfo `protobuf:"bytes,102,opt,name=tcp_info,json=tcpInfo,proto3" json:"tcp_info,omitempty"` // INET_DIAG_INFO 2
	// INET_DIAG_VEGASINFO 3
	// Please note it's recommended to use the enum for efficency, but keeping the string
	// just in case we need to quickly put a different algorithm in without updating the enum.
	// Obviously it's optional, so it low cost.
	CongestionAlgorithmString string                        `protobuf:"bytes,103,opt,name=congestion_algorithm_string,json=congestionAlgorithmString,proto3" json:"congestion_algorithm_string,omitempty"`                                      //INET_DIAG_CONG 4
	CongestionAlgorithmEnum   XtcpRecordCongestionAlgorithm `protobuf:"varint,104,opt,name=congestion_algorithm_enum,json=congestionAlgorithmEnum,proto3,enum=xtcppb.XtcpRecordCongestionAlgorithm" json:"congestion_algorithm_enum,omitempty"` // INET_DIAG_CONG 4
	TypeOfService             uint32                        `protobuf:"varint,105,opt,name=type_of_service,json=typeOfService,proto3" json:"type_of_service,omitempty"`                                                                         // INET_DIAG_TOS 5 uint8
	TrafficClass              uint32                        `protobuf:"varint,106,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`                                                                              // INET_DIAG_TCLASS 6 uint8
	SkMemInfo                 *SkMemInfo                    `protobuf:"bytes,107,opt,name=sk_mem_info,json=skMemInfo,proto3" json:"sk_mem_info,omitempty"`                                                                                      // INET_DIAG_SKMEMINFO 7
	ShutdownState             uint32                        `protobuf:"varint,108,opt,name=shutdown_state,json=shutdownState,proto3" json:"shutdown_state,omitempty"`                                                                           // UNIX_DIAG_SHUTDOWN 8uint8
	DctcpInfo                 *DctcpInfo                    `protobuf:"bytes,115,opt,name=dctcp_info,json=dctcpInfo,proto3" json:"dctcp_info,omitempty"`                                                                                        // INET_DIAG_DCTCPINFO
	BbrInfo                   *BbrInfo                      `protobuf:"bytes,116,opt,name=bbr_info,json=bbrInfo,proto3" json:"bbr_info,omitempty"`                                                                                              // INET_DIAG_BBRINFO 16
	ClassId                   uint32                        `protobuf:"varint,117,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`                                                                                             // INET_DIAG_CLASS_ID 17 uint32
	SockOpt                   uint32                        `protobuf:"varint,118,opt,name=sock_opt,json=sockOpt,proto3" json:"sock_opt,omitempty"`                                                                                             // INET_DIAG_SOCKOPT
	CGroup                    uint64                        `protobuf:"varint,119,opt,name=c_group,json=cGroup,proto3" json:"c_group,omitempty"`                                                                                                // INET_DIAG_BC_CGROUP_COND
}

func (x *XtcpRecord) Reset() {
	*x = XtcpRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XtcpRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XtcpRecord) ProtoMessage() {}

func (x *XtcpRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XtcpRecord.ProtoReflect.Descriptor instead.
func (*XtcpRecord) Descriptor() ([]byte, []int) {
	return file_pkg_xtcppb_xtcppb_proto_rawDescGZIP(), []int{0}
}

func (x *XtcpRecord) GetEpochTime() *Timespec64T {
	if x != nil {
		return x.EpochTime
	}
	return nil
}

func (x *XtcpRecord) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *XtcpRecord) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *XtcpRecord) GetInetDiagMsg() *InetDiagMsg {
	if x != nil {
		return x.InetDiagMsg
	}
	return nil
}

func (x *XtcpRecord) GetMemInfo() *MemInfo {
	if x != nil {
		return x.MemInfo
	}
	return nil
}

func (x *XtcpRecord) GetTcpInfo() *TcpInfo {
	if x != nil {
		return x.TcpInfo
	}
	return nil
}

func (x *XtcpRecord) GetCongestionAlgorithmString() string {
	if x != nil {
		return x.CongestionAlgorithmString
	}
	return ""
}

func (x *XtcpRecord) GetCongestionAlgorithmEnum() XtcpRecordCongestionAlgorithm {
	if x != nil {
		return x.CongestionAlgorithmEnum
	}
	return XtcpRecord_CONGESTION_ALGORITHM_UNSPECIFIED
}

func (x *XtcpRecord) GetTypeOfService() uint32 {
	if x != nil {
		return x.TypeOfService
	}
	return 0
}

func (x *XtcpRecord) GetTrafficClass() uint32 {
	if x != nil {
		return x.TrafficClass
	}
	return 0
}

func (x *XtcpRecord) GetSkMemInfo() *SkMemInfo {
	if x != nil {
		return x.SkMemInfo
	}
	return nil
}

func (x *XtcpRecord) GetShutdownState() uint32 {
	if x != nil {
		return x.ShutdownState
	}
	return 0
}

func (x *XtcpRecord) GetDctcpInfo() *DctcpInfo {
	if x != nil {
		return x.DctcpInfo
	}
	return nil
}

func (x *XtcpRecord) GetBbrInfo() *BbrInfo {
	if x != nil {
		return x.BbrInfo
	}
	return nil
}

func (x *XtcpRecord) GetClassId() uint32 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *XtcpRecord) GetSockOpt() uint32 {
	if x != nil {
		return x.SockOpt
	}
	return 0
}

func (x *XtcpRecord) GetCGroup() uint64 {
	if x != nil {
		return x.CGroup
	}
	return 0
}

// The kernel timespec64 is signed
// https://github.com/torvalds/linux/blob/458ef2a25e0cbdc216012aa2b9cf549d64133b08/include/linux/time64.h#L13
// https://github.com/torvalds/linux/blob/2ccbdf43d5e758f8493a95252073cf9078a5fea5/include/linux/time64.h#L13
// https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/include/linux/time64.h
// Originally implemented this wrongly using timeval, which is wrong.  Use timespec!!
// https://golang.org/pkg/syscall/#Timespec
// https://golang.org/pkg/syscall/#Gettimeofday  <-- Not using
// https://golang.org/pkg/syscall/#Timeval       <-- Not using
type Timespec64T struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sec  int64 `protobuf:"varint,1,opt,name=sec,proto3" json:"sec,omitempty"`
	Nsec int64 `protobuf:"varint,2,opt,name=nsec,proto3" json:"nsec,omitempty"` //nanoseconds
}

func (x *Timespec64T) Reset() {
	*x = Timespec64T{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timespec64T) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timespec64T) ProtoMessage() {}

func (x *Timespec64T) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timespec64T.ProtoReflect.Descriptor instead.
func (*Timespec64T) Descriptor() ([]byte, []int) {
	return file_pkg_xtcppb_xtcppb_proto_rawDescGZIP(), []int{1}
}

func (x *Timespec64T) GetSec() int64 {
	if x != nil {
		return x.Sec
	}
	return 0
}

func (x *Timespec64T) GetNsec() int64 {
	if x != nil {
		return x.Nsec
	}
	return 0
}

// https://github.com/torvalds/linux/blob/29d9f30d4ce6c7a38745a54a8cddface10013490/include/uapi/linux/inet_diag.h#L13
// https://github.com/torvalds/linux/blob/2ccbdf43d5e758f8493a95252073cf9078a5fea5/include/uapi/linux/inet_diag.h#L14
// https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/include/uapi/linux/inet_diag.h
type SocketID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePort      uint32 `protobuf:"varint,1,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`                //__be16
	DestinationPort uint32 `protobuf:"varint,2,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"` //__be16
	Source          []byte `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Destination     []byte `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	Interface       uint32 `protobuf:"varint,5,opt,name=interface,proto3" json:"interface,omitempty"`
	Cookie          uint64 `protobuf:"varint,6,opt,name=cookie,proto3" json:"cookie,omitempty"` //[2]uint32
	DestAsn         uint64 `protobuf:"varint,7,opt,name=dest_asn,json=destAsn,proto3" json:"dest_asn,omitempty"`
	NextHopAsn      uint64 `protobuf:"varint,8,opt,name=next_hop_asn,json=nextHopAsn,proto3" json:"next_hop_asn,omitempty"`
}

func (x *SocketID) Reset() {
	*x = SocketID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocketID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketID) ProtoMessage() {}

func (x *SocketID) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketID.ProtoReflect.Descriptor instead.
func (*SocketID) Descriptor() ([]byte, []int) {
	return file_pkg_xtcppb_xtcppb_proto_rawDescGZIP(), []int{2}
}

func (x *SocketID) GetSourcePort() uint32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *SocketID) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *SocketID) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SocketID) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *SocketID) GetInterface() uint32 {
	if x != nil {
		return x.Interface
	}
	return 0
}

func (x *SocketID) GetCookie() uint64 {
	if x != nil {
		return x.Cookie
	}
	return 0
}

func (x *SocketID) GetDestAsn() uint64 {
	if x != nil {
		return x.DestAsn
	}
	return 0
}

func (x *SocketID) GetNextHopAsn() uint64 {
	if x != nil {
		return x.NextHopAsn
	}
	return 0
}

// https://github.com/torvalds/linux/blob/29d9f30d4ce6c7a38745a54a8cddface10013490/include/uapi/linux/inet_diag.h#L174
type MemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rmem uint32 `protobuf:"varint,1,opt,name=rmem,proto3" json:"rmem,omitempty"`
	Wmem uint32 `protobuf:"varint,2,opt,name=wmem,proto3" json:"wmem,omitempty"`
	Fmem uint32 `protobuf:"varint,3,opt,name=fmem,proto3" json:"fmem,omitempty"`
	Tmem uint32 `protobuf:"varint,4,opt,name=tmem,proto3" json:"tmem,omitempty"`
}

func (x *MemInfo) Reset() {
	*x = MemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemInfo) ProtoMessage() {}

func (x *MemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemInfo.ProtoReflect.Descriptor instead.
func (*MemInfo) Descriptor() ([]byte, []int) {
	return file_pkg_xtcppb_xtcppb_proto_rawDescGZIP(), []int{3}
}

func (x *MemInfo) GetRmem() uint32 {
	if x != nil {
		return x.Rmem
	}
	return 0
}

func (x *MemInfo) GetWmem() uint32 {
	if x != nil {
		return x.Wmem
	}
	return 0
}

func (x *MemInfo) GetFmem() uint32 {
	if x != nil {
		return x.Fmem
	}
	return 0
}

func (x *MemInfo) GetTmem() uint32 {
	if x != nil {
		return x.Tmem
	}
	return 0
}

// http://man7.org/linux/man-pages/man7/sock_diag.7.html
// https://github.com/torvalds/linux/blob/a811c1fa0a02c062555b54651065899437bacdbe/net/core/sock.c#L3226
// https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/net/core/sock.c
type SkMemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RmemAlloc  uint32 `protobuf:"varint,1,opt,name=rmem_alloc,json=rmemAlloc,proto3" json:"rmem_alloc,omitempty"`
	RcvBuf     uint32 `protobuf:"varint,2,opt,name=rcv_buf,json=rcvBuf,proto3" json:"rcv_buf,omitempty"`
	WmemAlloc  uint32 `protobuf:"varint,3,opt,name=wmem_alloc,json=wmemAlloc,proto3" json:"wmem_alloc,omitempty"`
	SndBuf     uint32 `protobuf:"varint,4,opt,name=snd_buf,json=sndBuf,proto3" json:"snd_buf,omitempty"`
	FwdAlloc   uint32 `protobuf:"varint,5,opt,name=fwd_alloc,json=fwdAlloc,proto3" json:"fwd_alloc,omitempty"`
	WmemQueued uint32 `protobuf:"varint,6,opt,name=wmem_queued,json=wmemQueued,proto3" json:"wmem_queued,omitempty"`
	Optmem     uint32 `protobuf:"varint,7,opt,name=optmem,proto3" json:"optmem,omitempty"`
	Backlog    uint32 `protobuf:"varint,8,opt,name=backlog,proto3" json:"backlog,omitempty"`
	Drops      uint32 `protobuf:"varint,9,opt,name=drops,proto3" json:"drops,omitempty"`
}

func (x *SkMemInfo) Reset() {
	*x = SkMemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkMemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkMemInfo) ProtoMessage() {}

func (x *SkMemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkMemInfo.ProtoReflect.Descriptor instead.
func (*SkMemInfo) Descriptor() ([]byte, []int) {
	return file_pkg_xtcppb_xtcppb_proto_rawDescGZIP(), []int{4}
}

func (x *SkMemInfo) GetRmemAlloc() uint32 {
	if x != nil {
		return x.RmemAlloc
	}
	return 0
}

func (x *SkMemInfo) GetRcvBuf() uint32 {
	if x != nil {
		return x.RcvBuf
	}
	return 0
}

func (x *SkMemInfo) GetWmemAlloc() uint32 {
	if x != nil {
		return x.WmemAlloc
	}
	return 0
}

func (x *SkMemInfo) GetSndBuf() uint32 {
	if x != nil {
		return x.SndBuf
	}
	return 0
}

func (x *SkMemInfo) GetFwdAlloc() uint32 {
	if x != nil {
		return x.FwdAlloc
	}
	return 0
}

func (x *SkMemInfo) GetWmemQueued() uint32 {
	if x != nil {
		return x.WmemQueued
	}
	return 0
}

func (x *SkMemInfo) GetOptmem() uint32 {
	if x != nil {
		return x.Optmem
	}
	return 0
}

func (x *SkMemInfo) GetBacklog() uint32 {
	if x != nil {
		return x.Backlog
	}
	return 0
}

func (x *SkMemInfo) GetDrops() uint32 {
	if x != nil {
		return x.Drops
	}
	return 0
}

// https://github.com/torvalds/linux/blob/5f583a3162ffd9f7999af76b8ab634ce2dac9f90/include/uapi/linux/inet_diag.h#L215
type DctcpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled uint32 `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CeState uint32 `protobuf:"varint,2,opt,name=ce_state,json=ceState,proto3" json:"ce_state,omitempty"`
	Alpha   uint32 `protobuf:"varint,3,opt,name=alpha,proto3" json:"alpha,omitempty"`
	AbEcn   uint32 `protobuf:"varint,4,opt,name=ab_ecn,json=abEcn,proto3" json:"ab_ecn,omitempty"`
	AbTot   uint32 `protobuf:"varint,5,opt,name=ab_tot,json=abTot,proto3" json:"ab_tot,omitempty"`
}

func (x *DctcpInfo) Reset() {
	*x = DctcpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DctcpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DctcpInfo) ProtoMessage() {}

func (x *DctcpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DctcpInfo.ProtoReflect.Descriptor instead.
func (*DctcpInfo) Descriptor() ([]byte, []int) {
	return file_pkg_xtcppb_xtcppb_proto_rawDescGZIP(), []int{5}
}

func (x *DctcpInfo) GetEnabled() uint32 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *DctcpInfo) GetCeState() uint32 {
	if x != nil {
		return x.CeState
	}
	return 0
}

func (x *DctcpInfo) GetAlpha() uint32 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *DctcpInfo) GetAbEcn() uint32 {
	if x != nil {
		return x.AbEcn
	}
	return 0
}

func (x *DctcpInfo) GetAbTot() uint32 {
	if x != nil {
		return x.AbTot
	}
	return 0
}

// https://github.com/torvalds/linux/blob/29d9f30d4ce6c7a38745a54a8cddface10013490/include/uapi/linux/inet_diag.h#L204
type BbrInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BwLo       uint32 `protobuf:"varint,1,opt,name=bw_lo,json=bwLo,proto3" json:"bw_lo,omitempty"`
	BwHi       uint32 `protobuf:"varint,2,opt,name=bw_hi,json=bwHi,proto3" json:"bw_hi,omitempty"`
	MinRtt     uint32 `protobuf:"varint,3,opt,name=min_rtt,json=minRtt,proto3" json:"min_rtt,omitempty"`
	PacingGain uint32 `protobuf:"varint,4,opt,name=pacing_gain,json=pacingGain,proto3" json:"pacing_gain,omitempty"`
	CwndGain   uint32 `protobuf:"varint,5,opt,name=cwnd_gain,json=cwndGain,proto3" json:"cwnd_gain,omitempty"`
}

func (x *BbrInfo) Reset() {
	*x = BbrInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BbrInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BbrInfo) ProtoMessage() {}

func (x *BbrInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BbrInfo.ProtoReflect.Descriptor instead.
func (*BbrInfo) Descriptor() ([]byte, []int) {
	return file_pkg_xtcppb_xtcppb_proto_rawDescGZIP(), []int{6}
}

func (x *BbrInfo) GetBwLo() uint32 {
	if x != nil {
		return x.BwLo
	}
	return 0
}

func (x *BbrInfo) GetBwHi() uint32 {
	if x != nil {
		return x.BwHi
	}
	return 0
}

func (x *BbrInfo) GetMinRtt() uint32 {
	if x != nil {
		return x.MinRtt
	}
	return 0
}

func (x *BbrInfo) GetPacingGain() uint32 {
	if x != nil {
		return x.PacingGain
	}
	return 0
}

func (x *BbrInfo) GetCwndGain() uint32 {
	if x != nil {
		return x.CwndGain
	}
	return 0
}

// https://github.com/torvalds/linux/blob/29d9f30d4ce6c7a38745a54a8cddface10013490/include/uapi/linux/tcp.h#L214
// https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/include/uapi/linux/tcp.h
type TcpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State       uint32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`                    //uint8
	CaState     uint32 `protobuf:"varint,2,opt,name=ca_state,json=caState,proto3" json:"ca_state,omitempty"` //uint8
	Retransmits uint32 `protobuf:"varint,3,opt,name=retransmits,proto3" json:"retransmits,omitempty"`        //uint8
	Probes      uint32 `protobuf:"varint,4,opt,name=probes,proto3" json:"probes,omitempty"`                  //uint8
	Backoff     uint32 `protobuf:"varint,5,opt,name=backoff,proto3" json:"backoff,omitempty"`                //uint8
	Options     uint32 `protobuf:"varint,6,opt,name=options,proto3" json:"options,omitempty"`                //uint8
	// __u8	_snd_wscale : 4, _rcv_wscale : 4;
	// __u8	_delivery_rate_app_limited:1, _fastopen_client_fail:2;
	SendScale              uint32 `protobuf:"varint,7,opt,name=send_scale,json=sendScale,proto3" json:"send_scale,omitempty"`                                            //uint4
	RcvScale               uint32 `protobuf:"varint,8,opt,name=rcv_scale,json=rcvScale,proto3" json:"rcv_scale,omitempty"`                                               //uint4
	DeliveryRateAppLimited uint32 `protobuf:"varint,9,opt,name=delivery_rate_app_limited,json=deliveryRateAppLimited,proto3" json:"delivery_rate_app_limited,omitempty"` //uint8
	FastOpenClientFailed   uint32 `protobuf:"varint,10,opt,name=fast_open_client_failed,json=fastOpenClientFailed,proto3" json:"fast_open_client_failed,omitempty"`      //uint8
	Rto                    uint32 `protobuf:"varint,15,opt,name=rto,proto3" json:"rto,omitempty"`
	Ato                    uint32 `protobuf:"varint,16,opt,name=ato,proto3" json:"ato,omitempty"`
	SndMss                 uint32 `protobuf:"varint,17,opt,name=snd_mss,json=sndMss,proto3" json:"snd_mss,omitempty"`
	RcvMss                 uint32 `protobuf:"varint,18,opt,name=rcv_mss,json=rcvMss,proto3" json:"rcv_mss,omitempty"`
	Unacked                uint32 `protobuf:"varint,19,opt,name=unacked,proto3" json:"unacked,omitempty"`
	Sacked                 uint32 `protobuf:"varint,20,opt,name=sacked,proto3" json:"sacked,omitempty"`
	Lost                   uint32 `protobuf:"varint,21,opt,name=lost,proto3" json:"lost,omitempty"`
	Retrans                uint32 `protobuf:"varint,22,opt,name=retrans,proto3" json:"retrans,omitempty"`
	Fackets                uint32 `protobuf:"varint,23,opt,name=fackets,proto3" json:"fackets,omitempty"`
	// Times
	LastDataSent uint32 `protobuf:"varint,24,opt,name=last_data_sent,json=lastDataSent,proto3" json:"last_data_sent,omitempty"`
	LastAckSent  uint32 `protobuf:"varint,25,opt,name=last_ack_sent,json=lastAckSent,proto3" json:"last_ack_sent,omitempty"`
	LastDataRecv uint32 `protobuf:"varint,26,opt,name=last_data_recv,json=lastDataRecv,proto3" json:"last_data_recv,omitempty"`
	LastAckRecv  uint32 `protobuf:"varint,27,opt,name=last_ack_recv,json=lastAckRecv,proto3" json:"last_ack_recv,omitempty"`
	// Metrics
	Pmtu          uint32 `protobuf:"varint,28,opt,name=pmtu,proto3" json:"pmtu,omitempty"`
	RcvSsthresh   uint32 `protobuf:"varint,29,opt,name=rcv_ssthresh,json=rcvSsthresh,proto3" json:"rcv_ssthresh,omitempty"`
	Rtt           uint32 `protobuf:"varint,30,opt,name=rtt,proto3" json:"rtt,omitempty"`
	RttVar        uint32 `protobuf:"varint,31,opt,name=rtt_var,json=rttVar,proto3" json:"rtt_var,omitempty"`
	SndSsthresh   uint32 `protobuf:"varint,32,opt,name=snd_ssthresh,json=sndSsthresh,proto3" json:"snd_ssthresh,omitempty"`
	SndCwnd       uint32 `protobuf:"varint,33,opt,name=snd_cwnd,json=sndCwnd,proto3" json:"snd_cwnd,omitempty"`
	AdvMss        uint32 `protobuf:"varint,34,opt,name=adv_mss,json=advMss,proto3" json:"adv_mss,omitempty"`
	Reordering    uint32 `protobuf:"varint,35,opt,name=reordering,proto3" json:"reordering,omitempty"`
	RcvRtt        uint32 `protobuf:"varint,36,opt,name=rcv_rtt,json=rcvRtt,proto3" json:"rcv_rtt,omitempty"`
	RcvSpace      uint32 `protobuf:"varint,37,opt,name=rcv_space,json=rcvSpace,proto3" json:"rcv_space,omitempty"`
	TotalRetrans  uint32 `protobuf:"varint,38,opt,name=total_retrans,json=totalRetrans,proto3" json:"total_retrans,omitempty"`
	PacingRate    uint64 `protobuf:"varint,39,opt,name=pacing_rate,json=pacingRate,proto3" json:"pacing_rate,omitempty"`
	MaxPacingRate uint64 `protobuf:"varint,40,opt,name=max_pacing_rate,json=maxPacingRate,proto3" json:"max_pacing_rate,omitempty"`
	BytesAcked    uint64 `protobuf:"varint,41,opt,name=bytes_acked,json=bytesAcked,proto3" json:"bytes_acked,omitempty"`          // RFC4898 tcpEStatsAppHCThruOctetsAcked
	BytesReceived uint64 `protobuf:"varint,42,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"` // RFC4898 tcpEStatsAppHCThruOctetsReceived
	SegsOut       uint32 `protobuf:"varint,43,opt,name=segs_out,json=segsOut,proto3" json:"segs_out,omitempty"`                   // RFC4898 tcpEStatsPerfSegsOut
	SegsIn        uint32 `protobuf:"varint,44,opt,name=segs_in,json=segsIn,proto3" json:"segs_in,omitempty"`                      // RFC4898 tcpEStatsPerfSegsIn
	NotSentBytes  uint32 `protobuf:"varint,45,opt,name=not_sent_bytes,json=notSentBytes,proto3" json:"not_sent_bytes,omitempty"`
	MinRtt        uint32 `protobuf:"varint,46,opt,name=min_rtt,json=minRtt,proto3" json:"min_rtt,omitempty"`
	DataSegsIn    uint32 `protobuf:"varint,47,opt,name=data_segs_in,json=dataSegsIn,proto3" json:"data_segs_in,omitempty"`    // RFC4898 tcpEStatsDataSegsIn
	DataSegsOut   uint32 `protobuf:"varint,48,opt,name=data_segs_out,json=dataSegsOut,proto3" json:"data_segs_out,omitempty"` // RFC4898 tcpEStatsDataSegsOut
	DeliveryRate  uint64 `protobuf:"varint,49,opt,name=delivery_rate,json=deliveryRate,proto3" json:"delivery_rate,omitempty"`
	BusyTime      uint64 `protobuf:"varint,50,opt,name=busy_time,json=busyTime,proto3" json:"busy_time,omitempty"`                // Time (usec) busy sending data
	RwndLimited   uint64 `protobuf:"varint,51,opt,name=rwnd_limited,json=rwndLimited,proto3" json:"rwnd_limited,omitempty"`       // Time (usec) limited by receive window
	SndbufLimited uint64 `protobuf:"varint,52,opt,name=sndbuf_limited,json=sndbufLimited,proto3" json:"sndbuf_limited,omitempty"` // Time (usec) limited by send buffer
	Delivered     uint32 `protobuf:"varint,53,opt,name=delivered,proto3" json:"delivered,omitempty"`
	DeliveredCe   uint32 `protobuf:"varint,54,opt,name=delivered_ce,json=deliveredCe,proto3" json:"delivered_ce,omitempty"`
	// https://tools.ietf.org/html/rfc4898 TCP Extended Statistics MIB
	BytesSent          uint64 `protobuf:"varint,55,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`                              // RFC4898 tcpEStatsPerfHCDataOctetsOut
	BytesRetrans       uint64 `protobuf:"varint,56,opt,name=bytes_retrans,json=bytesRetrans,proto3" json:"bytes_retrans,omitempty"`                     // RFC4898 tcpEStatsPerfOctetsRetrans
	DsackDups          uint32 `protobuf:"varint,57,opt,name=dsack_dups,json=dsackDups,proto3" json:"dsack_dups,omitempty"`                              // RFC4898 tcpEStatsStackDSACKDups
	ReordSeen          uint32 `protobuf:"varint,58,opt,name=reord_seen,json=reordSeen,proto3" json:"reord_seen,omitempty"`                              // reordering events seen
	RcvOoopack         uint32 `protobuf:"varint,59,opt,name=rcv_ooopack,json=rcvOoopack,proto3" json:"rcv_ooopack,omitempty"`                           // Out-of-order packets received
	SndWnd             uint32 `protobuf:"varint,60,opt,name=snd_wnd,json=sndWnd,proto3" json:"snd_wnd,omitempty"`                                       // peer's advertised receive window after scaling (bytes)
	RcvWnd             uint32 `protobuf:"varint,61,opt,name=rcv_wnd,json=rcvWnd,proto3" json:"rcv_wnd,omitempty"`                                       // local advertised receive window after scaling (bytes)
	Rehash             uint32 `protobuf:"varint,62,opt,name=rehash,proto3" json:"rehash,omitempty"`                                                     // PLB or timeout triggered rehash attempts
	TotalRto           uint32 `protobuf:"varint,63,opt,name=total_rto,json=totalRto,proto3" json:"total_rto,omitempty"`                                 // Total number of RTO timeouts, including SYN/SYN-ACK and recurring timeouts
	TotalRtoRecoveries uint32 `protobuf:"varint,64,opt,name=total_rto_recoveries,json=totalRtoRecoveries,proto3" json:"total_rto_recoveries,omitempty"` // Total number of RTO recoveries, including any unfinished recovery
	TotalRtoTime       uint32 `protobuf:"varint,65,opt,name=total_rto_time,json=totalRtoTime,proto3" json:"total_rto_time,omitempty"`                   // Total time spent in RTO recoveries in milliseconds, including any unfinished recovery
}

func (x *TcpInfo) Reset() {
	*x = TcpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpInfo) ProtoMessage() {}

func (x *TcpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpInfo.ProtoReflect.Descriptor instead.
func (*TcpInfo) Descriptor() ([]byte, []int) {
	return file_pkg_xtcppb_xtcppb_proto_rawDescGZIP(), []int{7}
}

func (x *TcpInfo) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *TcpInfo) GetCaState() uint32 {
	if x != nil {
		return x.CaState
	}
	return 0
}

func (x *TcpInfo) GetRetransmits() uint32 {
	if x != nil {
		return x.Retransmits
	}
	return 0
}

func (x *TcpInfo) GetProbes() uint32 {
	if x != nil {
		return x.Probes
	}
	return 0
}

func (x *TcpInfo) GetBackoff() uint32 {
	if x != nil {
		return x.Backoff
	}
	return 0
}

func (x *TcpInfo) GetOptions() uint32 {
	if x != nil {
		return x.Options
	}
	return 0
}

func (x *TcpInfo) GetSendScale() uint32 {
	if x != nil {
		return x.SendScale
	}
	return 0
}

func (x *TcpInfo) GetRcvScale() uint32 {
	if x != nil {
		return x.RcvScale
	}
	return 0
}

func (x *TcpInfo) GetDeliveryRateAppLimited() uint32 {
	if x != nil {
		return x.DeliveryRateAppLimited
	}
	return 0
}

func (x *TcpInfo) GetFastOpenClientFailed() uint32 {
	if x != nil {
		return x.FastOpenClientFailed
	}
	return 0
}

func (x *TcpInfo) GetRto() uint32 {
	if x != nil {
		return x.Rto
	}
	return 0
}

func (x *TcpInfo) GetAto() uint32 {
	if x != nil {
		return x.Ato
	}
	return 0
}

func (x *TcpInfo) GetSndMss() uint32 {
	if x != nil {
		return x.SndMss
	}
	return 0
}

func (x *TcpInfo) GetRcvMss() uint32 {
	if x != nil {
		return x.RcvMss
	}
	return 0
}

func (x *TcpInfo) GetUnacked() uint32 {
	if x != nil {
		return x.Unacked
	}
	return 0
}

func (x *TcpInfo) GetSacked() uint32 {
	if x != nil {
		return x.Sacked
	}
	return 0
}

func (x *TcpInfo) GetLost() uint32 {
	if x != nil {
		return x.Lost
	}
	return 0
}

func (x *TcpInfo) GetRetrans() uint32 {
	if x != nil {
		return x.Retrans
	}
	return 0
}

func (x *TcpInfo) GetFackets() uint32 {
	if x != nil {
		return x.Fackets
	}
	return 0
}

func (x *TcpInfo) GetLastDataSent() uint32 {
	if x != nil {
		return x.LastDataSent
	}
	return 0
}

func (x *TcpInfo) GetLastAckSent() uint32 {
	if x != nil {
		return x.LastAckSent
	}
	return 0
}

func (x *TcpInfo) GetLastDataRecv() uint32 {
	if x != nil {
		return x.LastDataRecv
	}
	return 0
}

func (x *TcpInfo) GetLastAckRecv() uint32 {
	if x != nil {
		return x.LastAckRecv
	}
	return 0
}

func (x *TcpInfo) GetPmtu() uint32 {
	if x != nil {
		return x.Pmtu
	}
	return 0
}

func (x *TcpInfo) GetRcvSsthresh() uint32 {
	if x != nil {
		return x.RcvSsthresh
	}
	return 0
}

func (x *TcpInfo) GetRtt() uint32 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

func (x *TcpInfo) GetRttVar() uint32 {
	if x != nil {
		return x.RttVar
	}
	return 0
}

func (x *TcpInfo) GetSndSsthresh() uint32 {
	if x != nil {
		return x.SndSsthresh
	}
	return 0
}

func (x *TcpInfo) GetSndCwnd() uint32 {
	if x != nil {
		return x.SndCwnd
	}
	return 0
}

func (x *TcpInfo) GetAdvMss() uint32 {
	if x != nil {
		return x.AdvMss
	}
	return 0
}

func (x *TcpInfo) GetReordering() uint32 {
	if x != nil {
		return x.Reordering
	}
	return 0
}

func (x *TcpInfo) GetRcvRtt() uint32 {
	if x != nil {
		return x.RcvRtt
	}
	return 0
}

func (x *TcpInfo) GetRcvSpace() uint32 {
	if x != nil {
		return x.RcvSpace
	}
	return 0
}

func (x *TcpInfo) GetTotalRetrans() uint32 {
	if x != nil {
		return x.TotalRetrans
	}
	return 0
}

func (x *TcpInfo) GetPacingRate() uint64 {
	if x != nil {
		return x.PacingRate
	}
	return 0
}

func (x *TcpInfo) GetMaxPacingRate() uint64 {
	if x != nil {
		return x.MaxPacingRate
	}
	return 0
}

func (x *TcpInfo) GetBytesAcked() uint64 {
	if x != nil {
		return x.BytesAcked
	}
	return 0
}

func (x *TcpInfo) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *TcpInfo) GetSegsOut() uint32 {
	if x != nil {
		return x.SegsOut
	}
	return 0
}

func (x *TcpInfo) GetSegsIn() uint32 {
	if x != nil {
		return x.SegsIn
	}
	return 0
}

func (x *TcpInfo) GetNotSentBytes() uint32 {
	if x != nil {
		return x.NotSentBytes
	}
	return 0
}

func (x *TcpInfo) GetMinRtt() uint32 {
	if x != nil {
		return x.MinRtt
	}
	return 0
}

func (x *TcpInfo) GetDataSegsIn() uint32 {
	if x != nil {
		return x.DataSegsIn
	}
	return 0
}

func (x *TcpInfo) GetDataSegsOut() uint32 {
	if x != nil {
		return x.DataSegsOut
	}
	return 0
}

func (x *TcpInfo) GetDeliveryRate() uint64 {
	if x != nil {
		return x.DeliveryRate
	}
	return 0
}

func (x *TcpInfo) GetBusyTime() uint64 {
	if x != nil {
		return x.BusyTime
	}
	return 0
}

func (x *TcpInfo) GetRwndLimited() uint64 {
	if x != nil {
		return x.RwndLimited
	}
	return 0
}

func (x *TcpInfo) GetSndbufLimited() uint64 {
	if x != nil {
		return x.SndbufLimited
	}
	return 0
}

func (x *TcpInfo) GetDelivered() uint32 {
	if x != nil {
		return x.Delivered
	}
	return 0
}

func (x *TcpInfo) GetDeliveredCe() uint32 {
	if x != nil {
		return x.DeliveredCe
	}
	return 0
}

func (x *TcpInfo) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *TcpInfo) GetBytesRetrans() uint64 {
	if x != nil {
		return x.BytesRetrans
	}
	return 0
}

func (x *TcpInfo) GetDsackDups() uint32 {
	if x != nil {
		return x.DsackDups
	}
	return 0
}

func (x *TcpInfo) GetReordSeen() uint32 {
	if x != nil {
		return x.ReordSeen
	}
	return 0
}

func (x *TcpInfo) GetRcvOoopack() uint32 {
	if x != nil {
		return x.RcvOoopack
	}
	return 0
}

func (x *TcpInfo) GetSndWnd() uint32 {
	if x != nil {
		return x.SndWnd
	}
	return 0
}

func (x *TcpInfo) GetRcvWnd() uint32 {
	if x != nil {
		return x.RcvWnd
	}
	return 0
}

func (x *TcpInfo) GetRehash() uint32 {
	if x != nil {
		return x.Rehash
	}
	return 0
}

func (x *TcpInfo) GetTotalRto() uint32 {
	if x != nil {
		return x.TotalRto
	}
	return 0
}

func (x *TcpInfo) GetTotalRtoRecoveries() uint32 {
	if x != nil {
		return x.TotalRtoRecoveries
	}
	return 0
}

func (x *TcpInfo) GetTotalRtoTime() uint32 {
	if x != nil {
		return x.TotalRtoTime
	}
	return 0
}

// https://github.com/torvalds/linux/blob/29d9f30d4ce6c7a38745a54a8cddface10013490/include/uapi/linux/inet_diag.h#L115
type InetDiagMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family   uint32    `protobuf:"varint,1,opt,name=family,proto3" json:"family,omitempty"`   //uint8
	State    uint32    `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`     //uint8
	Timer    uint32    `protobuf:"varint,3,opt,name=timer,proto3" json:"timer,omitempty"`     //uint8
	Retrans  uint32    `protobuf:"varint,4,opt,name=retrans,proto3" json:"retrans,omitempty"` //uint8
	SocketID *SocketID `protobuf:"bytes,5,opt,name=socket_i_d,json=socketID,proto3" json:"socket_i_d,omitempty"`
	Expires  uint32    `protobuf:"varint,6,opt,name=expires,proto3" json:"expires,omitempty"`
	Rqueue   uint32    `protobuf:"varint,7,opt,name=rqueue,proto3" json:"rqueue,omitempty"`
	Wqueue   uint32    `protobuf:"varint,8,opt,name=wqueue,proto3" json:"wqueue,omitempty"`
	UID      uint32    `protobuf:"varint,9,opt,name=u_i_d,json=uID,proto3" json:"u_i_d,omitempty"`
	Inode    uint32    `protobuf:"varint,10,opt,name=inode,proto3" json:"inode,omitempty"`
}

func (x *InetDiagMsg) Reset() {
	*x = InetDiagMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InetDiagMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InetDiagMsg) ProtoMessage() {}

func (x *InetDiagMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_xtcppb_xtcppb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InetDiagMsg.ProtoReflect.Descriptor instead.
func (*InetDiagMsg) Descriptor() ([]byte, []int) {
	return file_pkg_xtcppb_xtcppb_proto_rawDescGZIP(), []int{8}
}

func (x *InetDiagMsg) GetFamily() uint32 {
	if x != nil {
		return x.Family
	}
	return 0
}

func (x *InetDiagMsg) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *InetDiagMsg) GetTimer() uint32 {
	if x != nil {
		return x.Timer
	}
	return 0
}

func (x *InetDiagMsg) GetRetrans() uint32 {
	if x != nil {
		return x.Retrans
	}
	return 0
}

func (x *InetDiagMsg) GetSocketID() *SocketID {
	if x != nil {
		return x.SocketID
	}
	return nil
}

func (x *InetDiagMsg) GetExpires() uint32 {
	if x != nil {
		return x.Expires
	}
	return 0
}

func (x *InetDiagMsg) GetRqueue() uint32 {
	if x != nil {
		return x.Rqueue
	}
	return 0
}

func (x *InetDiagMsg) GetWqueue() uint32 {
	if x != nil {
		return x.Wqueue
	}
	return 0
}

func (x *InetDiagMsg) GetUID() uint32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *InetDiagMsg) GetInode() uint32 {
	if x != nil {
		return x.Inode
	}
	return 0
}

var File_pkg_xtcppb_xtcppb_proto protoreflect.FileDescriptor

var file_pkg_xtcppb_xtcppb_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x78, 0x74, 0x63, 0x70, 0x70, 0x62, 0x2f, 0x78, 0x74, 0x63,
	0x70, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x78, 0x74, 0x63, 0x70, 0x70,
	0x62, 0x22, 0xc0, 0x07, 0x0a, 0x0b, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x70, 0x62, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x70, 0x65, 0x63, 0x36, 0x34, 0x5f, 0x74, 0x52, 0x09, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x0d, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x61,
	0x67, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x74,
	0x63, 0x70, 0x70, 0x62, 0x2e, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x5f, 0x6d,
	0x73, 0x67, 0x52, 0x0b, 0x69, 0x6e, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x4d, 0x73, 0x67, 0x12,
	0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x70, 0x62, 0x2e, 0x6d, 0x65, 0x6d, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08,
	0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x78, 0x74, 0x63, 0x70, 0x70, 0x62, 0x2e, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x64, 0x0a, 0x19, 0x63, 0x6f, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x78,
	0x74, 0x63, 0x70, 0x70, 0x62, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x0b,
	0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x78, 0x74, 0x63, 0x70, 0x70, 0x62, 0x2e, 0x73, 0x6b, 0x5f, 0x6d, 0x65,
	0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x6b, 0x4d, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x63, 0x74, 0x63,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78,
	0x74, 0x63, 0x70, 0x70, 0x62, 0x2e, 0x64, 0x63, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x64, 0x63, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x62,
	0x62, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x78, 0x74, 0x63, 0x70, 0x70, 0x62, 0x2e, 0x62, 0x62, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x62, 0x62, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x77, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x43,
	0x55, 0x42, 0x49, 0x43, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x42,
	0x42, 0x52, 0x31, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x42, 0x42,
	0x52, 0x32, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x44, 0x43, 0x54,
	0x43, 0x50, 0x10, 0x04, 0x22, 0x34, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x65, 0x63,
	0x36, 0x34, 0x5f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x73, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x73, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6e, 0x73, 0x65, 0x63, 0x22, 0x85, 0x02, 0x0a, 0x0a, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x5f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x41, 0x73, 0x6e,
	0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x73, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41,
	0x73, 0x6e, 0x22, 0x5a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6d, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6d,
	0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6d, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x77, 0x6d, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6d, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6d, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6d,
	0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x6d, 0x65, 0x6d, 0x22, 0x83,
	0x02, 0x0a, 0x0b, 0x73, 0x6b, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x6d, 0x65, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x63, 0x76, 0x5f, 0x62, 0x75, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x63, 0x76, 0x42, 0x75, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6d, 0x65, 0x6d, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x6d, 0x65, 0x6d,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6e, 0x64, 0x5f, 0x62, 0x75, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x77, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x66, 0x77, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6d, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x77, 0x6d, 0x65, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x70, 0x74, 0x6d, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70,
	0x74, 0x6d, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64,
	0x72, 0x6f, 0x70, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0a, 0x64, 0x63, 0x74, 0x63, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x62, 0x5f, 0x65, 0x63, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x62, 0x45, 0x63, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x62, 0x5f, 0x74, 0x6f, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x62, 0x54, 0x6f, 0x74, 0x22, 0x8b, 0x01, 0x0a,
	0x08, 0x62, 0x62, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x77, 0x5f,
	0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x77, 0x4c, 0x6f, 0x12, 0x13,
	0x0a, 0x05, 0x62, 0x77, 0x5f, 0x68, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62,
	0x77, 0x48, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x74, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x52, 0x74, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x77, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x77, 0x6e, 0x64, 0x47, 0x61, 0x69, 0x6e, 0x22, 0xe8, 0x0e, 0x0a, 0x08, 0x74,
	0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x63, 0x76, 0x5f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x63, 0x76, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x66, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x72, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x74, 0x6f, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x74, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6e, 0x64, 0x5f,
	0x6d, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6e, 0x64, 0x4d, 0x73,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x63, 0x76, 0x5f, 0x6d, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x63, 0x76, 0x4d, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x6e, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x6f, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x76,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x63, 0x76, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6d, 0x74, 0x75,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6d, 0x74, 0x75, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x63, 0x76, 0x5f, 0x73, 0x73, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x72, 0x63, 0x76, 0x53, 0x73, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x74, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x74,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x74, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x74, 0x74, 0x56, 0x61, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6e,
	0x64, 0x5f, 0x73, 0x73, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x6e, 0x64, 0x53, 0x73, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x6e, 0x64, 0x5f, 0x63, 0x77, 0x6e, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x6e, 0x64, 0x43, 0x77, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x64, 0x76, 0x5f,
	0x6d, 0x73, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x64, 0x76, 0x4d, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x63, 0x76, 0x5f, 0x72, 0x74, 0x74, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x63, 0x76, 0x52, 0x74, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x63,
	0x76, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x63, 0x76, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x41, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x65, 0x67, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x65, 0x67, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x73,
	0x5f, 0x69, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x67, 0x73, 0x49,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x72,
	0x74, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x52, 0x74, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x5f, 0x69, 0x6e,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x67, 0x73,
	0x49, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x67, 0x73, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x67, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x75, 0x73, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x62, 0x75, 0x73, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x77, 0x6e, 0x64,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x72, 0x77, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x6e, 0x64, 0x62, 0x75, 0x66, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x6e, 0x64, 0x62, 0x75, 0x66, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x65,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x43, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x61, 0x63, 0x6b,
	0x5f, 0x64, 0x75, 0x70, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x73, 0x61,
	0x63, 0x6b, 0x44, 0x75, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x65, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x63, 0x76, 0x5f, 0x6f, 0x6f, 0x6f,
	0x70, 0x61, 0x63, 0x6b, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x63, 0x76, 0x4f,
	0x6f, 0x6f, 0x70, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6e, 0x64, 0x5f, 0x77, 0x6e,
	0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6e, 0x64, 0x57, 0x6e, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x63, 0x76, 0x5f, 0x77, 0x6e, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x63, 0x76, 0x57, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x74, 0x6f, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x74, 0x6f, 0x12, 0x30, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x74,
	0x6f, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x0d, 0x69, 0x6e, 0x65, 0x74, 0x5f, 0x64,
	0x69, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x5f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x74, 0x63, 0x70,
	0x70, 0x62, 0x2e, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x5f, 0x64, 0x52, 0x08, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x05, 0x75, 0x5f, 0x69, 0x5f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x75, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x5a, 0x0c, 0x2e,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x78, 0x74, 0x63, 0x70, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pkg_xtcppb_xtcppb_proto_rawDescOnce sync.Once
	file_pkg_xtcppb_xtcppb_proto_rawDescData = file_pkg_xtcppb_xtcppb_proto_rawDesc
)

func file_pkg_xtcppb_xtcppb_proto_rawDescGZIP() []byte {
	file_pkg_xtcppb_xtcppb_proto_rawDescOnce.Do(func() {
		file_pkg_xtcppb_xtcppb_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_xtcppb_xtcppb_proto_rawDescData)
	})
	return file_pkg_xtcppb_xtcppb_proto_rawDescData
}

var file_pkg_xtcppb_xtcppb_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_xtcppb_xtcppb_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pkg_xtcppb_xtcppb_proto_goTypes = []any{
	(XtcpRecordCongestionAlgorithm)(0), // 0: xtcppb.xtcp_record.congestion_algorithm
	(*XtcpRecord)(nil),                 // 1: xtcppb.xtcp_record
	(*Timespec64T)(nil),                // 2: xtcppb.timespec64_t
	(*SocketID)(nil),                   // 3: xtcppb.socket_i_d
	(*MemInfo)(nil),                    // 4: xtcppb.mem_info
	(*SkMemInfo)(nil),                  // 5: xtcppb.sk_mem_info
	(*DctcpInfo)(nil),                  // 6: xtcppb.dctcp_info
	(*BbrInfo)(nil),                    // 7: xtcppb.bbr_info
	(*TcpInfo)(nil),                    // 8: xtcppb.tcp_info
	(*InetDiagMsg)(nil),                // 9: xtcppb.inet_diag_msg
}
var file_pkg_xtcppb_xtcppb_proto_depIdxs = []int32{
	2, // 0: xtcppb.xtcp_record.epoch_time:type_name -> xtcppb.timespec64_t
	9, // 1: xtcppb.xtcp_record.inet_diag_msg:type_name -> xtcppb.inet_diag_msg
	4, // 2: xtcppb.xtcp_record.mem_info:type_name -> xtcppb.mem_info
	8, // 3: xtcppb.xtcp_record.tcp_info:type_name -> xtcppb.tcp_info
	0, // 4: xtcppb.xtcp_record.congestion_algorithm_enum:type_name -> xtcppb.xtcp_record.congestion_algorithm
	5, // 5: xtcppb.xtcp_record.sk_mem_info:type_name -> xtcppb.sk_mem_info
	6, // 6: xtcppb.xtcp_record.dctcp_info:type_name -> xtcppb.dctcp_info
	7, // 7: xtcppb.xtcp_record.bbr_info:type_name -> xtcppb.bbr_info
	3, // 8: xtcppb.inet_diag_msg.socket_i_d:type_name -> xtcppb.socket_i_d
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_pkg_xtcppb_xtcppb_proto_init() }
func file_pkg_xtcppb_xtcppb_proto_init() {
	if File_pkg_xtcppb_xtcppb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_xtcppb_xtcppb_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*XtcpRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_xtcppb_xtcppb_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Timespec64T); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_xtcppb_xtcppb_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SocketID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_xtcppb_xtcppb_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_xtcppb_xtcppb_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SkMemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_xtcppb_xtcppb_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DctcpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_xtcppb_xtcppb_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BbrInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_xtcppb_xtcppb_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TcpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_xtcppb_xtcppb_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*InetDiagMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_xtcppb_xtcppb_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_xtcppb_xtcppb_proto_goTypes,
		DependencyIndexes: file_pkg_xtcppb_xtcppb_proto_depIdxs,
		EnumInfos:         file_pkg_xtcppb_xtcppb_proto_enumTypes,
		MessageInfos:      file_pkg_xtcppb_xtcppb_proto_msgTypes,
	}.Build()
	File_pkg_xtcppb_xtcppb_proto = out.File
	file_pkg_xtcppb_xtcppb_proto_rawDesc = nil
	file_pkg_xtcppb_xtcppb_proto_goTypes = nil
	file_pkg_xtcppb_xtcppb_proto_depIdxs = nil
}
