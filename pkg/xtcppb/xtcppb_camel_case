//
// xTCP - eXport TCP Inet Diagnostic messages
//
// These are all the structs relating to the TCP diagnotic module in the kernel
//
// Please note that protobufs smallest size is 32 bits, so we actually expand uint8/16 to uint32s.
// In the protos below, I've commented which ones are uint8/16
//
// There are links to the kernel source showing where the struct came from.
//

// Little reminder on compiling
// https://developers.google.com/protocol-buffers/docs/gotutorial
// go install google.golang.org/protobuf/cmd/protoc-gen-go
// protoc *.proto --go_out=./

syntax = "proto2";  // the only thing below that is not proto3 is "optional". e.g. to convert to proto3 delete the word optional
// sadly the travis server hasn't been upgrade yet, so we can't do proto3

package xtcppb;

// https://developers.google.com/protocol-buffers/docs/reference/go-generated
//--go_opt=paths=source_relative
//option go_package = "./;_";
option go_package = "github.com/randomizedcoder/xtcp2/xtcppb";

// The kernel timespec64 is signed
// https://github.com/torvalds/linux/blob/458ef2a25e0cbdc216012aa2b9cf549d64133b08/include/linux/time64.h#L13
// Originally implemented this wrongly using timeval, which is wrong.  Use timespec!!
// https://golang.org/pkg/syscall/#Timespec
// https://golang.org/pkg/syscall/#Gettimeofday  <-- Not using
// https://golang.org/pkg/syscall/#Timeval       <-- Not using
message timespec64_t {
        optional int64 sec  = 1;
        optional int64 nsec = 2;//nanoseconds
}

// https://github.com/torvalds/linux/blob/29d9f30d4ce6c7a38745a54a8cddface10013490/include/uapi/linux/inet_diag.h#L13
message SocketID {
    optional uint32 SourcePort              = 1; //__be16
    optional uint32 DestinationPort         = 2; //__be16
    optional bytes Source                   = 3;
    optional bytes Destination              = 4;
    optional uint32 Interface               = 5;
    optional uint64 Cookie                  = 6; //[2]uint32
    optional uint64 DestASN                 = 7;
    optional uint64 NextHopASN              = 8;
}

// https://github.com/torvalds/linux/blob/29d9f30d4ce6c7a38745a54a8cddface10013490/include/uapi/linux/inet_diag.h#L174
message MemInfo {
    optional uint32 Rmem                     = 1;
    optional uint32 Wmem                     = 2;
    optional uint32 Fmem                     = 3;
    optional uint32 Tmem                     = 4;
}

// http://man7.org/linux/man-pages/man7/sock_diag.7.html
// https://github.com/torvalds/linux/blob/a811c1fa0a02c062555b54651065899437bacdbe/net/core/sock.c#L3226
message SkMemInfo {
    optional uint32 RmemAlloc                 = 1;
    optional uint32 RcvBuf                    = 2;
    optional uint32 WmemAlloc                 = 3;
    optional uint32 SndBuf                    = 4;
    optional uint32 FwdAlloc                  = 5;
    optional uint32 WmemQueued                = 6;
    optional uint32 Optmem                    = 7;
    optional uint32 Backlog                   = 8;
    optional uint32 Drops                     = 9;
}

// https://github.com/torvalds/linux/blob/29d9f30d4ce6c7a38745a54a8cddface10013490/include/uapi/linux/inet_diag.h#L204
message BBRInfo {
    optional uint32 BwLo                      = 1;
    optional uint32 BwHi                      = 2;
    optional uint32 MinRtt                    = 3;
    optional uint32 PacingGain                = 4;
    optional uint32 CwndGain                  = 5;
}

// https://github.com/torvalds/linux/blob/29d9f30d4ce6c7a38745a54a8cddface10013490/include/uapi/linux/tcp.h#L214
message TCPInfo {
    optional uint32 State                     = 1; //uint8
    optional uint32 CaState                   = 2; //uint8
    optional uint32 Retransmits               = 3; //uint8
    optional uint32 Probes                    = 4; //uint8
    optional uint32 Backoff                   = 5; //uint8
    optional uint32 Options                   = 6; //uint8
// 	__u8	_snd_wscale : 4, _rcv_wscale : 4;
// 	__u8	_delivery_rate_app_limited:1, _fastopen_client_fail:2;
    optional uint32 SendScale                 = 7; //uint4
    optional uint32 RcvScale                  = 8; //uint4
    optional uint32 DeliveryRateAppLimited    = 9; //uint8
    optional uint32 FastOpenClientFailed      = 10; //uint8

    optional uint32 Rto                       = 15;
    optional uint32 Ato                       = 16;
    optional uint32 SndMss                    = 17;
    optional uint32 RcvMss                    = 18;

    optional uint32 Unacked                   = 19;
    optional uint32 Sacked                    = 20;
    optional uint32 Lost                      = 21;
    optional uint32 Retrans                   = 22;
    optional uint32 Fackets                   = 23;

    // 	Times
    optional uint32 LastDataSent              = 24;
    optional uint32 LastAckSent               = 25;
    optional uint32 LastDataRecv              = 26;
    optional uint32 LastAckRecv               = 27;

    // 	Metrics
    optional uint32 Pmtu                      = 28;
    optional uint32 RcvSsthresh               = 29;
    optional uint32 Rtt                       = 30;
    optional uint32 RttVar                    = 31;
    optional uint32 SndSsthresh               = 32;
    optional uint32 SndCwnd                   = 33;
    optional uint32 Advmss                    = 34;
    optional uint32 Reordering                = 35;

    optional uint32 RcvRtt                    = 36;
    optional uint32 RcvSpace                  = 37;

    optional uint32 TotalRetrans              = 38;

    optional uint64 PacingRate                = 39;
    optional uint64 MaxPacingRate             = 40;
    optional uint64 BytesAcked                = 41; // RFC4898 tcpEStatsAppHCThruOctetsAcked
    optional uint64 BytesReceived             = 42; // RFC4898 tcpEStatsAppHCThruOctetsReceived
    optional uint32 SegsOut                   = 43; // RFC4898 tcpEStatsPerfSegsOut
    optional uint32 SegsIn                    = 44; // RFC4898 tcpEStatsPerfSegsIn

    optional uint32 NotSentBytes              = 45;
    optional uint32 MinRtt                    = 46;
    optional uint32 DataSegsIn                = 47; // RFC4898 tcpEStatsDataSegsIn
    optional uint32 DataSegsOut               = 48; // RFC4898 tcpEStatsDataSegsOut

    optional uint64 DeliveryRate              = 49;

    optional uint64 BusyTime                  = 50; // Time (usec) busy sending data
    optional uint64 RwndLimited               = 51; // Time (usec) limited by receive window
    optional uint64 SndbufLimited             = 52; // Time (usec) limited by send buffer

    //4.15 kernel tcp_info ends here, 5+ below

    optional uint32 Delivered                 = 53;
    optional uint32 DeliveredCe               = 54;

    // https://tools.ietf.org/html/rfc4898 TCP Extended Statistics MIB
    optional uint64 BytesSent                 = 55; // RFC4898 tcpEStatsPerfHCDataOctetsOut
    optional uint64 BytesRetrans              = 56; // RFC4898 tcpEStatsPerfOctetsRetrans
    optional uint32 DsackDups                 = 57; // RFC4898 tcpEStatsStackDSACKDups
    optional uint32 ReordSeen                 = 58; // reordering events seen

    optional uint32 RcvOoopack                = 59; // Out-of-order packets received

    optional uint32 SndWnd                    = 60; // peer's advertised receive window after scaling (bytes)
}

// https://github.com/torvalds/linux/blob/29d9f30d4ce6c7a38745a54a8cddface10013490/include/uapi/linux/inet_diag.h#L115
message InetDiagMsg {
        optional uint32 Family                = 1; //uint8
        optional uint32 State                 = 2; //uint8
        optional uint32 Timer                 = 3; //uint8
        optional uint32 Retrans               = 4; //uint8
        optional SocketID SocketID            = 5;
        optional uint32 Expires               = 6;
        optional uint32 Rqueue                = 7;
        optional uint32 Wqueue                = 8;
        optional uint32 UID                   = 9;
        optional uint32 Inode                 = 10;
}

message xTCPRecord {
    optional timespec64_t epoch_time         = 1;
    optional string hostname                 = 2;
    optional string tag                      = 3;
    optional InetDiagMsg InetDiagMsg         = 100;
    // might want to put more here
    // https://github.com/torvalds/linux/blob/29d9f30d4ce6c7a38745a54a8cddface10013490/include/uapi/linux/inet_diag.h#L133
    optional MemInfo MemInfo                 = 101; //INET_DIAG_MEMINFO 1
    optional TCPInfo TCPInfo                 = 102; //INET_DIAG_INFO 2
                                                    //INET_DIAG_VEGASINFO 3
    // Please note it's recommended to use the enum for efficency, but keeping the string
    // just in case we need to quickly put a different algorithm in without updating the enum.
    // Obviously it's optional, so it low cost.
    optional string CongestionAlgorithmString  = 103; //INET_DIAG_CONG 4
    enum CongestionAlgorithm {
        UNKNOWN = 0;
        CUBIC = 1;
        BBR1 = 2;
        BBR2 = 3;
    }
    optional CongestionAlgorithm CongestionAlgorithmEnum  = 104; //INET_DIAG_CONG 4
    optional uint32 TypeOfService            = 105; //INET_DIAG_TOS 5 uint8
    optional uint32 TrafficClass             = 106; //INET_DIAG_TCLASS 6 uint8
    optional SkMemInfo SkMemInfo             = 107; //INET_DIAG_SKMEMINFO 7
    optional uint32 ShutdownState            = 108; //UNIX_DIAG_SHUTDOWN 8uint8
    optional BBRInfo BBRInfo                 = 116; //INET_DIAG_BBRINFO 16
    optional uint32 ClassId                  = 117; // INET_DIAG_CLASS_ID 17 uint32
}
