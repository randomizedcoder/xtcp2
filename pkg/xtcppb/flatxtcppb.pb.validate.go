// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flatxtcppb.proto

package xtcppb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FlatXtcpRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FlatXtcpRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlatXtcpRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FlatXtcpRecordMultiError,
// or nil if none found.
func (m *FlatXtcpRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *FlatXtcpRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sec

	// no validation rules for Nsec

	// no validation rules for Hostname

	// no validation rules for Tag

	// no validation rules for RecordCounter

	// no validation rules for NetlinkerId

	// no validation rules for InetDiagMsgFamily

	// no validation rules for InetDiagMsgState

	// no validation rules for InetDiagMsgTimer

	// no validation rules for InetDiagMsgRetrans

	// no validation rules for InetDiagMsgSocketSourcePort

	// no validation rules for InetDiagMsgSocketDestinationPort

	// no validation rules for InetDiagMsgSocketSource

	// no validation rules for InetDiagMsgSocketDestination

	// no validation rules for InetDiagMsgSocketInterface

	// no validation rules for InetDiagMsgSocketCookie

	// no validation rules for InetDiagMsgSocketDestAsn

	// no validation rules for InetDiagMsgSocketNextHopAsn

	// no validation rules for InetDiagMsgExpires

	// no validation rules for InetDiagMsgRqueue

	// no validation rules for InetDiagMsgWqueue

	// no validation rules for InetDiagMsgUid

	// no validation rules for InetDiagMsgInode

	// no validation rules for MemInfoRmem

	// no validation rules for MemInfoWmem

	// no validation rules for MemInfoFmem

	// no validation rules for MemInfoTmem

	// no validation rules for TcpInfoState

	// no validation rules for TcpInfoCaState

	// no validation rules for TcpInfoRetransmits

	// no validation rules for TcpInfoProbes

	// no validation rules for TcpInfoBackoff

	// no validation rules for TcpInfoOptions

	// no validation rules for TcpInfoSendScale

	// no validation rules for TcpInfoRcvScale

	// no validation rules for TcpInfoDeliveryRateAppLimited

	// no validation rules for TcpInfoFastOpenClientFailed

	// no validation rules for TcpInfoRto

	// no validation rules for TcpInfoAto

	// no validation rules for TcpInfoSndMss

	// no validation rules for TcpInfoRcvMss

	// no validation rules for TcpInfoUnacked

	// no validation rules for TcpInfoSacked

	// no validation rules for TcpInfoLost

	// no validation rules for TcpInfoRetrans

	// no validation rules for TcpInfoFackets

	// no validation rules for TcpInfoLastDataSent

	// no validation rules for TcpInfoLastAckSent

	// no validation rules for TcpInfoLastDataRecv

	// no validation rules for TcpInfoLastAckRecv

	// no validation rules for TcpInfoPmtu

	// no validation rules for TcpInfoRcvSsthresh

	// no validation rules for TcpInfoRtt

	// no validation rules for TcpInfoRttVar

	// no validation rules for TcpInfoSndSsthresh

	// no validation rules for TcpInfoSndCwnd

	// no validation rules for TcpInfoAdvMss

	// no validation rules for TcpInfoReordering

	// no validation rules for TcpInfoRcvRtt

	// no validation rules for TcpInfoRcvSpace

	// no validation rules for TcpInfoTotalRetrans

	// no validation rules for TcpInfoPacingRate

	// no validation rules for TcpInfoMaxPacingRate

	// no validation rules for TcpInfoBytesAcked

	// no validation rules for TcpInfoBytesReceived

	// no validation rules for TcpInfoSegsOut

	// no validation rules for TcpInfoSegsIn

	// no validation rules for TcpInfoNotSentBytes

	// no validation rules for TcpInfoMinRtt

	// no validation rules for TcpInfoDataSegsIn

	// no validation rules for TcpInfoDataSegsOut

	// no validation rules for TcpInfoDeliveryRate

	// no validation rules for TcpInfoBusyTime

	// no validation rules for TcpInfoRwndLimited

	// no validation rules for TcpInfoSndbufLimited

	// no validation rules for TcpInfoDelivered

	// no validation rules for TcpInfoDeliveredCe

	// no validation rules for TcpInfoBytesSent

	// no validation rules for TcpInfoBytesRetrans

	// no validation rules for TcpInfoDsackDups

	// no validation rules for TcpInfoReordSeen

	// no validation rules for TcpInfoRcvOoopack

	// no validation rules for TcpInfoSndWnd

	// no validation rules for TcpInfoRcvWnd

	// no validation rules for TcpInfoRehash

	// no validation rules for TcpInfoTotalRto

	// no validation rules for TcpInfoTotalRtoRecoveries

	// no validation rules for TcpInfoTotalRtoTime

	// no validation rules for CongestionAlgorithmString

	// no validation rules for CongestionAlgorithmEnum

	// no validation rules for TypeOfService

	// no validation rules for TrafficClass

	// no validation rules for SkMemInfoRmemAlloc

	// no validation rules for SkMemInfoRcvBuf

	// no validation rules for SkMemInfoWmemAlloc

	// no validation rules for SkMemInfoSndBuf

	// no validation rules for SkMemInfoFwdAlloc

	// no validation rules for SkMemInfoWmemQueued

	// no validation rules for SkMemInfoOptmem

	// no validation rules for SkMemInfoBacklog

	// no validation rules for SkMemInfoDrops

	// no validation rules for ShutdownState

	// no validation rules for VegasInfoEnabled

	// no validation rules for VegasInfoRttCnt

	// no validation rules for VegasInfoRtt

	// no validation rules for VegasInfoMinRtt

	// no validation rules for DctcpInfoEnabled

	// no validation rules for DctcpInfoCeState

	// no validation rules for DctcpInfoAlpha

	// no validation rules for DctcpInfoAbEcn

	// no validation rules for DctcpInfoAbTot

	// no validation rules for BbrInfoBwLo

	// no validation rules for BbrInfoBwHi

	// no validation rules for BbrInfoMinRtt

	// no validation rules for BbrInfoPacingGain

	// no validation rules for BbrInfoCwndGain

	// no validation rules for ClassId

	// no validation rules for SockOpt

	// no validation rules for CGroup

	if len(errors) > 0 {
		return FlatXtcpRecordMultiError(errors)
	}

	return nil
}

// FlatXtcpRecordMultiError is an error wrapping multiple validation errors
// returned by FlatXtcpRecord.ValidateAll() if the designated constraints
// aren't met.
type FlatXtcpRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlatXtcpRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlatXtcpRecordMultiError) AllErrors() []error { return m }

// FlatXtcpRecordValidationError is the validation error returned by
// FlatXtcpRecord.Validate if the designated constraints aren't met.
type FlatXtcpRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlatXtcpRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlatXtcpRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlatXtcpRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlatXtcpRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlatXtcpRecordValidationError) ErrorName() string { return "FlatXtcpRecordValidationError" }

// Error satisfies the builtin error interface
func (e FlatXtcpRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlatXtcpRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlatXtcpRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlatXtcpRecordValidationError{}
