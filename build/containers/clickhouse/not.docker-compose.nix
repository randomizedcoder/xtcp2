# Auto-generated using compose2nix v0.2.0-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."clickhouse-ch_server" = {
    image = "clickhouse/clickhouse-server:24.3.5.46-alpine";
    volumes = [
      "/home/das/Downloads/xtcp2/build/containers/clickhouse/db/:/var/lib/clickhouse/:rw"
      "/home/das/Downloads/xtcp2/build/containers/clickhouse/initdb.d/:/docker-entrypoint-initdb.d:ro"
      "/home/das/Downloads/xtcp2/build/containers/clickhouse/xtcppb.proto:/var/lib/clickhouse/format_schemas/xtcppb.proto:ro"
    ];
    ports = [
      "8123:8123/tcp"
      "9001:9000/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=IPC_LOCK"
      "--cap-add=NET_ADMIN"
      "--cap-add=SYS_NICE"
      "--network-alias=ch_server"
      "--network=clickhouse_default"
    ];
  };
  systemd.services."podman-clickhouse-ch_server" = {
    # serviceConfig = {
    #   Restart = lib.mkOverride 500 "\"no\"";
    # };
    after = [
      "podman-network-clickhouse_default.service"
    ];
    requires = [
      "podman-network-clickhouse_default.service"
    ];
    partOf = [
      "podman-compose-clickhouse-root.target"
    ];
    wantedBy = [
      "podman-compose-clickhouse-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-clickhouse_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.podman}/bin/podman network rm -f clickhouse_default";
    };
    script = ''
      podman network inspect clickhouse_default || podman network create clickhouse_default
    '';
    partOf = [ "podman-compose-clickhouse-root.target" ];
    wantedBy = [ "podman-compose-clickhouse-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-clickhouse-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
