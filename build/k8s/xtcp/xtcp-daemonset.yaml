apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: xtcp
  namespace: kube-system
  labels:
    k8s-app: xtcp
spec:
  selector:
    matchLabels:
      name: xtcp
  template:
    metadata:
      labels:
        name: xtcp
    spec:
      # https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
      tolerations:
      # these tolerations are to have the daemonset runnable on control plane nodes
      # remove them if your control plane nodes should not run pods
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      containers:
      - name: xtcp
        # https://hub.docker.com/r/randomizedcoder/xtcp2
        image: randomizedcoder/xtcp2:2.0.1
        # TODO Remove this!
        imagePullPolicy: Always
        #command: ["/xtcp2"]
        #args: ["--dest", "kafka:redpanda-0.redpanda.redpanda.svc.cluster.local:9093" ]
        env:
        - name: GOMEMLIMIT
          value: "148MiB"
        - name: GOGC
          value: "50"
        # https://pkg.go.dev/runtime
        - name: DEST
          value: "kafka:redpanda-0.redpanda.redpanda.svc.cluster.local:9093"
          #value: kafka:redpanda-0:9092
        resources:
          limits:
            memory: 150Mi
            cpu: 1000m
          requests:
            cpu: 200m
            memory: 64Mi
        securityContext:
          capabilities:
            # https://www.man7.org/linux/man-pages/man7/capabilities.7.html
            add: ["CAP_NET_ADMIN", "CAP_SYS_ADMIN", "CAP_SYS_CHROOT" ]
        hostNetwork: true
        # volumeMounts:
        # - name: varlog
        #   mountPath: /var/log
      # it may be desirable to set a high priority class to ensure that a DaemonSet Pod
      # preempts running Pods
      # priorityClassName: important
      terminationGracePeriodSeconds: 30
      # volumes:
      # - name: varlog
      #   hostPath:
      #     path: /var/log
