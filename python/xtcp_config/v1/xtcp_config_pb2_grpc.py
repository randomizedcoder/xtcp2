# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from xtcp_config.v1 import xtcp_config_pb2 as xtcp__config_dot_v1_dot_xtcp__config__pb2


class ConfigServiceStub(object):
    """https://protobuf.dev/programming-guides/proto3/#scalar

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/xtcp_config.v1.ConfigService/Get',
                request_serializer=xtcp__config_dot_v1_dot_xtcp__config__pb2.GetRequest.SerializeToString,
                response_deserializer=xtcp__config_dot_v1_dot_xtcp__config__pb2.GetResponse.FromString,
                _registered_method=True)
        self.Set = channel.unary_unary(
                '/xtcp_config.v1.ConfigService/Set',
                request_serializer=xtcp__config_dot_v1_dot_xtcp__config__pb2.SetRequest.SerializeToString,
                response_deserializer=xtcp__config_dot_v1_dot_xtcp__config__pb2.SetResponse.FromString,
                _registered_method=True)
        self.SetPollFrequency = channel.unary_unary(
                '/xtcp_config.v1.ConfigService/SetPollFrequency',
                request_serializer=xtcp__config_dot_v1_dot_xtcp__config__pb2.SetPollFrequencyRequest.SerializeToString,
                response_deserializer=xtcp__config_dot_v1_dot_xtcp__config__pb2.SetPollFrequencyResponse.FromString,
                _registered_method=True)


class ConfigServiceServicer(object):
    """https://protobuf.dev/programming-guides/proto3/#scalar

    """

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Set(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPollFrequency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConfigServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=xtcp__config_dot_v1_dot_xtcp__config__pb2.GetRequest.FromString,
                    response_serializer=xtcp__config_dot_v1_dot_xtcp__config__pb2.GetResponse.SerializeToString,
            ),
            'Set': grpc.unary_unary_rpc_method_handler(
                    servicer.Set,
                    request_deserializer=xtcp__config_dot_v1_dot_xtcp__config__pb2.SetRequest.FromString,
                    response_serializer=xtcp__config_dot_v1_dot_xtcp__config__pb2.SetResponse.SerializeToString,
            ),
            'SetPollFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPollFrequency,
                    request_deserializer=xtcp__config_dot_v1_dot_xtcp__config__pb2.SetPollFrequencyRequest.FromString,
                    response_serializer=xtcp__config_dot_v1_dot_xtcp__config__pb2.SetPollFrequencyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xtcp_config.v1.ConfigService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('xtcp_config.v1.ConfigService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ConfigService(object):
    """https://protobuf.dev/programming-guides/proto3/#scalar

    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xtcp_config.v1.ConfigService/Get',
            xtcp__config_dot_v1_dot_xtcp__config__pb2.GetRequest.SerializeToString,
            xtcp__config_dot_v1_dot_xtcp__config__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Set(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xtcp_config.v1.ConfigService/Set',
            xtcp__config_dot_v1_dot_xtcp__config__pb2.SetRequest.SerializeToString,
            xtcp__config_dot_v1_dot_xtcp__config__pb2.SetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPollFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/xtcp_config.v1.ConfigService/SetPollFrequency',
            xtcp__config_dot_v1_dot_xtcp__config__pb2.SetPollFrequencyRequest.SerializeToString,
            xtcp__config_dot_v1_dot_xtcp__config__pb2.SetPollFrequencyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
