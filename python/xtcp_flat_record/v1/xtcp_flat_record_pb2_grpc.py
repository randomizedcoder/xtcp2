# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from xtcp_flat_record.v1 import xtcp_flat_record_pb2 as xtcp__flat__record_dot_v1_dot_xtcp__flat__record__pb2


class XTCPFlatRecordServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FlatRecords = channel.unary_stream(
                '/xtcp_flat_record.v1.XTCPFlatRecordService/FlatRecords',
                request_serializer=xtcp__flat__record_dot_v1_dot_xtcp__flat__record__pb2.FlatRecordsRequest.SerializeToString,
                response_deserializer=xtcp__flat__record_dot_v1_dot_xtcp__flat__record__pb2.FlatRecordsResponse.FromString,
                _registered_method=True)
        self.PollFlatRecords = channel.stream_stream(
                '/xtcp_flat_record.v1.XTCPFlatRecordService/PollFlatRecords',
                request_serializer=xtcp__flat__record_dot_v1_dot_xtcp__flat__record__pb2.PollFlatRecordsRequest.SerializeToString,
                response_deserializer=xtcp__flat__record_dot_v1_dot_xtcp__flat__record__pb2.PollFlatRecordsResponse.FromString,
                _registered_method=True)


class XTCPFlatRecordServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FlatRecords(self, request, context):
        """If xtcp is polling, this will return the stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PollFlatRecords(self, request_iterator, context):
        """If xtcp is not polling, this allows the client to send a poll request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_XTCPFlatRecordServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FlatRecords': grpc.unary_stream_rpc_method_handler(
                    servicer.FlatRecords,
                    request_deserializer=xtcp__flat__record_dot_v1_dot_xtcp__flat__record__pb2.FlatRecordsRequest.FromString,
                    response_serializer=xtcp__flat__record_dot_v1_dot_xtcp__flat__record__pb2.FlatRecordsResponse.SerializeToString,
            ),
            'PollFlatRecords': grpc.stream_stream_rpc_method_handler(
                    servicer.PollFlatRecords,
                    request_deserializer=xtcp__flat__record_dot_v1_dot_xtcp__flat__record__pb2.PollFlatRecordsRequest.FromString,
                    response_serializer=xtcp__flat__record_dot_v1_dot_xtcp__flat__record__pb2.PollFlatRecordsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xtcp_flat_record.v1.XTCPFlatRecordService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('xtcp_flat_record.v1.XTCPFlatRecordService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class XTCPFlatRecordService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FlatRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/xtcp_flat_record.v1.XTCPFlatRecordService/FlatRecords',
            xtcp__flat__record_dot_v1_dot_xtcp__flat__record__pb2.FlatRecordsRequest.SerializeToString,
            xtcp__flat__record_dot_v1_dot_xtcp__flat__record__pb2.FlatRecordsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PollFlatRecords(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/xtcp_flat_record.v1.XTCPFlatRecordService/PollFlatRecords',
            xtcp__flat__record_dot_v1_dot_xtcp__flat__record__pb2.PollFlatRecordsRequest.SerializeToString,
            xtcp__flat__record_dot_v1_dot_xtcp__flat__record__pb2.PollFlatRecordsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
