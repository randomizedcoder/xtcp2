// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: xtcp_config/v1/xtcp_config.proto

#include "xtcp_config/v1/xtcp_config.pb.h"
#include "xtcp_config/v1/xtcp_config.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace xtcp_config {
namespace v1 {

static const char* ConfigService_method_names[] = {
  "/xtcp_config.v1.ConfigService/Get",
  "/xtcp_config.v1.ConfigService/Set",
  "/xtcp_config.v1.ConfigService/SetPollFrequency",
};

std::unique_ptr< ConfigService::Stub> ConfigService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConfigService::Stub> stub(new ConfigService::Stub(channel, options));
  return stub;
}

ConfigService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Get_(ConfigService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Set_(ConfigService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPollFrequency_(ConfigService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConfigService::Stub::Get(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest& request, ::xtcp_config::v1::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::xtcp_config::v1::GetRequest, ::xtcp_config::v1::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void ConfigService::Stub::async::Get(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest* request, ::xtcp_config::v1::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::xtcp_config::v1::GetRequest, ::xtcp_config::v1::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::Get(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest* request, ::xtcp_config::v1::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::GetResponse>* ConfigService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::xtcp_config::v1::GetResponse, ::xtcp_config::v1::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::GetResponse>* ConfigService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigService::Stub::Set(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest& request, ::xtcp_config::v1::SetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::xtcp_config::v1::SetRequest, ::xtcp_config::v1::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Set_, context, request, response);
}

void ConfigService::Stub::async::Set(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest* request, ::xtcp_config::v1::SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::xtcp_config::v1::SetRequest, ::xtcp_config::v1::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::Set(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest* request, ::xtcp_config::v1::SetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetResponse>* ConfigService::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::xtcp_config::v1::SetResponse, ::xtcp_config::v1::SetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetResponse>* ConfigService::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConfigService::Stub::SetPollFrequency(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest& request, ::xtcp_config::v1::SetPollFrequencyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::xtcp_config::v1::SetPollFrequencyRequest, ::xtcp_config::v1::SetPollFrequencyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPollFrequency_, context, request, response);
}

void ConfigService::Stub::async::SetPollFrequency(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest* request, ::xtcp_config::v1::SetPollFrequencyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::xtcp_config::v1::SetPollFrequencyRequest, ::xtcp_config::v1::SetPollFrequencyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPollFrequency_, context, request, response, std::move(f));
}

void ConfigService::Stub::async::SetPollFrequency(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest* request, ::xtcp_config::v1::SetPollFrequencyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPollFrequency_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetPollFrequencyResponse>* ConfigService::Stub::PrepareAsyncSetPollFrequencyRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::xtcp_config::v1::SetPollFrequencyResponse, ::xtcp_config::v1::SetPollFrequencyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPollFrequency_, context, request);
}

::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetPollFrequencyResponse>* ConfigService::Stub::AsyncSetPollFrequencyRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPollFrequencyRaw(context, request, cq);
  result->StartCall();
  return result;
}

ConfigService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::xtcp_config::v1::GetRequest, ::xtcp_config::v1::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::xtcp_config::v1::GetRequest* req,
             ::xtcp_config::v1::GetResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::xtcp_config::v1::SetRequest, ::xtcp_config::v1::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::xtcp_config::v1::SetRequest* req,
             ::xtcp_config::v1::SetResponse* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigService::Service, ::xtcp_config::v1::SetPollFrequencyRequest, ::xtcp_config::v1::SetPollFrequencyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::xtcp_config::v1::SetPollFrequencyRequest* req,
             ::xtcp_config::v1::SetPollFrequencyResponse* resp) {
               return service->SetPollFrequency(ctx, req, resp);
             }, this)));
}

ConfigService::Service::~Service() {
}

::grpc::Status ConfigService::Service::Get(::grpc::ServerContext* context, const ::xtcp_config::v1::GetRequest* request, ::xtcp_config::v1::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigService::Service::Set(::grpc::ServerContext* context, const ::xtcp_config::v1::SetRequest* request, ::xtcp_config::v1::SetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigService::Service::SetPollFrequency(::grpc::ServerContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest* request, ::xtcp_config::v1::SetPollFrequencyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace xtcp_config
}  // namespace v1

