// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xtcp_config/v1/xtcp_config.proto
// Protobuf C++ Version: 5.29.3

#ifndef xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto_2epb_2eh
#define xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/duration.pb.h"
#include "google/api/annotations.pb.h"
#include "buf/validate/validate.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto;
namespace xtcp_config {
namespace v1 {
class EnabledDeserializers;
struct EnabledDeserializersDefaultTypeInternal;
extern EnabledDeserializersDefaultTypeInternal _EnabledDeserializers_default_instance_;
class EnabledDeserializers_EnabledEntry_DoNotUse;
struct EnabledDeserializers_EnabledEntry_DoNotUseDefaultTypeInternal;
extern EnabledDeserializers_EnabledEntry_DoNotUseDefaultTypeInternal _EnabledDeserializers_EnabledEntry_DoNotUse_default_instance_;
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
struct GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class SetPollFrequencyRequest;
struct SetPollFrequencyRequestDefaultTypeInternal;
extern SetPollFrequencyRequestDefaultTypeInternal _SetPollFrequencyRequest_default_instance_;
class SetPollFrequencyResponse;
struct SetPollFrequencyResponseDefaultTypeInternal;
extern SetPollFrequencyResponseDefaultTypeInternal _SetPollFrequencyResponse_default_instance_;
class SetRequest;
struct SetRequestDefaultTypeInternal;
extern SetRequestDefaultTypeInternal _SetRequest_default_instance_;
class SetResponse;
struct SetResponseDefaultTypeInternal;
extern SetResponseDefaultTypeInternal _SetResponse_default_instance_;
class XtcpConfig;
struct XtcpConfigDefaultTypeInternal;
extern XtcpConfigDefaultTypeInternal _XtcpConfig_default_instance_;
}  // namespace v1
}  // namespace xtcp_config
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace xtcp_config {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class GetRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:xtcp_config.v1.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetRequest(const GetRequest& from) : GetRequest(nullptr, from) {}
  inline GetRequest(GetRequest&& from) noexcept
      : GetRequest(nullptr, std::move(from)) {}
  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
        &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GetRequest& a, GetRequest& b) { a.Swap(&b); }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<GetRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xtcp_config.v1.GetRequest"; }

 protected:
  explicit GetRequest(::google::protobuf::Arena* arena);
  GetRequest(::google::protobuf::Arena* arena, const GetRequest& from);
  GetRequest(::google::protobuf::Arena* arena, GetRequest&& from) noexcept
      : GetRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:xtcp_config.v1.GetRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class EnabledDeserializers_EnabledEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, bool,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_BOOL> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>;
  EnabledDeserializers_EnabledEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EnabledDeserializers_EnabledEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit EnabledDeserializers_EnabledEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const EnabledDeserializers_EnabledEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const EnabledDeserializers_EnabledEntry_DoNotUse*>(
        &_EnabledDeserializers_EnabledEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class SetPollFrequencyRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xtcp_config.v1.SetPollFrequencyRequest) */ {
 public:
  inline SetPollFrequencyRequest() : SetPollFrequencyRequest(nullptr) {}
  ~SetPollFrequencyRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetPollFrequencyRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetPollFrequencyRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetPollFrequencyRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetPollFrequencyRequest(const SetPollFrequencyRequest& from) : SetPollFrequencyRequest(nullptr, from) {}
  inline SetPollFrequencyRequest(SetPollFrequencyRequest&& from) noexcept
      : SetPollFrequencyRequest(nullptr, std::move(from)) {}
  inline SetPollFrequencyRequest& operator=(const SetPollFrequencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPollFrequencyRequest& operator=(SetPollFrequencyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPollFrequencyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPollFrequencyRequest* internal_default_instance() {
    return reinterpret_cast<const SetPollFrequencyRequest*>(
        &_SetPollFrequencyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SetPollFrequencyRequest& a, SetPollFrequencyRequest& b) { a.Swap(&b); }
  inline void Swap(SetPollFrequencyRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPollFrequencyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPollFrequencyRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetPollFrequencyRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetPollFrequencyRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetPollFrequencyRequest& from) { SetPollFrequencyRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetPollFrequencyRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xtcp_config.v1.SetPollFrequencyRequest"; }

 protected:
  explicit SetPollFrequencyRequest(::google::protobuf::Arena* arena);
  SetPollFrequencyRequest(::google::protobuf::Arena* arena, const SetPollFrequencyRequest& from);
  SetPollFrequencyRequest(::google::protobuf::Arena* arena, SetPollFrequencyRequest&& from) noexcept
      : SetPollFrequencyRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPollFrequencyFieldNumber = 20,
    kPollTimeoutFieldNumber = 30,
  };
  // .google.protobuf.Duration poll_frequency = 20 [json_name = "pollFrequency", (.buf.validate.field) = {
  bool has_poll_frequency() const;
  void clear_poll_frequency() ;
  const ::google::protobuf::Duration& poll_frequency() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_poll_frequency();
  ::google::protobuf::Duration* mutable_poll_frequency();
  void set_allocated_poll_frequency(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_poll_frequency(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_poll_frequency();

  private:
  const ::google::protobuf::Duration& _internal_poll_frequency() const;
  ::google::protobuf::Duration* _internal_mutable_poll_frequency();

  public:
  // .google.protobuf.Duration poll_timeout = 30 [json_name = "pollTimeout", (.buf.validate.field) = {
  bool has_poll_timeout() const;
  void clear_poll_timeout() ;
  const ::google::protobuf::Duration& poll_timeout() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_poll_timeout();
  ::google::protobuf::Duration* mutable_poll_timeout();
  void set_allocated_poll_timeout(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_poll_timeout(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_poll_timeout();

  private:
  const ::google::protobuf::Duration& _internal_poll_timeout() const;
  ::google::protobuf::Duration* _internal_mutable_poll_timeout();

  public:
  // @@protoc_insertion_point(class_scope:xtcp_config.v1.SetPollFrequencyRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetPollFrequencyRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Duration* poll_frequency_;
    ::google::protobuf::Duration* poll_timeout_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class EnabledDeserializers final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xtcp_config.v1.EnabledDeserializers) */ {
 public:
  inline EnabledDeserializers() : EnabledDeserializers(nullptr) {}
  ~EnabledDeserializers() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EnabledDeserializers* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EnabledDeserializers));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EnabledDeserializers(
      ::google::protobuf::internal::ConstantInitialized);

  inline EnabledDeserializers(const EnabledDeserializers& from) : EnabledDeserializers(nullptr, from) {}
  inline EnabledDeserializers(EnabledDeserializers&& from) noexcept
      : EnabledDeserializers(nullptr, std::move(from)) {}
  inline EnabledDeserializers& operator=(const EnabledDeserializers& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnabledDeserializers& operator=(EnabledDeserializers&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnabledDeserializers& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnabledDeserializers* internal_default_instance() {
    return reinterpret_cast<const EnabledDeserializers*>(
        &_EnabledDeserializers_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(EnabledDeserializers& a, EnabledDeserializers& b) { a.Swap(&b); }
  inline void Swap(EnabledDeserializers* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnabledDeserializers* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnabledDeserializers* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EnabledDeserializers>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EnabledDeserializers& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EnabledDeserializers& from) { EnabledDeserializers::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EnabledDeserializers* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xtcp_config.v1.EnabledDeserializers"; }

 protected:
  explicit EnabledDeserializers(::google::protobuf::Arena* arena);
  EnabledDeserializers(::google::protobuf::Arena* arena, const EnabledDeserializers& from);
  EnabledDeserializers(::google::protobuf::Arena* arena, EnabledDeserializers&& from) noexcept
      : EnabledDeserializers(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnabledFieldNumber = 1,
  };
  // map<string, bool> enabled = 1 [json_name = "enabled"];
  int enabled_size() const;
  private:
  int _internal_enabled_size() const;

  public:
  void clear_enabled() ;
  const ::google::protobuf::Map<std::string, bool>& enabled() const;
  ::google::protobuf::Map<std::string, bool>* mutable_enabled();

  private:
  const ::google::protobuf::Map<std::string, bool>& _internal_enabled() const;
  ::google::protobuf::Map<std::string, bool>* _internal_mutable_enabled();

  public:
  // @@protoc_insertion_point(class_scope:xtcp_config.v1.EnabledDeserializers)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EnabledDeserializers& from_msg);
    ::google::protobuf::internal::MapField<EnabledDeserializers_EnabledEntry_DoNotUse, std::string, bool,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>
        enabled_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class XtcpConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xtcp_config.v1.XtcpConfig) */ {
 public:
  inline XtcpConfig() : XtcpConfig(nullptr) {}
  ~XtcpConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(XtcpConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(XtcpConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR XtcpConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline XtcpConfig(const XtcpConfig& from) : XtcpConfig(nullptr, from) {}
  inline XtcpConfig(XtcpConfig&& from) noexcept
      : XtcpConfig(nullptr, std::move(from)) {}
  inline XtcpConfig& operator=(const XtcpConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline XtcpConfig& operator=(XtcpConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XtcpConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const XtcpConfig* internal_default_instance() {
    return reinterpret_cast<const XtcpConfig*>(
        &_XtcpConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(XtcpConfig& a, XtcpConfig& b) { a.Swap(&b); }
  inline void Swap(XtcpConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XtcpConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XtcpConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<XtcpConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const XtcpConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const XtcpConfig& from) { XtcpConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(XtcpConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xtcp_config.v1.XtcpConfig"; }

 protected:
  explicit XtcpConfig(::google::protobuf::Arena* arena);
  XtcpConfig(::google::protobuf::Arena* arena, const XtcpConfig& from);
  XtcpConfig(::google::protobuf::Arena* arena, XtcpConfig&& from) noexcept
      : XtcpConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCapturePathFieldNumber = 100,
    kMarshalToFieldNumber = 120,
    kDestFieldNumber = 130,
    kTopicFieldNumber = 140,
    kXtcpProtoFileFieldNumber = 143,
    kKafkaSchemaUrlFieldNumber = 145,
    kLabelFieldNumber = 170,
    kTagFieldNumber = 180,
    kPollFrequencyFieldNumber = 20,
    kPollTimeoutFieldNumber = 30,
    kKafkaProduceTimeoutFieldNumber = 150,
    kEnabledDeserializersFieldNumber = 200,
    kNlTimeoutMillisecondsFieldNumber = 10,
    kMaxLoopsFieldNumber = 40,
    kNetlinkersFieldNumber = 50,
    kNetlinkersDoneChanSizeFieldNumber = 51,
    kPacketSizeFieldNumber = 70,
    kNlmsgSeqFieldNumber = 60,
    kPacketSizeMplyFieldNumber = 80,
    kWriteFilesFieldNumber = 90,
    kProtobufListLengthDelimitFieldNumber = 121,
    kModulusFieldNumber = 110,
    kDestWriteFilesFieldNumber = 135,
    kDebugLevelFieldNumber = 160,
    kGrpcPortFieldNumber = 190,
  };
  // string capture_path = 100 [json_name = "capturePath", (.buf.validate.field) = {
  void clear_capture_path() ;
  const std::string& capture_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_capture_path(Arg_&& arg, Args_... args);
  std::string* mutable_capture_path();
  PROTOBUF_NODISCARD std::string* release_capture_path();
  void set_allocated_capture_path(std::string* value);

  private:
  const std::string& _internal_capture_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_capture_path(
      const std::string& value);
  std::string* _internal_mutable_capture_path();

  public:
  // string marshal_to = 120 [json_name = "marshalTo", (.buf.validate.field) = {
  void clear_marshal_to() ;
  const std::string& marshal_to() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_marshal_to(Arg_&& arg, Args_... args);
  std::string* mutable_marshal_to();
  PROTOBUF_NODISCARD std::string* release_marshal_to();
  void set_allocated_marshal_to(std::string* value);

  private:
  const std::string& _internal_marshal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_marshal_to(
      const std::string& value);
  std::string* _internal_mutable_marshal_to();

  public:
  // string dest = 130 [json_name = "dest", (.buf.validate.field) = {
  void clear_dest() ;
  const std::string& dest() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dest(Arg_&& arg, Args_... args);
  std::string* mutable_dest();
  PROTOBUF_NODISCARD std::string* release_dest();
  void set_allocated_dest(std::string* value);

  private:
  const std::string& _internal_dest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dest(
      const std::string& value);
  std::string* _internal_mutable_dest();

  public:
  // string topic = 140 [json_name = "topic", (.buf.validate.field) = {
  void clear_topic() ;
  const std::string& topic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic(Arg_&& arg, Args_... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* value);

  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(
      const std::string& value);
  std::string* _internal_mutable_topic();

  public:
  // string xtcp_proto_file = 143 [json_name = "xtcpProtoFile", (.buf.validate.field) = {
  void clear_xtcp_proto_file() ;
  const std::string& xtcp_proto_file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_xtcp_proto_file(Arg_&& arg, Args_... args);
  std::string* mutable_xtcp_proto_file();
  PROTOBUF_NODISCARD std::string* release_xtcp_proto_file();
  void set_allocated_xtcp_proto_file(std::string* value);

  private:
  const std::string& _internal_xtcp_proto_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xtcp_proto_file(
      const std::string& value);
  std::string* _internal_mutable_xtcp_proto_file();

  public:
  // string kafka_schema_url = 145 [json_name = "kafkaSchemaUrl", (.buf.validate.field) = {
  void clear_kafka_schema_url() ;
  const std::string& kafka_schema_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_kafka_schema_url(Arg_&& arg, Args_... args);
  std::string* mutable_kafka_schema_url();
  PROTOBUF_NODISCARD std::string* release_kafka_schema_url();
  void set_allocated_kafka_schema_url(std::string* value);

  private:
  const std::string& _internal_kafka_schema_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kafka_schema_url(
      const std::string& value);
  std::string* _internal_mutable_kafka_schema_url();

  public:
  // string label = 170 [json_name = "label", (.buf.validate.field) = {
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // string tag = 180 [json_name = "tag", (.buf.validate.field) = {
  void clear_tag() ;
  const std::string& tag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* value);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // .google.protobuf.Duration poll_frequency = 20 [json_name = "pollFrequency", (.buf.validate.field) = {
  bool has_poll_frequency() const;
  void clear_poll_frequency() ;
  const ::google::protobuf::Duration& poll_frequency() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_poll_frequency();
  ::google::protobuf::Duration* mutable_poll_frequency();
  void set_allocated_poll_frequency(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_poll_frequency(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_poll_frequency();

  private:
  const ::google::protobuf::Duration& _internal_poll_frequency() const;
  ::google::protobuf::Duration* _internal_mutable_poll_frequency();

  public:
  // .google.protobuf.Duration poll_timeout = 30 [json_name = "pollTimeout", (.buf.validate.field) = {
  bool has_poll_timeout() const;
  void clear_poll_timeout() ;
  const ::google::protobuf::Duration& poll_timeout() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_poll_timeout();
  ::google::protobuf::Duration* mutable_poll_timeout();
  void set_allocated_poll_timeout(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_poll_timeout(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_poll_timeout();

  private:
  const ::google::protobuf::Duration& _internal_poll_timeout() const;
  ::google::protobuf::Duration* _internal_mutable_poll_timeout();

  public:
  // .google.protobuf.Duration kafka_produce_timeout = 150 [json_name = "kafkaProduceTimeout", (.buf.validate.field) = {
  bool has_kafka_produce_timeout() const;
  void clear_kafka_produce_timeout() ;
  const ::google::protobuf::Duration& kafka_produce_timeout() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_kafka_produce_timeout();
  ::google::protobuf::Duration* mutable_kafka_produce_timeout();
  void set_allocated_kafka_produce_timeout(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_kafka_produce_timeout(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_kafka_produce_timeout();

  private:
  const ::google::protobuf::Duration& _internal_kafka_produce_timeout() const;
  ::google::protobuf::Duration* _internal_mutable_kafka_produce_timeout();

  public:
  // .xtcp_config.v1.EnabledDeserializers enabled_deserializers = 200 [json_name = "enabledDeserializers", (.buf.validate.field) = {
  bool has_enabled_deserializers() const;
  void clear_enabled_deserializers() ;
  const ::xtcp_config::v1::EnabledDeserializers& enabled_deserializers() const;
  PROTOBUF_NODISCARD ::xtcp_config::v1::EnabledDeserializers* release_enabled_deserializers();
  ::xtcp_config::v1::EnabledDeserializers* mutable_enabled_deserializers();
  void set_allocated_enabled_deserializers(::xtcp_config::v1::EnabledDeserializers* value);
  void unsafe_arena_set_allocated_enabled_deserializers(::xtcp_config::v1::EnabledDeserializers* value);
  ::xtcp_config::v1::EnabledDeserializers* unsafe_arena_release_enabled_deserializers();

  private:
  const ::xtcp_config::v1::EnabledDeserializers& _internal_enabled_deserializers() const;
  ::xtcp_config::v1::EnabledDeserializers* _internal_mutable_enabled_deserializers();

  public:
  // uint64 nl_timeout_milliseconds = 10 [json_name = "nlTimeoutMilliseconds", (.buf.validate.field) = {
  void clear_nl_timeout_milliseconds() ;
  ::uint64_t nl_timeout_milliseconds() const;
  void set_nl_timeout_milliseconds(::uint64_t value);

  private:
  ::uint64_t _internal_nl_timeout_milliseconds() const;
  void _internal_set_nl_timeout_milliseconds(::uint64_t value);

  public:
  // uint64 max_loops = 40 [json_name = "maxLoops", (.buf.validate.field) = {
  void clear_max_loops() ;
  ::uint64_t max_loops() const;
  void set_max_loops(::uint64_t value);

  private:
  ::uint64_t _internal_max_loops() const;
  void _internal_set_max_loops(::uint64_t value);

  public:
  // uint32 netlinkers = 50 [json_name = "netlinkers", (.buf.validate.field) = {
  void clear_netlinkers() ;
  ::uint32_t netlinkers() const;
  void set_netlinkers(::uint32_t value);

  private:
  ::uint32_t _internal_netlinkers() const;
  void _internal_set_netlinkers(::uint32_t value);

  public:
  // uint32 netlinkers_done_chan_size = 51 [json_name = "netlinkersDoneChanSize", (.buf.validate.field) = {
  void clear_netlinkers_done_chan_size() ;
  ::uint32_t netlinkers_done_chan_size() const;
  void set_netlinkers_done_chan_size(::uint32_t value);

  private:
  ::uint32_t _internal_netlinkers_done_chan_size() const;
  void _internal_set_netlinkers_done_chan_size(::uint32_t value);

  public:
  // uint64 packet_size = 70 [json_name = "packetSize", (.buf.validate.field) = {
  void clear_packet_size() ;
  ::uint64_t packet_size() const;
  void set_packet_size(::uint64_t value);

  private:
  ::uint64_t _internal_packet_size() const;
  void _internal_set_packet_size(::uint64_t value);

  public:
  // uint32 nlmsg_seq = 60 [json_name = "nlmsgSeq", (.buf.validate.field) = {
  void clear_nlmsg_seq() ;
  ::uint32_t nlmsg_seq() const;
  void set_nlmsg_seq(::uint32_t value);

  private:
  ::uint32_t _internal_nlmsg_seq() const;
  void _internal_set_nlmsg_seq(::uint32_t value);

  public:
  // uint32 packet_size_mply = 80 [json_name = "packetSizeMply", (.buf.validate.field) = {
  void clear_packet_size_mply() ;
  ::uint32_t packet_size_mply() const;
  void set_packet_size_mply(::uint32_t value);

  private:
  ::uint32_t _internal_packet_size_mply() const;
  void _internal_set_packet_size_mply(::uint32_t value);

  public:
  // uint32 write_files = 90 [json_name = "writeFiles", (.buf.validate.field) = {
  void clear_write_files() ;
  ::uint32_t write_files() const;
  void set_write_files(::uint32_t value);

  private:
  ::uint32_t _internal_write_files() const;
  void _internal_set_write_files(::uint32_t value);

  public:
  // bool protobuf_list_length_delimit = 121 [json_name = "protobufListLengthDelimit", (.buf.validate.field) = {
  void clear_protobuf_list_length_delimit() ;
  bool protobuf_list_length_delimit() const;
  void set_protobuf_list_length_delimit(bool value);

  private:
  bool _internal_protobuf_list_length_delimit() const;
  void _internal_set_protobuf_list_length_delimit(bool value);

  public:
  // uint64 modulus = 110 [json_name = "modulus", (.buf.validate.field) = {
  void clear_modulus() ;
  ::uint64_t modulus() const;
  void set_modulus(::uint64_t value);

  private:
  ::uint64_t _internal_modulus() const;
  void _internal_set_modulus(::uint64_t value);

  public:
  // uint32 dest_write_files = 135 [json_name = "destWriteFiles", (.buf.validate.field) = {
  void clear_dest_write_files() ;
  ::uint32_t dest_write_files() const;
  void set_dest_write_files(::uint32_t value);

  private:
  ::uint32_t _internal_dest_write_files() const;
  void _internal_set_dest_write_files(::uint32_t value);

  public:
  // uint32 debug_level = 160 [json_name = "debugLevel", (.buf.validate.field) = {
  void clear_debug_level() ;
  ::uint32_t debug_level() const;
  void set_debug_level(::uint32_t value);

  private:
  ::uint32_t _internal_debug_level() const;
  void _internal_set_debug_level(::uint32_t value);

  public:
  // uint32 grpc_port = 190 [json_name = "grpcPort", (.buf.validate.field) = {
  void clear_grpc_port() ;
  ::uint32_t grpc_port() const;
  void set_grpc_port(::uint32_t value);

  private:
  ::uint32_t _internal_grpc_port() const;
  void _internal_set_grpc_port(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:xtcp_config.v1.XtcpConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 25, 4,
      128, 27>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const XtcpConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr capture_path_;
    ::google::protobuf::internal::ArenaStringPtr marshal_to_;
    ::google::protobuf::internal::ArenaStringPtr dest_;
    ::google::protobuf::internal::ArenaStringPtr topic_;
    ::google::protobuf::internal::ArenaStringPtr xtcp_proto_file_;
    ::google::protobuf::internal::ArenaStringPtr kafka_schema_url_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    ::google::protobuf::internal::ArenaStringPtr tag_;
    ::google::protobuf::Duration* poll_frequency_;
    ::google::protobuf::Duration* poll_timeout_;
    ::google::protobuf::Duration* kafka_produce_timeout_;
    ::xtcp_config::v1::EnabledDeserializers* enabled_deserializers_;
    ::uint64_t nl_timeout_milliseconds_;
    ::uint64_t max_loops_;
    ::uint32_t netlinkers_;
    ::uint32_t netlinkers_done_chan_size_;
    ::uint64_t packet_size_;
    ::uint32_t nlmsg_seq_;
    ::uint32_t packet_size_mply_;
    ::uint32_t write_files_;
    bool protobuf_list_length_delimit_;
    ::uint64_t modulus_;
    ::uint32_t dest_write_files_;
    ::uint32_t debug_level_;
    ::uint32_t grpc_port_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SetResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xtcp_config.v1.SetResponse) */ {
 public:
  inline SetResponse() : SetResponse(nullptr) {}
  ~SetResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetResponse(const SetResponse& from) : SetResponse(nullptr, from) {}
  inline SetResponse(SetResponse&& from) noexcept
      : SetResponse(nullptr, std::move(from)) {}
  inline SetResponse& operator=(const SetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResponse& operator=(SetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetResponse* internal_default_instance() {
    return reinterpret_cast<const SetResponse*>(
        &_SetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SetResponse& a, SetResponse& b) { a.Swap(&b); }
  inline void Swap(SetResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetResponse& from) { SetResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xtcp_config.v1.SetResponse"; }

 protected:
  explicit SetResponse(::google::protobuf::Arena* arena);
  SetResponse(::google::protobuf::Arena* arena, const SetResponse& from);
  SetResponse(::google::protobuf::Arena* arena, SetResponse&& from) noexcept
      : SetResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfigFieldNumber = 1,
  };
  // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
  bool has_config() const;
  void clear_config() ;
  const ::xtcp_config::v1::XtcpConfig& config() const;
  PROTOBUF_NODISCARD ::xtcp_config::v1::XtcpConfig* release_config();
  ::xtcp_config::v1::XtcpConfig* mutable_config();
  void set_allocated_config(::xtcp_config::v1::XtcpConfig* value);
  void unsafe_arena_set_allocated_config(::xtcp_config::v1::XtcpConfig* value);
  ::xtcp_config::v1::XtcpConfig* unsafe_arena_release_config();

  private:
  const ::xtcp_config::v1::XtcpConfig& _internal_config() const;
  ::xtcp_config::v1::XtcpConfig* _internal_mutable_config();

  public:
  // @@protoc_insertion_point(class_scope:xtcp_config.v1.SetResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::xtcp_config::v1::XtcpConfig* config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SetRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xtcp_config.v1.SetRequest) */ {
 public:
  inline SetRequest() : SetRequest(nullptr) {}
  ~SetRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetRequest(const SetRequest& from) : SetRequest(nullptr, from) {}
  inline SetRequest(SetRequest&& from) noexcept
      : SetRequest(nullptr, std::move(from)) {}
  inline SetRequest& operator=(const SetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRequest& operator=(SetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRequest* internal_default_instance() {
    return reinterpret_cast<const SetRequest*>(
        &_SetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SetRequest& a, SetRequest& b) { a.Swap(&b); }
  inline void Swap(SetRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetRequest& from) { SetRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xtcp_config.v1.SetRequest"; }

 protected:
  explicit SetRequest(::google::protobuf::Arena* arena);
  SetRequest(::google::protobuf::Arena* arena, const SetRequest& from);
  SetRequest(::google::protobuf::Arena* arena, SetRequest&& from) noexcept
      : SetRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfigFieldNumber = 1,
  };
  // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
  bool has_config() const;
  void clear_config() ;
  const ::xtcp_config::v1::XtcpConfig& config() const;
  PROTOBUF_NODISCARD ::xtcp_config::v1::XtcpConfig* release_config();
  ::xtcp_config::v1::XtcpConfig* mutable_config();
  void set_allocated_config(::xtcp_config::v1::XtcpConfig* value);
  void unsafe_arena_set_allocated_config(::xtcp_config::v1::XtcpConfig* value);
  ::xtcp_config::v1::XtcpConfig* unsafe_arena_release_config();

  private:
  const ::xtcp_config::v1::XtcpConfig& _internal_config() const;
  ::xtcp_config::v1::XtcpConfig* _internal_mutable_config();

  public:
  // @@protoc_insertion_point(class_scope:xtcp_config.v1.SetRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::xtcp_config::v1::XtcpConfig* config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SetPollFrequencyResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xtcp_config.v1.SetPollFrequencyResponse) */ {
 public:
  inline SetPollFrequencyResponse() : SetPollFrequencyResponse(nullptr) {}
  ~SetPollFrequencyResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetPollFrequencyResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetPollFrequencyResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetPollFrequencyResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetPollFrequencyResponse(const SetPollFrequencyResponse& from) : SetPollFrequencyResponse(nullptr, from) {}
  inline SetPollFrequencyResponse(SetPollFrequencyResponse&& from) noexcept
      : SetPollFrequencyResponse(nullptr, std::move(from)) {}
  inline SetPollFrequencyResponse& operator=(const SetPollFrequencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPollFrequencyResponse& operator=(SetPollFrequencyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPollFrequencyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPollFrequencyResponse* internal_default_instance() {
    return reinterpret_cast<const SetPollFrequencyResponse*>(
        &_SetPollFrequencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SetPollFrequencyResponse& a, SetPollFrequencyResponse& b) { a.Swap(&b); }
  inline void Swap(SetPollFrequencyResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPollFrequencyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPollFrequencyResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetPollFrequencyResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetPollFrequencyResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetPollFrequencyResponse& from) { SetPollFrequencyResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetPollFrequencyResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xtcp_config.v1.SetPollFrequencyResponse"; }

 protected:
  explicit SetPollFrequencyResponse(::google::protobuf::Arena* arena);
  SetPollFrequencyResponse(::google::protobuf::Arena* arena, const SetPollFrequencyResponse& from);
  SetPollFrequencyResponse(::google::protobuf::Arena* arena, SetPollFrequencyResponse&& from) noexcept
      : SetPollFrequencyResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfigFieldNumber = 1,
  };
  // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
  bool has_config() const;
  void clear_config() ;
  const ::xtcp_config::v1::XtcpConfig& config() const;
  PROTOBUF_NODISCARD ::xtcp_config::v1::XtcpConfig* release_config();
  ::xtcp_config::v1::XtcpConfig* mutable_config();
  void set_allocated_config(::xtcp_config::v1::XtcpConfig* value);
  void unsafe_arena_set_allocated_config(::xtcp_config::v1::XtcpConfig* value);
  ::xtcp_config::v1::XtcpConfig* unsafe_arena_release_config();

  private:
  const ::xtcp_config::v1::XtcpConfig& _internal_config() const;
  ::xtcp_config::v1::XtcpConfig* _internal_mutable_config();

  public:
  // @@protoc_insertion_point(class_scope:xtcp_config.v1.SetPollFrequencyResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetPollFrequencyResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::xtcp_config::v1::XtcpConfig* config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class GetResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:xtcp_config.v1.GetResponse) */ {
 public:
  inline GetResponse() : GetResponse(nullptr) {}
  ~GetResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetResponse(const GetResponse& from) : GetResponse(nullptr, from) {}
  inline GetResponse(GetResponse&& from) noexcept
      : GetResponse(nullptr, std::move(from)) {}
  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
        &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GetResponse& a, GetResponse& b) { a.Swap(&b); }
  inline void Swap(GetResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetResponse& from) { GetResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "xtcp_config.v1.GetResponse"; }

 protected:
  explicit GetResponse(::google::protobuf::Arena* arena);
  GetResponse(::google::protobuf::Arena* arena, const GetResponse& from);
  GetResponse(::google::protobuf::Arena* arena, GetResponse&& from) noexcept
      : GetResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConfigFieldNumber = 1,
  };
  // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
  bool has_config() const;
  void clear_config() ;
  const ::xtcp_config::v1::XtcpConfig& config() const;
  PROTOBUF_NODISCARD ::xtcp_config::v1::XtcpConfig* release_config();
  ::xtcp_config::v1::XtcpConfig* mutable_config();
  void set_allocated_config(::xtcp_config::v1::XtcpConfig* value);
  void unsafe_arena_set_allocated_config(::xtcp_config::v1::XtcpConfig* value);
  ::xtcp_config::v1::XtcpConfig* unsafe_arena_release_config();

  private:
  const ::xtcp_config::v1::XtcpConfig& _internal_config() const;
  ::xtcp_config::v1::XtcpConfig* _internal_mutable_config();

  public:
  // @@protoc_insertion_point(class_scope:xtcp_config.v1.GetResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::xtcp_config::v1::XtcpConfig* config_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetRequest

// -------------------------------------------------------------------

// GetResponse

// .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
inline bool GetResponse::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void GetResponse::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xtcp_config::v1::XtcpConfig& GetResponse::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::xtcp_config::v1::XtcpConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::xtcp_config::v1::XtcpConfig&>(::xtcp_config::v1::_XtcpConfig_default_instance_);
}
inline const ::xtcp_config::v1::XtcpConfig& GetResponse::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.GetResponse.config)
  return _internal_config();
}
inline void GetResponse::unsafe_arena_set_allocated_config(::xtcp_config::v1::XtcpConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::xtcp_config::v1::XtcpConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xtcp_config.v1.GetResponse.config)
}
inline ::xtcp_config::v1::XtcpConfig* GetResponse::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xtcp_config::v1::XtcpConfig* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::xtcp_config::v1::XtcpConfig* GetResponse::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.GetResponse.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xtcp_config::v1::XtcpConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::xtcp_config::v1::XtcpConfig* GetResponse::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::xtcp_config::v1::XtcpConfig>(GetArena());
    _impl_.config_ = reinterpret_cast<::xtcp_config::v1::XtcpConfig*>(p);
  }
  return _impl_.config_;
}
inline ::xtcp_config::v1::XtcpConfig* GetResponse::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::xtcp_config::v1::XtcpConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.GetResponse.config)
  return _msg;
}
inline void GetResponse::set_allocated_config(::xtcp_config::v1::XtcpConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::xtcp_config::v1::XtcpConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.GetResponse.config)
}

// -------------------------------------------------------------------

// SetRequest

// .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
inline bool SetRequest::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void SetRequest::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xtcp_config::v1::XtcpConfig& SetRequest::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::xtcp_config::v1::XtcpConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::xtcp_config::v1::XtcpConfig&>(::xtcp_config::v1::_XtcpConfig_default_instance_);
}
inline const ::xtcp_config::v1::XtcpConfig& SetRequest::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.SetRequest.config)
  return _internal_config();
}
inline void SetRequest::unsafe_arena_set_allocated_config(::xtcp_config::v1::XtcpConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::xtcp_config::v1::XtcpConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xtcp_config.v1.SetRequest.config)
}
inline ::xtcp_config::v1::XtcpConfig* SetRequest::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xtcp_config::v1::XtcpConfig* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::xtcp_config::v1::XtcpConfig* SetRequest::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.SetRequest.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xtcp_config::v1::XtcpConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::xtcp_config::v1::XtcpConfig* SetRequest::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::xtcp_config::v1::XtcpConfig>(GetArena());
    _impl_.config_ = reinterpret_cast<::xtcp_config::v1::XtcpConfig*>(p);
  }
  return _impl_.config_;
}
inline ::xtcp_config::v1::XtcpConfig* SetRequest::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::xtcp_config::v1::XtcpConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.SetRequest.config)
  return _msg;
}
inline void SetRequest::set_allocated_config(::xtcp_config::v1::XtcpConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::xtcp_config::v1::XtcpConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.SetRequest.config)
}

// -------------------------------------------------------------------

// SetResponse

// .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
inline bool SetResponse::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void SetResponse::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xtcp_config::v1::XtcpConfig& SetResponse::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::xtcp_config::v1::XtcpConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::xtcp_config::v1::XtcpConfig&>(::xtcp_config::v1::_XtcpConfig_default_instance_);
}
inline const ::xtcp_config::v1::XtcpConfig& SetResponse::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.SetResponse.config)
  return _internal_config();
}
inline void SetResponse::unsafe_arena_set_allocated_config(::xtcp_config::v1::XtcpConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::xtcp_config::v1::XtcpConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xtcp_config.v1.SetResponse.config)
}
inline ::xtcp_config::v1::XtcpConfig* SetResponse::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xtcp_config::v1::XtcpConfig* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::xtcp_config::v1::XtcpConfig* SetResponse::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.SetResponse.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xtcp_config::v1::XtcpConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::xtcp_config::v1::XtcpConfig* SetResponse::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::xtcp_config::v1::XtcpConfig>(GetArena());
    _impl_.config_ = reinterpret_cast<::xtcp_config::v1::XtcpConfig*>(p);
  }
  return _impl_.config_;
}
inline ::xtcp_config::v1::XtcpConfig* SetResponse::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::xtcp_config::v1::XtcpConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.SetResponse.config)
  return _msg;
}
inline void SetResponse::set_allocated_config(::xtcp_config::v1::XtcpConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::xtcp_config::v1::XtcpConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.SetResponse.config)
}

// -------------------------------------------------------------------

// SetPollFrequencyRequest

// .google.protobuf.Duration poll_frequency = 20 [json_name = "pollFrequency", (.buf.validate.field) = {
inline bool SetPollFrequencyRequest::has_poll_frequency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poll_frequency_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& SetPollFrequencyRequest::_internal_poll_frequency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.poll_frequency_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& SetPollFrequencyRequest::poll_frequency() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.SetPollFrequencyRequest.poll_frequency)
  return _internal_poll_frequency();
}
inline void SetPollFrequencyRequest::unsafe_arena_set_allocated_poll_frequency(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_frequency_);
  }
  _impl_.poll_frequency_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xtcp_config.v1.SetPollFrequencyRequest.poll_frequency)
}
inline ::google::protobuf::Duration* SetPollFrequencyRequest::release_poll_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.poll_frequency_;
  _impl_.poll_frequency_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* SetPollFrequencyRequest::unsafe_arena_release_poll_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.SetPollFrequencyRequest.poll_frequency)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.poll_frequency_;
  _impl_.poll_frequency_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* SetPollFrequencyRequest::_internal_mutable_poll_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.poll_frequency_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.poll_frequency_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.poll_frequency_;
}
inline ::google::protobuf::Duration* SetPollFrequencyRequest::mutable_poll_frequency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_poll_frequency();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.SetPollFrequencyRequest.poll_frequency)
  return _msg;
}
inline void SetPollFrequencyRequest::set_allocated_poll_frequency(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_frequency_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.poll_frequency_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.SetPollFrequencyRequest.poll_frequency)
}

// .google.protobuf.Duration poll_timeout = 30 [json_name = "pollTimeout", (.buf.validate.field) = {
inline bool SetPollFrequencyRequest::has_poll_timeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poll_timeout_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& SetPollFrequencyRequest::_internal_poll_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.poll_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& SetPollFrequencyRequest::poll_timeout() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.SetPollFrequencyRequest.poll_timeout)
  return _internal_poll_timeout();
}
inline void SetPollFrequencyRequest::unsafe_arena_set_allocated_poll_timeout(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_timeout_);
  }
  _impl_.poll_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xtcp_config.v1.SetPollFrequencyRequest.poll_timeout)
}
inline ::google::protobuf::Duration* SetPollFrequencyRequest::release_poll_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* released = _impl_.poll_timeout_;
  _impl_.poll_timeout_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* SetPollFrequencyRequest::unsafe_arena_release_poll_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.SetPollFrequencyRequest.poll_timeout)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* temp = _impl_.poll_timeout_;
  _impl_.poll_timeout_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* SetPollFrequencyRequest::_internal_mutable_poll_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.poll_timeout_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.poll_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.poll_timeout_;
}
inline ::google::protobuf::Duration* SetPollFrequencyRequest::mutable_poll_timeout() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Duration* _msg = _internal_mutable_poll_timeout();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.SetPollFrequencyRequest.poll_timeout)
  return _msg;
}
inline void SetPollFrequencyRequest::set_allocated_poll_timeout(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_timeout_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.poll_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.SetPollFrequencyRequest.poll_timeout)
}

// -------------------------------------------------------------------

// SetPollFrequencyResponse

// .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
inline bool SetPollFrequencyResponse::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void SetPollFrequencyResponse::clear_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::xtcp_config::v1::XtcpConfig& SetPollFrequencyResponse::_internal_config() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::xtcp_config::v1::XtcpConfig* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::xtcp_config::v1::XtcpConfig&>(::xtcp_config::v1::_XtcpConfig_default_instance_);
}
inline const ::xtcp_config::v1::XtcpConfig& SetPollFrequencyResponse::config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.SetPollFrequencyResponse.config)
  return _internal_config();
}
inline void SetPollFrequencyResponse::unsafe_arena_set_allocated_config(::xtcp_config::v1::XtcpConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = reinterpret_cast<::xtcp_config::v1::XtcpConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xtcp_config.v1.SetPollFrequencyResponse.config)
}
inline ::xtcp_config::v1::XtcpConfig* SetPollFrequencyResponse::release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xtcp_config::v1::XtcpConfig* released = _impl_.config_;
  _impl_.config_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::xtcp_config::v1::XtcpConfig* SetPollFrequencyResponse::unsafe_arena_release_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.SetPollFrequencyResponse.config)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::xtcp_config::v1::XtcpConfig* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::xtcp_config::v1::XtcpConfig* SetPollFrequencyResponse::_internal_mutable_config() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.config_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::xtcp_config::v1::XtcpConfig>(GetArena());
    _impl_.config_ = reinterpret_cast<::xtcp_config::v1::XtcpConfig*>(p);
  }
  return _impl_.config_;
}
inline ::xtcp_config::v1::XtcpConfig* SetPollFrequencyResponse::mutable_config() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::xtcp_config::v1::XtcpConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.SetPollFrequencyResponse.config)
  return _msg;
}
inline void SetPollFrequencyResponse::set_allocated_config(::xtcp_config::v1::XtcpConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.config_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.config_ = reinterpret_cast<::xtcp_config::v1::XtcpConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.SetPollFrequencyResponse.config)
}

// -------------------------------------------------------------------

// XtcpConfig

// uint64 nl_timeout_milliseconds = 10 [json_name = "nlTimeoutMilliseconds", (.buf.validate.field) = {
inline void XtcpConfig::clear_nl_timeout_milliseconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nl_timeout_milliseconds_ = ::uint64_t{0u};
}
inline ::uint64_t XtcpConfig::nl_timeout_milliseconds() const {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.nl_timeout_milliseconds)
  return _internal_nl_timeout_milliseconds();
}
inline void XtcpConfig::set_nl_timeout_milliseconds(::uint64_t value) {
  _internal_set_nl_timeout_milliseconds(value);
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.nl_timeout_milliseconds)
}
inline ::uint64_t XtcpConfig::_internal_nl_timeout_milliseconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nl_timeout_milliseconds_;
}
inline void XtcpConfig::_internal_set_nl_timeout_milliseconds(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nl_timeout_milliseconds_ = value;
}

// .google.protobuf.Duration poll_frequency = 20 [json_name = "pollFrequency", (.buf.validate.field) = {
inline bool XtcpConfig::has_poll_frequency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poll_frequency_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& XtcpConfig::_internal_poll_frequency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.poll_frequency_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& XtcpConfig::poll_frequency() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.poll_frequency)
  return _internal_poll_frequency();
}
inline void XtcpConfig::unsafe_arena_set_allocated_poll_frequency(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_frequency_);
  }
  _impl_.poll_frequency_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xtcp_config.v1.XtcpConfig.poll_frequency)
}
inline ::google::protobuf::Duration* XtcpConfig::release_poll_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.poll_frequency_;
  _impl_.poll_frequency_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* XtcpConfig::unsafe_arena_release_poll_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.XtcpConfig.poll_frequency)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.poll_frequency_;
  _impl_.poll_frequency_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* XtcpConfig::_internal_mutable_poll_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.poll_frequency_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.poll_frequency_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.poll_frequency_;
}
inline ::google::protobuf::Duration* XtcpConfig::mutable_poll_frequency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Duration* _msg = _internal_mutable_poll_frequency();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.XtcpConfig.poll_frequency)
  return _msg;
}
inline void XtcpConfig::set_allocated_poll_frequency(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_frequency_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.poll_frequency_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.XtcpConfig.poll_frequency)
}

// .google.protobuf.Duration poll_timeout = 30 [json_name = "pollTimeout", (.buf.validate.field) = {
inline bool XtcpConfig::has_poll_timeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poll_timeout_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& XtcpConfig::_internal_poll_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.poll_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& XtcpConfig::poll_timeout() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.poll_timeout)
  return _internal_poll_timeout();
}
inline void XtcpConfig::unsafe_arena_set_allocated_poll_timeout(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_timeout_);
  }
  _impl_.poll_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xtcp_config.v1.XtcpConfig.poll_timeout)
}
inline ::google::protobuf::Duration* XtcpConfig::release_poll_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* released = _impl_.poll_timeout_;
  _impl_.poll_timeout_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* XtcpConfig::unsafe_arena_release_poll_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.XtcpConfig.poll_timeout)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* temp = _impl_.poll_timeout_;
  _impl_.poll_timeout_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* XtcpConfig::_internal_mutable_poll_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.poll_timeout_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.poll_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.poll_timeout_;
}
inline ::google::protobuf::Duration* XtcpConfig::mutable_poll_timeout() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Duration* _msg = _internal_mutable_poll_timeout();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.XtcpConfig.poll_timeout)
  return _msg;
}
inline void XtcpConfig::set_allocated_poll_timeout(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.poll_timeout_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.poll_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.XtcpConfig.poll_timeout)
}

// uint64 max_loops = 40 [json_name = "maxLoops", (.buf.validate.field) = {
inline void XtcpConfig::clear_max_loops() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_loops_ = ::uint64_t{0u};
}
inline ::uint64_t XtcpConfig::max_loops() const {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.max_loops)
  return _internal_max_loops();
}
inline void XtcpConfig::set_max_loops(::uint64_t value) {
  _internal_set_max_loops(value);
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.max_loops)
}
inline ::uint64_t XtcpConfig::_internal_max_loops() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_loops_;
}
inline void XtcpConfig::_internal_set_max_loops(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_loops_ = value;
}

// uint32 netlinkers = 50 [json_name = "netlinkers", (.buf.validate.field) = {
inline void XtcpConfig::clear_netlinkers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.netlinkers_ = 0u;
}
inline ::uint32_t XtcpConfig::netlinkers() const {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.netlinkers)
  return _internal_netlinkers();
}
inline void XtcpConfig::set_netlinkers(::uint32_t value) {
  _internal_set_netlinkers(value);
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.netlinkers)
}
inline ::uint32_t XtcpConfig::_internal_netlinkers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.netlinkers_;
}
inline void XtcpConfig::_internal_set_netlinkers(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.netlinkers_ = value;
}

// uint32 netlinkers_done_chan_size = 51 [json_name = "netlinkersDoneChanSize", (.buf.validate.field) = {
inline void XtcpConfig::clear_netlinkers_done_chan_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.netlinkers_done_chan_size_ = 0u;
}
inline ::uint32_t XtcpConfig::netlinkers_done_chan_size() const {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.netlinkers_done_chan_size)
  return _internal_netlinkers_done_chan_size();
}
inline void XtcpConfig::set_netlinkers_done_chan_size(::uint32_t value) {
  _internal_set_netlinkers_done_chan_size(value);
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.netlinkers_done_chan_size)
}
inline ::uint32_t XtcpConfig::_internal_netlinkers_done_chan_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.netlinkers_done_chan_size_;
}
inline void XtcpConfig::_internal_set_netlinkers_done_chan_size(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.netlinkers_done_chan_size_ = value;
}

// uint32 nlmsg_seq = 60 [json_name = "nlmsgSeq", (.buf.validate.field) = {
inline void XtcpConfig::clear_nlmsg_seq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nlmsg_seq_ = 0u;
}
inline ::uint32_t XtcpConfig::nlmsg_seq() const {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.nlmsg_seq)
  return _internal_nlmsg_seq();
}
inline void XtcpConfig::set_nlmsg_seq(::uint32_t value) {
  _internal_set_nlmsg_seq(value);
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.nlmsg_seq)
}
inline ::uint32_t XtcpConfig::_internal_nlmsg_seq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nlmsg_seq_;
}
inline void XtcpConfig::_internal_set_nlmsg_seq(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nlmsg_seq_ = value;
}

// uint64 packet_size = 70 [json_name = "packetSize", (.buf.validate.field) = {
inline void XtcpConfig::clear_packet_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_size_ = ::uint64_t{0u};
}
inline ::uint64_t XtcpConfig::packet_size() const {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.packet_size)
  return _internal_packet_size();
}
inline void XtcpConfig::set_packet_size(::uint64_t value) {
  _internal_set_packet_size(value);
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.packet_size)
}
inline ::uint64_t XtcpConfig::_internal_packet_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_size_;
}
inline void XtcpConfig::_internal_set_packet_size(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_size_ = value;
}

// uint32 packet_size_mply = 80 [json_name = "packetSizeMply", (.buf.validate.field) = {
inline void XtcpConfig::clear_packet_size_mply() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_size_mply_ = 0u;
}
inline ::uint32_t XtcpConfig::packet_size_mply() const {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.packet_size_mply)
  return _internal_packet_size_mply();
}
inline void XtcpConfig::set_packet_size_mply(::uint32_t value) {
  _internal_set_packet_size_mply(value);
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.packet_size_mply)
}
inline ::uint32_t XtcpConfig::_internal_packet_size_mply() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_size_mply_;
}
inline void XtcpConfig::_internal_set_packet_size_mply(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_size_mply_ = value;
}

// uint32 write_files = 90 [json_name = "writeFiles", (.buf.validate.field) = {
inline void XtcpConfig::clear_write_files() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.write_files_ = 0u;
}
inline ::uint32_t XtcpConfig::write_files() const {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.write_files)
  return _internal_write_files();
}
inline void XtcpConfig::set_write_files(::uint32_t value) {
  _internal_set_write_files(value);
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.write_files)
}
inline ::uint32_t XtcpConfig::_internal_write_files() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.write_files_;
}
inline void XtcpConfig::_internal_set_write_files(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.write_files_ = value;
}

// string capture_path = 100 [json_name = "capturePath", (.buf.validate.field) = {
inline void XtcpConfig::clear_capture_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.capture_path_.ClearToEmpty();
}
inline const std::string& XtcpConfig::capture_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.capture_path)
  return _internal_capture_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void XtcpConfig::set_capture_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.capture_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.capture_path)
}
inline std::string* XtcpConfig::mutable_capture_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_capture_path();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.XtcpConfig.capture_path)
  return _s;
}
inline const std::string& XtcpConfig::_internal_capture_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.capture_path_.Get();
}
inline void XtcpConfig::_internal_set_capture_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.capture_path_.Set(value, GetArena());
}
inline std::string* XtcpConfig::_internal_mutable_capture_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.capture_path_.Mutable( GetArena());
}
inline std::string* XtcpConfig::release_capture_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.XtcpConfig.capture_path)
  return _impl_.capture_path_.Release();
}
inline void XtcpConfig::set_allocated_capture_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.capture_path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.capture_path_.IsDefault()) {
    _impl_.capture_path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.XtcpConfig.capture_path)
}

// uint64 modulus = 110 [json_name = "modulus", (.buf.validate.field) = {
inline void XtcpConfig::clear_modulus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modulus_ = ::uint64_t{0u};
}
inline ::uint64_t XtcpConfig::modulus() const {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.modulus)
  return _internal_modulus();
}
inline void XtcpConfig::set_modulus(::uint64_t value) {
  _internal_set_modulus(value);
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.modulus)
}
inline ::uint64_t XtcpConfig::_internal_modulus() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.modulus_;
}
inline void XtcpConfig::_internal_set_modulus(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modulus_ = value;
}

// string marshal_to = 120 [json_name = "marshalTo", (.buf.validate.field) = {
inline void XtcpConfig::clear_marshal_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.marshal_to_.ClearToEmpty();
}
inline const std::string& XtcpConfig::marshal_to() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.marshal_to)
  return _internal_marshal_to();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void XtcpConfig::set_marshal_to(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.marshal_to_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.marshal_to)
}
inline std::string* XtcpConfig::mutable_marshal_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_marshal_to();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.XtcpConfig.marshal_to)
  return _s;
}
inline const std::string& XtcpConfig::_internal_marshal_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.marshal_to_.Get();
}
inline void XtcpConfig::_internal_set_marshal_to(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.marshal_to_.Set(value, GetArena());
}
inline std::string* XtcpConfig::_internal_mutable_marshal_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.marshal_to_.Mutable( GetArena());
}
inline std::string* XtcpConfig::release_marshal_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.XtcpConfig.marshal_to)
  return _impl_.marshal_to_.Release();
}
inline void XtcpConfig::set_allocated_marshal_to(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.marshal_to_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.marshal_to_.IsDefault()) {
    _impl_.marshal_to_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.XtcpConfig.marshal_to)
}

// bool protobuf_list_length_delimit = 121 [json_name = "protobufListLengthDelimit", (.buf.validate.field) = {
inline void XtcpConfig::clear_protobuf_list_length_delimit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protobuf_list_length_delimit_ = false;
}
inline bool XtcpConfig::protobuf_list_length_delimit() const {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.protobuf_list_length_delimit)
  return _internal_protobuf_list_length_delimit();
}
inline void XtcpConfig::set_protobuf_list_length_delimit(bool value) {
  _internal_set_protobuf_list_length_delimit(value);
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.protobuf_list_length_delimit)
}
inline bool XtcpConfig::_internal_protobuf_list_length_delimit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.protobuf_list_length_delimit_;
}
inline void XtcpConfig::_internal_set_protobuf_list_length_delimit(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protobuf_list_length_delimit_ = value;
}

// string dest = 130 [json_name = "dest", (.buf.validate.field) = {
inline void XtcpConfig::clear_dest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dest_.ClearToEmpty();
}
inline const std::string& XtcpConfig::dest() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.dest)
  return _internal_dest();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void XtcpConfig::set_dest(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dest_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.dest)
}
inline std::string* XtcpConfig::mutable_dest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dest();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.XtcpConfig.dest)
  return _s;
}
inline const std::string& XtcpConfig::_internal_dest() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dest_.Get();
}
inline void XtcpConfig::_internal_set_dest(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dest_.Set(value, GetArena());
}
inline std::string* XtcpConfig::_internal_mutable_dest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dest_.Mutable( GetArena());
}
inline std::string* XtcpConfig::release_dest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.XtcpConfig.dest)
  return _impl_.dest_.Release();
}
inline void XtcpConfig::set_allocated_dest(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dest_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dest_.IsDefault()) {
    _impl_.dest_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.XtcpConfig.dest)
}

// uint32 dest_write_files = 135 [json_name = "destWriteFiles", (.buf.validate.field) = {
inline void XtcpConfig::clear_dest_write_files() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dest_write_files_ = 0u;
}
inline ::uint32_t XtcpConfig::dest_write_files() const {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.dest_write_files)
  return _internal_dest_write_files();
}
inline void XtcpConfig::set_dest_write_files(::uint32_t value) {
  _internal_set_dest_write_files(value);
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.dest_write_files)
}
inline ::uint32_t XtcpConfig::_internal_dest_write_files() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dest_write_files_;
}
inline void XtcpConfig::_internal_set_dest_write_files(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dest_write_files_ = value;
}

// string topic = 140 [json_name = "topic", (.buf.validate.field) = {
inline void XtcpConfig::clear_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& XtcpConfig::topic() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.topic)
  return _internal_topic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void XtcpConfig::set_topic(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.topic)
}
inline std::string* XtcpConfig::mutable_topic() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.XtcpConfig.topic)
  return _s;
}
inline const std::string& XtcpConfig::_internal_topic() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_.Get();
}
inline void XtcpConfig::_internal_set_topic(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_.Set(value, GetArena());
}
inline std::string* XtcpConfig::_internal_mutable_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.topic_.Mutable( GetArena());
}
inline std::string* XtcpConfig::release_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.XtcpConfig.topic)
  return _impl_.topic_.Release();
}
inline void XtcpConfig::set_allocated_topic(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.XtcpConfig.topic)
}

// string xtcp_proto_file = 143 [json_name = "xtcpProtoFile", (.buf.validate.field) = {
inline void XtcpConfig::clear_xtcp_proto_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xtcp_proto_file_.ClearToEmpty();
}
inline const std::string& XtcpConfig::xtcp_proto_file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.xtcp_proto_file)
  return _internal_xtcp_proto_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void XtcpConfig::set_xtcp_proto_file(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xtcp_proto_file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.xtcp_proto_file)
}
inline std::string* XtcpConfig::mutable_xtcp_proto_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_xtcp_proto_file();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.XtcpConfig.xtcp_proto_file)
  return _s;
}
inline const std::string& XtcpConfig::_internal_xtcp_proto_file() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.xtcp_proto_file_.Get();
}
inline void XtcpConfig::_internal_set_xtcp_proto_file(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xtcp_proto_file_.Set(value, GetArena());
}
inline std::string* XtcpConfig::_internal_mutable_xtcp_proto_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.xtcp_proto_file_.Mutable( GetArena());
}
inline std::string* XtcpConfig::release_xtcp_proto_file() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.XtcpConfig.xtcp_proto_file)
  return _impl_.xtcp_proto_file_.Release();
}
inline void XtcpConfig::set_allocated_xtcp_proto_file(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xtcp_proto_file_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.xtcp_proto_file_.IsDefault()) {
    _impl_.xtcp_proto_file_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.XtcpConfig.xtcp_proto_file)
}

// string kafka_schema_url = 145 [json_name = "kafkaSchemaUrl", (.buf.validate.field) = {
inline void XtcpConfig::clear_kafka_schema_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kafka_schema_url_.ClearToEmpty();
}
inline const std::string& XtcpConfig::kafka_schema_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.kafka_schema_url)
  return _internal_kafka_schema_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void XtcpConfig::set_kafka_schema_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kafka_schema_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.kafka_schema_url)
}
inline std::string* XtcpConfig::mutable_kafka_schema_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_kafka_schema_url();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.XtcpConfig.kafka_schema_url)
  return _s;
}
inline const std::string& XtcpConfig::_internal_kafka_schema_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kafka_schema_url_.Get();
}
inline void XtcpConfig::_internal_set_kafka_schema_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kafka_schema_url_.Set(value, GetArena());
}
inline std::string* XtcpConfig::_internal_mutable_kafka_schema_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.kafka_schema_url_.Mutable( GetArena());
}
inline std::string* XtcpConfig::release_kafka_schema_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.XtcpConfig.kafka_schema_url)
  return _impl_.kafka_schema_url_.Release();
}
inline void XtcpConfig::set_allocated_kafka_schema_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kafka_schema_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.kafka_schema_url_.IsDefault()) {
    _impl_.kafka_schema_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.XtcpConfig.kafka_schema_url)
}

// .google.protobuf.Duration kafka_produce_timeout = 150 [json_name = "kafkaProduceTimeout", (.buf.validate.field) = {
inline bool XtcpConfig::has_kafka_produce_timeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kafka_produce_timeout_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& XtcpConfig::_internal_kafka_produce_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.kafka_produce_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& XtcpConfig::kafka_produce_timeout() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.kafka_produce_timeout)
  return _internal_kafka_produce_timeout();
}
inline void XtcpConfig::unsafe_arena_set_allocated_kafka_produce_timeout(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kafka_produce_timeout_);
  }
  _impl_.kafka_produce_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xtcp_config.v1.XtcpConfig.kafka_produce_timeout)
}
inline ::google::protobuf::Duration* XtcpConfig::release_kafka_produce_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Duration* released = _impl_.kafka_produce_timeout_;
  _impl_.kafka_produce_timeout_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Duration* XtcpConfig::unsafe_arena_release_kafka_produce_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.XtcpConfig.kafka_produce_timeout)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Duration* temp = _impl_.kafka_produce_timeout_;
  _impl_.kafka_produce_timeout_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* XtcpConfig::_internal_mutable_kafka_produce_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kafka_produce_timeout_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.kafka_produce_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.kafka_produce_timeout_;
}
inline ::google::protobuf::Duration* XtcpConfig::mutable_kafka_produce_timeout() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Duration* _msg = _internal_mutable_kafka_produce_timeout();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.XtcpConfig.kafka_produce_timeout)
  return _msg;
}
inline void XtcpConfig::set_allocated_kafka_produce_timeout(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kafka_produce_timeout_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.kafka_produce_timeout_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.XtcpConfig.kafka_produce_timeout)
}

// uint32 debug_level = 160 [json_name = "debugLevel", (.buf.validate.field) = {
inline void XtcpConfig::clear_debug_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_level_ = 0u;
}
inline ::uint32_t XtcpConfig::debug_level() const {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.debug_level)
  return _internal_debug_level();
}
inline void XtcpConfig::set_debug_level(::uint32_t value) {
  _internal_set_debug_level(value);
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.debug_level)
}
inline ::uint32_t XtcpConfig::_internal_debug_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.debug_level_;
}
inline void XtcpConfig::_internal_set_debug_level(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_level_ = value;
}

// string label = 170 [json_name = "label", (.buf.validate.field) = {
inline void XtcpConfig::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& XtcpConfig::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void XtcpConfig::set_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.label)
}
inline std::string* XtcpConfig::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.XtcpConfig.label)
  return _s;
}
inline const std::string& XtcpConfig::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_.Get();
}
inline void XtcpConfig::_internal_set_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(value, GetArena());
}
inline std::string* XtcpConfig::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* XtcpConfig::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.XtcpConfig.label)
  return _impl_.label_.Release();
}
inline void XtcpConfig::set_allocated_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.XtcpConfig.label)
}

// string tag = 180 [json_name = "tag", (.buf.validate.field) = {
inline void XtcpConfig::clear_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& XtcpConfig::tag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void XtcpConfig::set_tag(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tag_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.tag)
}
inline std::string* XtcpConfig::mutable_tag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.XtcpConfig.tag)
  return _s;
}
inline const std::string& XtcpConfig::_internal_tag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tag_.Get();
}
inline void XtcpConfig::_internal_set_tag(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tag_.Set(value, GetArena());
}
inline std::string* XtcpConfig::_internal_mutable_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tag_.Mutable( GetArena());
}
inline std::string* XtcpConfig::release_tag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.XtcpConfig.tag)
  return _impl_.tag_.Release();
}
inline void XtcpConfig::set_allocated_tag(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tag_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.XtcpConfig.tag)
}

// uint32 grpc_port = 190 [json_name = "grpcPort", (.buf.validate.field) = {
inline void XtcpConfig::clear_grpc_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.grpc_port_ = 0u;
}
inline ::uint32_t XtcpConfig::grpc_port() const {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.grpc_port)
  return _internal_grpc_port();
}
inline void XtcpConfig::set_grpc_port(::uint32_t value) {
  _internal_set_grpc_port(value);
  // @@protoc_insertion_point(field_set:xtcp_config.v1.XtcpConfig.grpc_port)
}
inline ::uint32_t XtcpConfig::_internal_grpc_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.grpc_port_;
}
inline void XtcpConfig::_internal_set_grpc_port(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.grpc_port_ = value;
}

// .xtcp_config.v1.EnabledDeserializers enabled_deserializers = 200 [json_name = "enabledDeserializers", (.buf.validate.field) = {
inline bool XtcpConfig::has_enabled_deserializers() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enabled_deserializers_ != nullptr);
  return value;
}
inline void XtcpConfig::clear_enabled_deserializers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.enabled_deserializers_ != nullptr) _impl_.enabled_deserializers_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::xtcp_config::v1::EnabledDeserializers& XtcpConfig::_internal_enabled_deserializers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::xtcp_config::v1::EnabledDeserializers* p = _impl_.enabled_deserializers_;
  return p != nullptr ? *p : reinterpret_cast<const ::xtcp_config::v1::EnabledDeserializers&>(::xtcp_config::v1::_EnabledDeserializers_default_instance_);
}
inline const ::xtcp_config::v1::EnabledDeserializers& XtcpConfig::enabled_deserializers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:xtcp_config.v1.XtcpConfig.enabled_deserializers)
  return _internal_enabled_deserializers();
}
inline void XtcpConfig::unsafe_arena_set_allocated_enabled_deserializers(::xtcp_config::v1::EnabledDeserializers* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.enabled_deserializers_);
  }
  _impl_.enabled_deserializers_ = reinterpret_cast<::xtcp_config::v1::EnabledDeserializers*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xtcp_config.v1.XtcpConfig.enabled_deserializers)
}
inline ::xtcp_config::v1::EnabledDeserializers* XtcpConfig::release_enabled_deserializers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::xtcp_config::v1::EnabledDeserializers* released = _impl_.enabled_deserializers_;
  _impl_.enabled_deserializers_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::xtcp_config::v1::EnabledDeserializers* XtcpConfig::unsafe_arena_release_enabled_deserializers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:xtcp_config.v1.XtcpConfig.enabled_deserializers)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::xtcp_config::v1::EnabledDeserializers* temp = _impl_.enabled_deserializers_;
  _impl_.enabled_deserializers_ = nullptr;
  return temp;
}
inline ::xtcp_config::v1::EnabledDeserializers* XtcpConfig::_internal_mutable_enabled_deserializers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.enabled_deserializers_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::xtcp_config::v1::EnabledDeserializers>(GetArena());
    _impl_.enabled_deserializers_ = reinterpret_cast<::xtcp_config::v1::EnabledDeserializers*>(p);
  }
  return _impl_.enabled_deserializers_;
}
inline ::xtcp_config::v1::EnabledDeserializers* XtcpConfig::mutable_enabled_deserializers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::xtcp_config::v1::EnabledDeserializers* _msg = _internal_mutable_enabled_deserializers();
  // @@protoc_insertion_point(field_mutable:xtcp_config.v1.XtcpConfig.enabled_deserializers)
  return _msg;
}
inline void XtcpConfig::set_allocated_enabled_deserializers(::xtcp_config::v1::EnabledDeserializers* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.enabled_deserializers_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.enabled_deserializers_ = reinterpret_cast<::xtcp_config::v1::EnabledDeserializers*>(value);
  // @@protoc_insertion_point(field_set_allocated:xtcp_config.v1.XtcpConfig.enabled_deserializers)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EnabledDeserializers

// map<string, bool> enabled = 1 [json_name = "enabled"];
inline int EnabledDeserializers::_internal_enabled_size() const {
  return _internal_enabled().size();
}
inline int EnabledDeserializers::enabled_size() const {
  return _internal_enabled_size();
}
inline void EnabledDeserializers::clear_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_.Clear();
}
inline const ::google::protobuf::Map<std::string, bool>& EnabledDeserializers::_internal_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enabled_.GetMap();
}
inline const ::google::protobuf::Map<std::string, bool>& EnabledDeserializers::enabled() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:xtcp_config.v1.EnabledDeserializers.enabled)
  return _internal_enabled();
}
inline ::google::protobuf::Map<std::string, bool>* EnabledDeserializers::_internal_mutable_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.enabled_.MutableMap();
}
inline ::google::protobuf::Map<std::string, bool>* EnabledDeserializers::mutable_enabled() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:xtcp_config.v1.EnabledDeserializers.enabled)
  return _internal_mutable_enabled();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace xtcp_config


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto_2epb_2eh
