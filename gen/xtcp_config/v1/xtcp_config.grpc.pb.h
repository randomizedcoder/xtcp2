// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: xtcp_config/v1/xtcp_config.proto
// Original file comments:
//
// xTCP - config
//
// These are all the structs relating to the TCP diagnotic module in the kernel
//
//
// Build this using buf build ( https://buf.build/ ), see the buf config in the root folder
//
// https://protobuf.dev/programming-guides/encoding/#structure
//
#ifndef GRPC_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto__INCLUDED
#define GRPC_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto__INCLUDED

#include "xtcp_config/v1/xtcp_config.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace xtcp_config {
namespace v1 {

// https://protobuf.dev/programming-guides/proto3/#scalar
//
class ConfigService final {
 public:
  static constexpr char const* service_full_name() {
    return "xtcp_config.v1.ConfigService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest& request, ::xtcp_config::v1::GetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status Set(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest& request, ::xtcp_config::v1::SetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::SetResponse>> AsyncSet(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::SetResponse>>(AsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::SetResponse>> PrepareAsyncSet(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::SetResponse>>(PrepareAsyncSetRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPollFrequency(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest& request, ::xtcp_config::v1::SetPollFrequencyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::SetPollFrequencyResponse>> AsyncSetPollFrequency(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::SetPollFrequencyResponse>>(AsyncSetPollFrequencyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::SetPollFrequencyResponse>> PrepareAsyncSetPollFrequency(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::SetPollFrequencyResponse>>(PrepareAsyncSetPollFrequencyRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Get(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest* request, ::xtcp_config::v1::GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest* request, ::xtcp_config::v1::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Set(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest* request, ::xtcp_config::v1::SetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Set(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest* request, ::xtcp_config::v1::SetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetPollFrequency(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest* request, ::xtcp_config::v1::SetPollFrequencyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPollFrequency(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest* request, ::xtcp_config::v1::SetPollFrequencyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::SetResponse>* AsyncSetRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::SetResponse>* PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::SetPollFrequencyResponse>* AsyncSetPollFrequencyRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::xtcp_config::v1::SetPollFrequencyResponse>* PrepareAsyncSetPollFrequencyRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Get(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest& request, ::xtcp_config::v1::GetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::GetResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::GetResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::GetResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Set(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest& request, ::xtcp_config::v1::SetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetResponse>> AsyncSet(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetResponse>>(AsyncSetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetResponse>> PrepareAsyncSet(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetResponse>>(PrepareAsyncSetRaw(context, request, cq));
    }
    ::grpc::Status SetPollFrequency(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest& request, ::xtcp_config::v1::SetPollFrequencyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetPollFrequencyResponse>> AsyncSetPollFrequency(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetPollFrequencyResponse>>(AsyncSetPollFrequencyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetPollFrequencyResponse>> PrepareAsyncSetPollFrequency(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetPollFrequencyResponse>>(PrepareAsyncSetPollFrequencyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Get(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest* request, ::xtcp_config::v1::GetResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest* request, ::xtcp_config::v1::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Set(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest* request, ::xtcp_config::v1::SetResponse* response, std::function<void(::grpc::Status)>) override;
      void Set(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest* request, ::xtcp_config::v1::SetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPollFrequency(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest* request, ::xtcp_config::v1::SetPollFrequencyResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPollFrequency(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest* request, ::xtcp_config::v1::SetPollFrequencyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::GetResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::GetResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetResponse>* AsyncSetRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetResponse>* PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::SetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetPollFrequencyResponse>* AsyncSetPollFrequencyRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::xtcp_config::v1::SetPollFrequencyResponse>* PrepareAsyncSetPollFrequencyRaw(::grpc::ClientContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Set_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPollFrequency_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::xtcp_config::v1::GetRequest* request, ::xtcp_config::v1::GetResponse* response);
    virtual ::grpc::Status Set(::grpc::ServerContext* context, const ::xtcp_config::v1::SetRequest* request, ::xtcp_config::v1::SetResponse* response);
    virtual ::grpc::Status SetPollFrequency(::grpc::ServerContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest* request, ::xtcp_config::v1::SetPollFrequencyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::GetRequest* /*request*/, ::xtcp_config::v1::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::xtcp_config::v1::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::xtcp_config::v1::GetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Set() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::SetRequest* /*request*/, ::xtcp_config::v1::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSet(::grpc::ServerContext* context, ::xtcp_config::v1::SetRequest* request, ::grpc::ServerAsyncResponseWriter< ::xtcp_config::v1::SetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPollFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPollFrequency() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetPollFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPollFrequency(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::SetPollFrequencyRequest* /*request*/, ::xtcp_config::v1::SetPollFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPollFrequency(::grpc::ServerContext* context, ::xtcp_config::v1::SetPollFrequencyRequest* request, ::grpc::ServerAsyncResponseWriter< ::xtcp_config::v1::SetPollFrequencyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<WithAsyncMethod_Set<WithAsyncMethod_SetPollFrequency<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::xtcp_config::v1::GetRequest, ::xtcp_config::v1::GetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::xtcp_config::v1::GetRequest* request, ::xtcp_config::v1::GetResponse* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::xtcp_config::v1::GetRequest, ::xtcp_config::v1::GetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::xtcp_config::v1::GetRequest, ::xtcp_config::v1::GetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::GetRequest* /*request*/, ::xtcp_config::v1::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::xtcp_config::v1::GetRequest* /*request*/, ::xtcp_config::v1::GetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Set() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::xtcp_config::v1::SetRequest, ::xtcp_config::v1::SetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::xtcp_config::v1::SetRequest* request, ::xtcp_config::v1::SetResponse* response) { return this->Set(context, request, response); }));}
    void SetMessageAllocatorFor_Set(
        ::grpc::MessageAllocator< ::xtcp_config::v1::SetRequest, ::xtcp_config::v1::SetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::xtcp_config::v1::SetRequest, ::xtcp_config::v1::SetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::SetRequest* /*request*/, ::xtcp_config::v1::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Set(
      ::grpc::CallbackServerContext* /*context*/, const ::xtcp_config::v1::SetRequest* /*request*/, ::xtcp_config::v1::SetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetPollFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPollFrequency() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::xtcp_config::v1::SetPollFrequencyRequest, ::xtcp_config::v1::SetPollFrequencyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::xtcp_config::v1::SetPollFrequencyRequest* request, ::xtcp_config::v1::SetPollFrequencyResponse* response) { return this->SetPollFrequency(context, request, response); }));}
    void SetMessageAllocatorFor_SetPollFrequency(
        ::grpc::MessageAllocator< ::xtcp_config::v1::SetPollFrequencyRequest, ::xtcp_config::v1::SetPollFrequencyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::xtcp_config::v1::SetPollFrequencyRequest, ::xtcp_config::v1::SetPollFrequencyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPollFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPollFrequency(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::SetPollFrequencyRequest* /*request*/, ::xtcp_config::v1::SetPollFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPollFrequency(
      ::grpc::CallbackServerContext* /*context*/, const ::xtcp_config::v1::SetPollFrequencyRequest* /*request*/, ::xtcp_config::v1::SetPollFrequencyResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Get<WithCallbackMethod_Set<WithCallbackMethod_SetPollFrequency<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::GetRequest* /*request*/, ::xtcp_config::v1::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Set() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::SetRequest* /*request*/, ::xtcp_config::v1::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPollFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPollFrequency() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetPollFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPollFrequency(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::SetPollFrequencyRequest* /*request*/, ::xtcp_config::v1::SetPollFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::GetRequest* /*request*/, ::xtcp_config::v1::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Set() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::SetRequest* /*request*/, ::xtcp_config::v1::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPollFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPollFrequency() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetPollFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPollFrequency(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::SetPollFrequencyRequest* /*request*/, ::xtcp_config::v1::SetPollFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPollFrequency(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::GetRequest* /*request*/, ::xtcp_config::v1::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Set() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Set(context, request, response); }));
    }
    ~WithRawCallbackMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::SetRequest* /*request*/, ::xtcp_config::v1::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Set(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPollFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPollFrequency() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPollFrequency(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPollFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPollFrequency(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::SetPollFrequencyRequest* /*request*/, ::xtcp_config::v1::SetPollFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPollFrequency(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::xtcp_config::v1::GetRequest, ::xtcp_config::v1::GetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::xtcp_config::v1::GetRequest, ::xtcp_config::v1::GetResponse>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::GetRequest* /*request*/, ::xtcp_config::v1::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::xtcp_config::v1::GetRequest,::xtcp_config::v1::GetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Set : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Set() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::xtcp_config::v1::SetRequest, ::xtcp_config::v1::SetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::xtcp_config::v1::SetRequest, ::xtcp_config::v1::SetResponse>* streamer) {
                       return this->StreamedSet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Set() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Set(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::SetRequest* /*request*/, ::xtcp_config::v1::SetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::xtcp_config::v1::SetRequest,::xtcp_config::v1::SetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPollFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPollFrequency() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::xtcp_config::v1::SetPollFrequencyRequest, ::xtcp_config::v1::SetPollFrequencyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::xtcp_config::v1::SetPollFrequencyRequest, ::xtcp_config::v1::SetPollFrequencyResponse>* streamer) {
                       return this->StreamedSetPollFrequency(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPollFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPollFrequency(::grpc::ServerContext* /*context*/, const ::xtcp_config::v1::SetPollFrequencyRequest* /*request*/, ::xtcp_config::v1::SetPollFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPollFrequency(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::xtcp_config::v1::SetPollFrequencyRequest,::xtcp_config::v1::SetPollFrequencyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Set<WithStreamedUnaryMethod_SetPollFrequency<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Set<WithStreamedUnaryMethod_SetPollFrequency<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace xtcp_config


#endif  // GRPC_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto__INCLUDED
