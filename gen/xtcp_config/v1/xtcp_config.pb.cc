// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: xtcp_config/v1/xtcp_config.proto
// Protobuf C++ Version: 5.29.3

#include "xtcp_config/v1/xtcp_config.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace xtcp_config {
namespace v1 {
              template <typename>
PROTOBUF_CONSTEXPR GetRequest::GetRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct GetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRequestDefaultTypeInternal() {}
  union {
    GetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRequestDefaultTypeInternal _GetRequest_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR EnabledDeserializers_EnabledEntry_DoNotUse::EnabledDeserializers_EnabledEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : EnabledDeserializers_EnabledEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : EnabledDeserializers_EnabledEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct EnabledDeserializers_EnabledEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnabledDeserializers_EnabledEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnabledDeserializers_EnabledEntry_DoNotUseDefaultTypeInternal() {}
  union {
    EnabledDeserializers_EnabledEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnabledDeserializers_EnabledEntry_DoNotUseDefaultTypeInternal _EnabledDeserializers_EnabledEntry_DoNotUse_default_instance_;

inline constexpr SetPollFrequencyRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        poll_frequency_{nullptr},
        poll_timeout_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetPollFrequencyRequest::SetPollFrequencyRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SetPollFrequencyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPollFrequencyRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPollFrequencyRequestDefaultTypeInternal() {}
  union {
    SetPollFrequencyRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPollFrequencyRequestDefaultTypeInternal _SetPollFrequencyRequest_default_instance_;

inline constexpr EnabledDeserializers::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : enabled_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EnabledDeserializers::EnabledDeserializers(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EnabledDeserializersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnabledDeserializersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnabledDeserializersDefaultTypeInternal() {}
  union {
    EnabledDeserializers _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnabledDeserializersDefaultTypeInternal _EnabledDeserializers_default_instance_;

inline constexpr XtcpConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        capture_path_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        marshal_to_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dest_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        topic_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xtcp_proto_file_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        kafka_schema_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        label_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tag_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        poll_frequency_{nullptr},
        poll_timeout_{nullptr},
        kafka_produce_timeout_{nullptr},
        enabled_deserializers_{nullptr},
        nl_timeout_milliseconds_{::uint64_t{0u}},
        max_loops_{::uint64_t{0u}},
        netlinkers_{0u},
        netlinkers_done_chan_size_{0u},
        packet_size_{::uint64_t{0u}},
        nlmsg_seq_{0u},
        packet_size_mply_{0u},
        write_files_{0u},
        protobuf_list_length_delimit_{false},
        modulus_{::uint64_t{0u}},
        dest_write_files_{0u},
        debug_level_{0u},
        grpc_port_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR XtcpConfig::XtcpConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct XtcpConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XtcpConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~XtcpConfigDefaultTypeInternal() {}
  union {
    XtcpConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XtcpConfigDefaultTypeInternal _XtcpConfig_default_instance_;

inline constexpr SetResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        config_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetResponse::SetResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetResponseDefaultTypeInternal() {}
  union {
    SetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetResponseDefaultTypeInternal _SetResponse_default_instance_;

inline constexpr SetRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        config_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetRequest::SetRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRequestDefaultTypeInternal() {}
  union {
    SetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRequestDefaultTypeInternal _SetRequest_default_instance_;

inline constexpr SetPollFrequencyResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        config_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetPollFrequencyResponse::SetPollFrequencyResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SetPollFrequencyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPollFrequencyResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPollFrequencyResponseDefaultTypeInternal() {}
  union {
    SetPollFrequencyResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPollFrequencyResponseDefaultTypeInternal _SetPollFrequencyResponse_default_instance_;

inline constexpr GetResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        config_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetResponse::GetResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetResponseDefaultTypeInternal() {}
  union {
    GetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetResponseDefaultTypeInternal _GetResponse_default_instance_;
}  // namespace v1
}  // namespace xtcp_config
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto = nullptr;
const ::uint32_t
    TableStruct_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::GetRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::GetResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::GetResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::GetResponse, _impl_.config_),
        0,
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::SetRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::SetRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::SetRequest, _impl_.config_),
        0,
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::SetResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::SetResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::SetResponse, _impl_.config_),
        0,
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::SetPollFrequencyRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::SetPollFrequencyRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::SetPollFrequencyRequest, _impl_.poll_frequency_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::SetPollFrequencyRequest, _impl_.poll_timeout_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::SetPollFrequencyResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::SetPollFrequencyResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::SetPollFrequencyResponse, _impl_.config_),
        0,
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.nl_timeout_milliseconds_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.poll_frequency_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.poll_timeout_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.max_loops_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.netlinkers_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.netlinkers_done_chan_size_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.nlmsg_seq_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.packet_size_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.packet_size_mply_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.write_files_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.capture_path_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.modulus_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.marshal_to_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.protobuf_list_length_delimit_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.dest_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.dest_write_files_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.topic_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.xtcp_proto_file_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.kafka_schema_url_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.kafka_produce_timeout_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.debug_level_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.label_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.tag_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.grpc_port_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::XtcpConfig, _impl_.enabled_deserializers_),
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        3,
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::EnabledDeserializers_EnabledEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::EnabledDeserializers_EnabledEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::EnabledDeserializers_EnabledEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::EnabledDeserializers_EnabledEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::EnabledDeserializers, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::xtcp_config::v1::EnabledDeserializers, _impl_.enabled_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::xtcp_config::v1::GetRequest)},
        {8, 17, -1, sizeof(::xtcp_config::v1::GetResponse)},
        {18, 27, -1, sizeof(::xtcp_config::v1::SetRequest)},
        {28, 37, -1, sizeof(::xtcp_config::v1::SetResponse)},
        {38, 48, -1, sizeof(::xtcp_config::v1::SetPollFrequencyRequest)},
        {50, 59, -1, sizeof(::xtcp_config::v1::SetPollFrequencyResponse)},
        {60, 93, -1, sizeof(::xtcp_config::v1::XtcpConfig)},
        {118, 128, -1, sizeof(::xtcp_config::v1::EnabledDeserializers_EnabledEntry_DoNotUse)},
        {130, -1, -1, sizeof(::xtcp_config::v1::EnabledDeserializers)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::xtcp_config::v1::_GetRequest_default_instance_._instance,
    &::xtcp_config::v1::_GetResponse_default_instance_._instance,
    &::xtcp_config::v1::_SetRequest_default_instance_._instance,
    &::xtcp_config::v1::_SetResponse_default_instance_._instance,
    &::xtcp_config::v1::_SetPollFrequencyRequest_default_instance_._instance,
    &::xtcp_config::v1::_SetPollFrequencyResponse_default_instance_._instance,
    &::xtcp_config::v1::_XtcpConfig_default_instance_._instance,
    &::xtcp_config::v1::_EnabledDeserializers_EnabledEntry_DoNotUse_default_instance_._instance,
    &::xtcp_config::v1::_EnabledDeserializers_default_instance_._instance,
};
const char descriptor_table_protodef_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n xtcp_config/v1/xtcp_config.proto\022\016xtcp"
    "_config.v1\032\036google/protobuf/duration.pro"
    "to\032\034google/api/annotations.proto\032\033buf/va"
    "lidate/validate.proto\"\014\n\nGetRequest\"A\n\013G"
    "etResponse\0222\n\006config\030\001 \001(\0132\032.xtcp_config"
    ".v1.XtcpConfigR\006config\"@\n\nSetRequest\0222\n\006"
    "config\030\001 \001(\0132\032.xtcp_config.v1.XtcpConfig"
    "R\006config\"A\n\013SetResponse\0222\n\006config\030\001 \001(\0132"
    "\032.xtcp_config.v1.XtcpConfigR\006config\"\264\002\n\027"
    "SetPollFrequencyRequest\022S\n\016poll_frequenc"
    "y\030\024 \001(\0132\031.google.protobuf.DurationB\021\272H\016\252"
    "\001\010\"\004\010\200\365$2\000\310\001\001R\rpollFrequency\022O\n\014poll_tim"
    "eout\030\036 \001(\0132\031.google.protobuf.DurationB\021\272"
    "H\016\252\001\010\"\004\010\200\365$2\000\310\001\001R\013pollTimeout:s\272Hp\032n\n\017Xt"
    "cpConfig.poll\0222Poll timeout must be less"
    " than poll poll_frequency\032\'this.poll_tim"
    "eout < this.poll_frequency\"N\n\030SetPollFre"
    "quencyResponse\0222\n\006config\030\001 \001(\0132\032.xtcp_co"
    "nfig.v1.XtcpConfigR\006config\"\203\014\n\nXtcpConfi"
    "g\022F\n\027nl_timeout_milliseconds\030\n \001(\004B\016\272H\0132"
    "\006\030\240\215\006(\000\310\001\001R\025nlTimeoutMilliseconds\022S\n\016pol"
    "l_frequency\030\024 \001(\0132\031.google.protobuf.Dura"
    "tionB\021\272H\016\252\001\010\"\004\010\200\365$*\000\310\001\001R\rpollFrequency\022O"
    "\n\014poll_timeout\030\036 \001(\0132\031.google.protobuf.D"
    "urationB\021\272H\016\252\001\010\"\004\010\200\365$*\000\310\001\001R\013pollTimeout\022"
    "+\n\tmax_loops\030( \001(\004B\016\272H\0132\006\030\240\215\006(\000\310\001\000R\010maxL"
    "oops\022,\n\nnetlinkers\0302 \001(\rB\014\272H\t*\004\030d(\001\310\001\001R\n"
    "netlinkers\022H\n\031netlinkers_done_chan_size\030"
    "3 \001(\rB\r\272H\n*\005\030\350\007(\001\310\001\001R\026netlinkersDoneChan"
    "Size\022*\n\tnlmsg_seq\030< \001(\rB\r\272H\n*\005\030\220N(\000\310\001\001R\010"
    "nlmsgSeq\022/\n\013packet_size\030F \001(\004B\016\272H\0132\006\030\300\204="
    "(\000\310\001\000R\npacketSize\0226\n\020packet_size_mply\030P "
    "\001(\rB\014\272H\t*\004\030d(\000\310\001\000R\016packetSizeMply\022.\n\013wri"
    "te_files\030Z \001(\rB\r\272H\n*\005\030\350\007(\000\310\001\000R\nwriteFile"
    "s\022/\n\014capture_path\030d \001(\tB\014\272H\tr\004\020\001\030P\310\001\000R\013c"
    "apturePath\022(\n\007modulus\030n \001(\004B\016\272H\0132\006\030\300\204=(\001"
    "\310\001\001R\007modulus\022+\n\nmarshal_to\030x \001(\tB\014\272H\tr\004\020"
    "\004\030(\310\001\001R\tmarshalTo\022G\n\034protobuf_list_lengt"
    "h_delimit\030y \001(\010B\006\272H\003\310\001\000R\031protobufListLen"
    "gthDelimit\022!\n\004dest\030\202\001 \001(\tB\014\272H\tr\004\020\004\030(\310\001\001R"
    "\004dest\0228\n\020dest_write_files\030\207\001 \001(\rB\r\272H\n*\005\030"
    "\350\007(\000\310\001\000R\016destWriteFiles\022#\n\005topic\030\214\001 \001(\tB"
    "\014\272H\tr\004\020\001\030(\310\001\000R\005topic\0225\n\017xtcp_proto_file\030"
    "\217\001 \001(\tB\014\272H\tr\004\020\001\030P\310\001\000R\rxtcpProtoFile\0227\n\020k"
    "afka_schema_url\030\221\001 \001(\tB\014\272H\tr\004\020\001\030<\310\001\000R\016ka"
    "fkaSchemaUrl\022`\n\025kafka_produce_timeout\030\226\001"
    " \001(\0132\031.google.protobuf.DurationB\020\272H\r\252\001\007\""
    "\003\010\330\0042\000\310\001\000R\023kafkaProduceTimeout\022/\n\013debug_"
    "level\030\240\001 \001(\rB\r\272H\n*\005\030\350\007(\000\310\001\001R\ndebugLevel\022"
    "!\n\005label\030\252\001 \001(\tB\n\272H\007r\002\030(\310\001\000R\005label\022\035\n\003ta"
    "g\030\264\001 \001(\tB\n\272H\007r\002\030(\310\001\000R\003tag\022,\n\tgrpc_port\030\276"
    "\001 \001(\rB\016\272H\013*\006\030\377\377\003(\001\310\001\001R\010grpcPort\022b\n\025enabl"
    "ed_deserializers\030\310\001 \001(\0132$.xtcp_config.v1"
    ".EnabledDeserializersB\006\272H\003\310\001\000R\024enabledDe"
    "serializers:s\272Hp\032n\n\017XtcpConfig.poll\0222Pol"
    "l timeout must be less than poll poll_fr"
    "equency\032\'this.poll_frequency > this.poll"
    "_timeout\"\237\001\n\024EnabledDeserializers\022K\n\007ena"
    "bled\030\001 \003(\01321.xtcp_config.v1.EnabledDeser"
    "ializers.EnabledEntryR\007enabled\032:\n\014Enable"
    "dEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\010R"
    "\005value:\0028\0012\341\002\n\rConfigService\022]\n\003Get\022\032.xt"
    "cp_config.v1.GetRequest\032\033.xtcp_config.v1"
    ".GetResponse\"\035\202\323\344\223\002\027\032\022/ConfigService/Get"
    ":\001*\022]\n\003Set\022\032.xtcp_config.v1.SetRequest\032\033"
    ".xtcp_config.v1.SetResponse\"\035\202\323\344\223\002\027\032\022/Co"
    "nfigService/Set:\001*\022\221\001\n\020SetPollFrequency\022"
    "\'.xtcp_config.v1.SetPollFrequencyRequest"
    "\032(.xtcp_config.v1.SetPollFrequencyRespon"
    "se\"*\202\323\344\223\002$\032\037/ConfigService/SetPollFreque"
    "ncy:\001*B\215\001\n\022com.xtcp_config.v1B\017XtcpConfi"
    "gProtoP\001Z\021./pkg/xtcp_config\242\002\003XXX\252\002\rXtcp"
    "Config.V1\312\002\rXtcpConfig\\V1\342\002\031XtcpConfig\\V"
    "1\\GPBMetadata\352\002\016XtcpConfig::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto_deps[3] =
    {
        &::descriptor_table_buf_2fvalidate_2fvalidate_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::absl::once_flag descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto = {
    false,
    false,
    2958,
    descriptor_table_protodef_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto,
    "xtcp_config/v1/xtcp_config.proto",
    &descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto_once,
    descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto_deps,
    3,
    9,
    schemas,
    file_default_instances,
    TableStruct_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto::offsets,
    file_level_enum_descriptors_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto,
    file_level_service_descriptors_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto,
};
namespace xtcp_config {
namespace v1 {
// ===================================================================

class GetRequest::_Internal {
 public:
};

GetRequest::GetRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:xtcp_config.v1.GetRequest)
}
GetRequest::GetRequest(
    ::google::protobuf::Arena* arena,
    const GetRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:xtcp_config.v1.GetRequest)
}

inline void* GetRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetRequest(arena);
}
constexpr auto GetRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetRequest),
                                            alignof(GetRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<GetRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<GetRequest>(), &GetRequest::ByteSizeLong,
            &GetRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetRequest, _impl_._cached_size_),
        false,
    },
    &GetRequest::kDescriptorMethods,
    &descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> GetRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xtcp_config::v1::GetRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata GetRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetResponse, _impl_._has_bits_);
};

GetResponse::GetResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xtcp_config.v1.GetResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xtcp_config::v1::GetResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetResponse::GetResponse(
    ::google::protobuf::Arena* arena,
    const GetResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.config_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::xtcp_config::v1::XtcpConfig>(
                              arena, *from._impl_.config_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:xtcp_config.v1.GetResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.config_ = {};
}
GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:xtcp_config.v1.GetResponse)
  SharedDtor(*this);
}
inline void GetResponse::SharedDtor(MessageLite& self) {
  GetResponse& this_ = static_cast<GetResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.config_;
  this_._impl_.~Impl_();
}

inline void* GetResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetResponse(arena);
}
constexpr auto GetResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetResponse),
                                            alignof(GetResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetResponse>(), &GetResponse::ByteSizeLong,
            &GetResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetResponse, _impl_._cached_size_),
        false,
    },
    &GetResponse::kDescriptorMethods,
    &descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xtcp_config::v1::GetResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetResponse, _impl_.config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
    {PROTOBUF_FIELD_OFFSET(GetResponse, _impl_.config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xtcp_config::v1::XtcpConfig>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xtcp_config.v1.GetResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.config_ != nullptr);
    _impl_.config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetResponse& this_ = static_cast<const GetResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xtcp_config.v1.GetResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.config_, this_._impl_.config_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xtcp_config.v1.GetResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetResponse::ByteSizeLong(const MessageLite& base) {
          const GetResponse& this_ = static_cast<const GetResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetResponse::ByteSizeLong() const {
          const GetResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xtcp_config.v1.GetResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.config_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetResponse*>(&to_msg);
  auto& from = static_cast<const GetResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xtcp_config.v1.GetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.config_ != nullptr);
    if (_this->_impl_.config_ == nullptr) {
      _this->_impl_.config_ =
          ::google::protobuf::Message::CopyConstruct<::xtcp_config::v1::XtcpConfig>(arena, *from._impl_.config_);
    } else {
      _this->_impl_.config_->MergeFrom(*from._impl_.config_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xtcp_config.v1.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetResponse::InternalSwap(GetResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.config_, other->_impl_.config_);
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SetRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SetRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SetRequest, _impl_._has_bits_);
};

SetRequest::SetRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xtcp_config.v1.SetRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xtcp_config::v1::SetRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetRequest::SetRequest(
    ::google::protobuf::Arena* arena,
    const SetRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SetRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.config_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::xtcp_config::v1::XtcpConfig>(
                              arena, *from._impl_.config_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:xtcp_config.v1.SetRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.config_ = {};
}
SetRequest::~SetRequest() {
  // @@protoc_insertion_point(destructor:xtcp_config.v1.SetRequest)
  SharedDtor(*this);
}
inline void SetRequest::SharedDtor(MessageLite& self) {
  SetRequest& this_ = static_cast<SetRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.config_;
  this_._impl_.~Impl_();
}

inline void* SetRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SetRequest(arena);
}
constexpr auto SetRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SetRequest),
                                            alignof(SetRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SetRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SetRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SetRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SetRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SetRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SetRequest>(), &SetRequest::ByteSizeLong,
            &SetRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SetRequest, _impl_._cached_size_),
        false,
    },
    &SetRequest::kDescriptorMethods,
    &descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SetRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xtcp_config::v1::SetRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetRequest, _impl_.config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
    {PROTOBUF_FIELD_OFFSET(SetRequest, _impl_.config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xtcp_config::v1::XtcpConfig>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xtcp_config.v1.SetRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.config_ != nullptr);
    _impl_.config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SetRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SetRequest& this_ = static_cast<const SetRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SetRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SetRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xtcp_config.v1.SetRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.config_, this_._impl_.config_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xtcp_config.v1.SetRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SetRequest::ByteSizeLong(const MessageLite& base) {
          const SetRequest& this_ = static_cast<const SetRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SetRequest::ByteSizeLong() const {
          const SetRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xtcp_config.v1.SetRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.config_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SetRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SetRequest*>(&to_msg);
  auto& from = static_cast<const SetRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xtcp_config.v1.SetRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.config_ != nullptr);
    if (_this->_impl_.config_ == nullptr) {
      _this->_impl_.config_ =
          ::google::protobuf::Message::CopyConstruct<::xtcp_config::v1::XtcpConfig>(arena, *from._impl_.config_);
    } else {
      _this->_impl_.config_->MergeFrom(*from._impl_.config_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetRequest::CopyFrom(const SetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xtcp_config.v1.SetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SetRequest::InternalSwap(SetRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.config_, other->_impl_.config_);
}

::google::protobuf::Metadata SetRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SetResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SetResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SetResponse, _impl_._has_bits_);
};

SetResponse::SetResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xtcp_config.v1.SetResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xtcp_config::v1::SetResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetResponse::SetResponse(
    ::google::protobuf::Arena* arena,
    const SetResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SetResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.config_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::xtcp_config::v1::XtcpConfig>(
                              arena, *from._impl_.config_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:xtcp_config.v1.SetResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.config_ = {};
}
SetResponse::~SetResponse() {
  // @@protoc_insertion_point(destructor:xtcp_config.v1.SetResponse)
  SharedDtor(*this);
}
inline void SetResponse::SharedDtor(MessageLite& self) {
  SetResponse& this_ = static_cast<SetResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.config_;
  this_._impl_.~Impl_();
}

inline void* SetResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SetResponse(arena);
}
constexpr auto SetResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SetResponse),
                                            alignof(SetResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SetResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SetResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SetResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SetResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SetResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SetResponse>(), &SetResponse::ByteSizeLong,
            &SetResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SetResponse, _impl_._cached_size_),
        false,
    },
    &SetResponse::kDescriptorMethods,
    &descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SetResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xtcp_config::v1::SetResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetResponse, _impl_.config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
    {PROTOBUF_FIELD_OFFSET(SetResponse, _impl_.config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xtcp_config::v1::XtcpConfig>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xtcp_config.v1.SetResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.config_ != nullptr);
    _impl_.config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SetResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SetResponse& this_ = static_cast<const SetResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SetResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SetResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xtcp_config.v1.SetResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.config_, this_._impl_.config_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xtcp_config.v1.SetResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SetResponse::ByteSizeLong(const MessageLite& base) {
          const SetResponse& this_ = static_cast<const SetResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SetResponse::ByteSizeLong() const {
          const SetResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xtcp_config.v1.SetResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.config_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SetResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SetResponse*>(&to_msg);
  auto& from = static_cast<const SetResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xtcp_config.v1.SetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.config_ != nullptr);
    if (_this->_impl_.config_ == nullptr) {
      _this->_impl_.config_ =
          ::google::protobuf::Message::CopyConstruct<::xtcp_config::v1::XtcpConfig>(arena, *from._impl_.config_);
    } else {
      _this->_impl_.config_->MergeFrom(*from._impl_.config_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetResponse::CopyFrom(const SetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xtcp_config.v1.SetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SetResponse::InternalSwap(SetResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.config_, other->_impl_.config_);
}

::google::protobuf::Metadata SetResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SetPollFrequencyRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SetPollFrequencyRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SetPollFrequencyRequest, _impl_._has_bits_);
};

void SetPollFrequencyRequest::clear_poll_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.poll_frequency_ != nullptr) _impl_.poll_frequency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SetPollFrequencyRequest::clear_poll_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.poll_timeout_ != nullptr) _impl_.poll_timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SetPollFrequencyRequest::SetPollFrequencyRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xtcp_config.v1.SetPollFrequencyRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetPollFrequencyRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xtcp_config::v1::SetPollFrequencyRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetPollFrequencyRequest::SetPollFrequencyRequest(
    ::google::protobuf::Arena* arena,
    const SetPollFrequencyRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SetPollFrequencyRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.poll_frequency_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.poll_frequency_)
                        : nullptr;
  _impl_.poll_timeout_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.poll_timeout_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:xtcp_config.v1.SetPollFrequencyRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetPollFrequencyRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetPollFrequencyRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, poll_frequency_),
           0,
           offsetof(Impl_, poll_timeout_) -
               offsetof(Impl_, poll_frequency_) +
               sizeof(Impl_::poll_timeout_));
}
SetPollFrequencyRequest::~SetPollFrequencyRequest() {
  // @@protoc_insertion_point(destructor:xtcp_config.v1.SetPollFrequencyRequest)
  SharedDtor(*this);
}
inline void SetPollFrequencyRequest::SharedDtor(MessageLite& self) {
  SetPollFrequencyRequest& this_ = static_cast<SetPollFrequencyRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.poll_frequency_;
  delete this_._impl_.poll_timeout_;
  this_._impl_.~Impl_();
}

inline void* SetPollFrequencyRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SetPollFrequencyRequest(arena);
}
constexpr auto SetPollFrequencyRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SetPollFrequencyRequest),
                                            alignof(SetPollFrequencyRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SetPollFrequencyRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SetPollFrequencyRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SetPollFrequencyRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SetPollFrequencyRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SetPollFrequencyRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SetPollFrequencyRequest>(), &SetPollFrequencyRequest::ByteSizeLong,
            &SetPollFrequencyRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SetPollFrequencyRequest, _impl_._cached_size_),
        false,
    },
    &SetPollFrequencyRequest::kDescriptorMethods,
    &descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SetPollFrequencyRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 2, 2, 0, 2> SetPollFrequencyRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetPollFrequencyRequest, _impl_._has_bits_),
    0, // no _extensions_
    30, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3757572095,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xtcp_config::v1::SetPollFrequencyRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.Duration poll_frequency = 20 [json_name = "pollFrequency", (.buf.validate.field) = {
    {::_pbi::TcParser::FastMtS2,
     {418, 0, 0, PROTOBUF_FIELD_OFFSET(SetPollFrequencyRequest, _impl_.poll_frequency_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Duration poll_timeout = 30 [json_name = "pollTimeout", (.buf.validate.field) = {
    {::_pbi::TcParser::FastMtS2,
     {498, 1, 1, PROTOBUF_FIELD_OFFSET(SetPollFrequencyRequest, _impl_.poll_timeout_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Duration poll_frequency = 20 [json_name = "pollFrequency", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(SetPollFrequencyRequest, _impl_.poll_frequency_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Duration poll_timeout = 30 [json_name = "pollTimeout", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(SetPollFrequencyRequest, _impl_.poll_timeout_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SetPollFrequencyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xtcp_config.v1.SetPollFrequencyRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.poll_frequency_ != nullptr);
      _impl_.poll_frequency_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.poll_timeout_ != nullptr);
      _impl_.poll_timeout_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SetPollFrequencyRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SetPollFrequencyRequest& this_ = static_cast<const SetPollFrequencyRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SetPollFrequencyRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SetPollFrequencyRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xtcp_config.v1.SetPollFrequencyRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Duration poll_frequency = 20 [json_name = "pollFrequency", (.buf.validate.field) = {
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                20, *this_._impl_.poll_frequency_, this_._impl_.poll_frequency_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Duration poll_timeout = 30 [json_name = "pollTimeout", (.buf.validate.field) = {
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                30, *this_._impl_.poll_timeout_, this_._impl_.poll_timeout_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xtcp_config.v1.SetPollFrequencyRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SetPollFrequencyRequest::ByteSizeLong(const MessageLite& base) {
          const SetPollFrequencyRequest& this_ = static_cast<const SetPollFrequencyRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SetPollFrequencyRequest::ByteSizeLong() const {
          const SetPollFrequencyRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xtcp_config.v1.SetPollFrequencyRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Duration poll_frequency = 20 [json_name = "pollFrequency", (.buf.validate.field) = {
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.poll_frequency_);
            }
            // .google.protobuf.Duration poll_timeout = 30 [json_name = "pollTimeout", (.buf.validate.field) = {
            if (cached_has_bits & 0x00000002u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.poll_timeout_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SetPollFrequencyRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SetPollFrequencyRequest*>(&to_msg);
  auto& from = static_cast<const SetPollFrequencyRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xtcp_config.v1.SetPollFrequencyRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.poll_frequency_ != nullptr);
      if (_this->_impl_.poll_frequency_ == nullptr) {
        _this->_impl_.poll_frequency_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.poll_frequency_);
      } else {
        _this->_impl_.poll_frequency_->MergeFrom(*from._impl_.poll_frequency_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.poll_timeout_ != nullptr);
      if (_this->_impl_.poll_timeout_ == nullptr) {
        _this->_impl_.poll_timeout_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.poll_timeout_);
      } else {
        _this->_impl_.poll_timeout_->MergeFrom(*from._impl_.poll_timeout_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetPollFrequencyRequest::CopyFrom(const SetPollFrequencyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xtcp_config.v1.SetPollFrequencyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SetPollFrequencyRequest::InternalSwap(SetPollFrequencyRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPollFrequencyRequest, _impl_.poll_timeout_)
      + sizeof(SetPollFrequencyRequest::_impl_.poll_timeout_)
      - PROTOBUF_FIELD_OFFSET(SetPollFrequencyRequest, _impl_.poll_frequency_)>(
          reinterpret_cast<char*>(&_impl_.poll_frequency_),
          reinterpret_cast<char*>(&other->_impl_.poll_frequency_));
}

::google::protobuf::Metadata SetPollFrequencyRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SetPollFrequencyResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SetPollFrequencyResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SetPollFrequencyResponse, _impl_._has_bits_);
};

SetPollFrequencyResponse::SetPollFrequencyResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xtcp_config.v1.SetPollFrequencyResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetPollFrequencyResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xtcp_config::v1::SetPollFrequencyResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetPollFrequencyResponse::SetPollFrequencyResponse(
    ::google::protobuf::Arena* arena,
    const SetPollFrequencyResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SetPollFrequencyResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.config_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::xtcp_config::v1::XtcpConfig>(
                              arena, *from._impl_.config_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:xtcp_config.v1.SetPollFrequencyResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetPollFrequencyResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetPollFrequencyResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.config_ = {};
}
SetPollFrequencyResponse::~SetPollFrequencyResponse() {
  // @@protoc_insertion_point(destructor:xtcp_config.v1.SetPollFrequencyResponse)
  SharedDtor(*this);
}
inline void SetPollFrequencyResponse::SharedDtor(MessageLite& self) {
  SetPollFrequencyResponse& this_ = static_cast<SetPollFrequencyResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.config_;
  this_._impl_.~Impl_();
}

inline void* SetPollFrequencyResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SetPollFrequencyResponse(arena);
}
constexpr auto SetPollFrequencyResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SetPollFrequencyResponse),
                                            alignof(SetPollFrequencyResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SetPollFrequencyResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SetPollFrequencyResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SetPollFrequencyResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SetPollFrequencyResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SetPollFrequencyResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SetPollFrequencyResponse>(), &SetPollFrequencyResponse::ByteSizeLong,
            &SetPollFrequencyResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SetPollFrequencyResponse, _impl_._cached_size_),
        false,
    },
    &SetPollFrequencyResponse::kDescriptorMethods,
    &descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SetPollFrequencyResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetPollFrequencyResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetPollFrequencyResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xtcp_config::v1::SetPollFrequencyResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetPollFrequencyResponse, _impl_.config_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
    {PROTOBUF_FIELD_OFFSET(SetPollFrequencyResponse, _impl_.config_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::xtcp_config::v1::XtcpConfig>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SetPollFrequencyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xtcp_config.v1.SetPollFrequencyResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.config_ != nullptr);
    _impl_.config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SetPollFrequencyResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SetPollFrequencyResponse& this_ = static_cast<const SetPollFrequencyResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SetPollFrequencyResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SetPollFrequencyResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xtcp_config.v1.SetPollFrequencyResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.config_, this_._impl_.config_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xtcp_config.v1.SetPollFrequencyResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SetPollFrequencyResponse::ByteSizeLong(const MessageLite& base) {
          const SetPollFrequencyResponse& this_ = static_cast<const SetPollFrequencyResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SetPollFrequencyResponse::ByteSizeLong() const {
          const SetPollFrequencyResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xtcp_config.v1.SetPollFrequencyResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .xtcp_config.v1.XtcpConfig config = 1 [json_name = "config"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.config_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SetPollFrequencyResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SetPollFrequencyResponse*>(&to_msg);
  auto& from = static_cast<const SetPollFrequencyResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xtcp_config.v1.SetPollFrequencyResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.config_ != nullptr);
    if (_this->_impl_.config_ == nullptr) {
      _this->_impl_.config_ =
          ::google::protobuf::Message::CopyConstruct<::xtcp_config::v1::XtcpConfig>(arena, *from._impl_.config_);
    } else {
      _this->_impl_.config_->MergeFrom(*from._impl_.config_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetPollFrequencyResponse::CopyFrom(const SetPollFrequencyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xtcp_config.v1.SetPollFrequencyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SetPollFrequencyResponse::InternalSwap(SetPollFrequencyResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.config_, other->_impl_.config_);
}

::google::protobuf::Metadata SetPollFrequencyResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class XtcpConfig::_Internal {
 public:
  using HasBits =
      decltype(std::declval<XtcpConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_._has_bits_);
};

void XtcpConfig::clear_poll_frequency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.poll_frequency_ != nullptr) _impl_.poll_frequency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void XtcpConfig::clear_poll_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.poll_timeout_ != nullptr) _impl_.poll_timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void XtcpConfig::clear_kafka_produce_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kafka_produce_timeout_ != nullptr) _impl_.kafka_produce_timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
XtcpConfig::XtcpConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xtcp_config.v1.XtcpConfig)
}
inline PROTOBUF_NDEBUG_INLINE XtcpConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xtcp_config::v1::XtcpConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        capture_path_(arena, from.capture_path_),
        marshal_to_(arena, from.marshal_to_),
        dest_(arena, from.dest_),
        topic_(arena, from.topic_),
        xtcp_proto_file_(arena, from.xtcp_proto_file_),
        kafka_schema_url_(arena, from.kafka_schema_url_),
        label_(arena, from.label_),
        tag_(arena, from.tag_) {}

XtcpConfig::XtcpConfig(
    ::google::protobuf::Arena* arena,
    const XtcpConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  XtcpConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.poll_frequency_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.poll_frequency_)
                        : nullptr;
  _impl_.poll_timeout_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.poll_timeout_)
                        : nullptr;
  _impl_.kafka_produce_timeout_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.kafka_produce_timeout_)
                        : nullptr;
  _impl_.enabled_deserializers_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::xtcp_config::v1::EnabledDeserializers>(
                              arena, *from._impl_.enabled_deserializers_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, nl_timeout_milliseconds_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, nl_timeout_milliseconds_),
           offsetof(Impl_, grpc_port_) -
               offsetof(Impl_, nl_timeout_milliseconds_) +
               sizeof(Impl_::grpc_port_));

  // @@protoc_insertion_point(copy_constructor:xtcp_config.v1.XtcpConfig)
}
inline PROTOBUF_NDEBUG_INLINE XtcpConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        capture_path_(arena),
        marshal_to_(arena),
        dest_(arena),
        topic_(arena),
        xtcp_proto_file_(arena),
        kafka_schema_url_(arena),
        label_(arena),
        tag_(arena) {}

inline void XtcpConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, poll_frequency_),
           0,
           offsetof(Impl_, grpc_port_) -
               offsetof(Impl_, poll_frequency_) +
               sizeof(Impl_::grpc_port_));
}
XtcpConfig::~XtcpConfig() {
  // @@protoc_insertion_point(destructor:xtcp_config.v1.XtcpConfig)
  SharedDtor(*this);
}
inline void XtcpConfig::SharedDtor(MessageLite& self) {
  XtcpConfig& this_ = static_cast<XtcpConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.capture_path_.Destroy();
  this_._impl_.marshal_to_.Destroy();
  this_._impl_.dest_.Destroy();
  this_._impl_.topic_.Destroy();
  this_._impl_.xtcp_proto_file_.Destroy();
  this_._impl_.kafka_schema_url_.Destroy();
  this_._impl_.label_.Destroy();
  this_._impl_.tag_.Destroy();
  delete this_._impl_.poll_frequency_;
  delete this_._impl_.poll_timeout_;
  delete this_._impl_.kafka_produce_timeout_;
  delete this_._impl_.enabled_deserializers_;
  this_._impl_.~Impl_();
}

inline void* XtcpConfig::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) XtcpConfig(arena);
}
constexpr auto XtcpConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(XtcpConfig),
                                            alignof(XtcpConfig));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull XtcpConfig::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_XtcpConfig_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &XtcpConfig::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<XtcpConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &XtcpConfig::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<XtcpConfig>(), &XtcpConfig::ByteSizeLong,
            &XtcpConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_._cached_size_),
        false,
    },
    &XtcpConfig::kDescriptorMethods,
    &descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* XtcpConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 25, 4, 128, 27> XtcpConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_._has_bits_),
    0, // no _extensions_
    200, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3757571583,  // skipmap
    offsetof(decltype(_table_), field_entries),
    25,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xtcp_config::v1::XtcpConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 nl_timeout_milliseconds = 10 [json_name = "nlTimeoutMilliseconds", (.buf.validate.field) = {
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(XtcpConfig, _impl_.nl_timeout_milliseconds_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.nl_timeout_milliseconds_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 packet_size_mply = 80 [json_name = "packetSizeMply", (.buf.validate.field) = {
    {::_pbi::TcParser::FastV32S2,
     {1408, 63, 0, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.packet_size_mply_)}},
    // string kafka_schema_url = 145 [json_name = "kafkaSchemaUrl", (.buf.validate.field) = {
    {::_pbi::TcParser::FastUS2,
     {2442, 63, 0, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.kafka_schema_url_)}},
    // uint32 netlinkers = 50 [json_name = "netlinkers", (.buf.validate.field) = {
    {::_pbi::TcParser::FastV32S2,
     {912, 63, 0, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.netlinkers_)}},
    // uint32 netlinkers_done_chan_size = 51 [json_name = "netlinkersDoneChanSize", (.buf.validate.field) = {
    {::_pbi::TcParser::FastV32S2,
     {920, 63, 0, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.netlinkers_done_chan_size_)}},
    // .google.protobuf.Duration poll_frequency = 20 [json_name = "pollFrequency", (.buf.validate.field) = {
    {::_pbi::TcParser::FastMtS2,
     {418, 0, 0, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.poll_frequency_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 packet_size = 70 [json_name = "packetSize", (.buf.validate.field) = {
    {::_pbi::TcParser::FastV64S2,
     {1200, 63, 0, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.packet_size_)}},
    // uint32 dest_write_files = 135 [json_name = "destWriteFiles", (.buf.validate.field) = {
    {::_pbi::TcParser::FastV32S2,
     {2232, 63, 0, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.dest_write_files_)}},
    // uint64 max_loops = 40 [json_name = "maxLoops", (.buf.validate.field) = {
    {::_pbi::TcParser::FastV64S2,
     {704, 63, 0, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.max_loops_)}},
    // bool protobuf_list_length_delimit = 121 [json_name = "protobufListLengthDelimit", (.buf.validate.field) = {
    {::_pbi::TcParser::FastV8S2,
     {1992, 63, 0, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.protobuf_list_length_delimit_)}},
    // uint32 write_files = 90 [json_name = "writeFiles", (.buf.validate.field) = {
    {::_pbi::TcParser::FastV32S2,
     {1488, 63, 0, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.write_files_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 nlmsg_seq = 60 [json_name = "nlmsgSeq", (.buf.validate.field) = {
    {::_pbi::TcParser::FastV32S2,
     {992, 63, 0, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.nlmsg_seq_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Duration poll_timeout = 30 [json_name = "pollTimeout", (.buf.validate.field) = {
    {::_pbi::TcParser::FastMtS2,
     {498, 1, 1, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.poll_timeout_)}},
    // string xtcp_proto_file = 143 [json_name = "xtcpProtoFile", (.buf.validate.field) = {
    {::_pbi::TcParser::FastUS2,
     {2298, 63, 0, PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.xtcp_proto_file_)}},
  }}, {{
    40, 0, 11,
    62462, 3, 49135, 6, 65279, 8, 61435, 9, 65471, 11, 31740, 12,
    48495, 16, 65279, 20, 61435, 21, 65471, 23, 65534, 24,
    65535, 65535
  }}, {{
    // uint64 nl_timeout_milliseconds = 10 [json_name = "nlTimeoutMilliseconds", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.nl_timeout_milliseconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .google.protobuf.Duration poll_frequency = 20 [json_name = "pollFrequency", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.poll_frequency_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Duration poll_timeout = 30 [json_name = "pollTimeout", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.poll_timeout_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint64 max_loops = 40 [json_name = "maxLoops", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.max_loops_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint32 netlinkers = 50 [json_name = "netlinkers", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.netlinkers_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 netlinkers_done_chan_size = 51 [json_name = "netlinkersDoneChanSize", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.netlinkers_done_chan_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 nlmsg_seq = 60 [json_name = "nlmsgSeq", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.nlmsg_seq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint64 packet_size = 70 [json_name = "packetSize", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.packet_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint32 packet_size_mply = 80 [json_name = "packetSizeMply", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.packet_size_mply_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 write_files = 90 [json_name = "writeFiles", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.write_files_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string capture_path = 100 [json_name = "capturePath", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.capture_path_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 modulus = 110 [json_name = "modulus", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.modulus_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // string marshal_to = 120 [json_name = "marshalTo", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.marshal_to_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool protobuf_list_length_delimit = 121 [json_name = "protobufListLengthDelimit", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.protobuf_list_length_delimit_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string dest = 130 [json_name = "dest", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.dest_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 dest_write_files = 135 [json_name = "destWriteFiles", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.dest_write_files_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string topic = 140 [json_name = "topic", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.topic_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string xtcp_proto_file = 143 [json_name = "xtcpProtoFile", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.xtcp_proto_file_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string kafka_schema_url = 145 [json_name = "kafkaSchemaUrl", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.kafka_schema_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Duration kafka_produce_timeout = 150 [json_name = "kafkaProduceTimeout", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.kafka_produce_timeout_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 debug_level = 160 [json_name = "debugLevel", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.debug_level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string label = 170 [json_name = "label", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.label_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string tag = 180 [json_name = "tag", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.tag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 grpc_port = 190 [json_name = "grpcPort", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.grpc_port_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .xtcp_config.v1.EnabledDeserializers enabled_deserializers = 200 [json_name = "enabledDeserializers", (.buf.validate.field) = {
    {PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.enabled_deserializers_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::xtcp_config::v1::EnabledDeserializers>()},
  }}, {{
    "\31\0\0\0\0\0\0\0\0\0\0\14\0\12\0\4\0\5\17\20\0\0\5\3\0\0\0\0\0\0\0\0"
    "xtcp_config.v1.XtcpConfig"
    "capture_path"
    "marshal_to"
    "dest"
    "topic"
    "xtcp_proto_file"
    "kafka_schema_url"
    "label"
    "tag"
  }},
};

PROTOBUF_NOINLINE void XtcpConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:xtcp_config.v1.XtcpConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.capture_path_.ClearToEmpty();
  _impl_.marshal_to_.ClearToEmpty();
  _impl_.dest_.ClearToEmpty();
  _impl_.topic_.ClearToEmpty();
  _impl_.xtcp_proto_file_.ClearToEmpty();
  _impl_.kafka_schema_url_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  _impl_.tag_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.poll_frequency_ != nullptr);
      _impl_.poll_frequency_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.poll_timeout_ != nullptr);
      _impl_.poll_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.kafka_produce_timeout_ != nullptr);
      _impl_.kafka_produce_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.enabled_deserializers_ != nullptr);
      _impl_.enabled_deserializers_->Clear();
    }
  }
  ::memset(&_impl_.nl_timeout_milliseconds_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.grpc_port_) -
      reinterpret_cast<char*>(&_impl_.nl_timeout_milliseconds_)) + sizeof(_impl_.grpc_port_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* XtcpConfig::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const XtcpConfig& this_ = static_cast<const XtcpConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* XtcpConfig::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const XtcpConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xtcp_config.v1.XtcpConfig)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 nl_timeout_milliseconds = 10 [json_name = "nlTimeoutMilliseconds", (.buf.validate.field) = {
          if (this_._internal_nl_timeout_milliseconds() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                10, this_._internal_nl_timeout_milliseconds(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Duration poll_frequency = 20 [json_name = "pollFrequency", (.buf.validate.field) = {
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                20, *this_._impl_.poll_frequency_, this_._impl_.poll_frequency_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Duration poll_timeout = 30 [json_name = "pollTimeout", (.buf.validate.field) = {
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                30, *this_._impl_.poll_timeout_, this_._impl_.poll_timeout_->GetCachedSize(), target,
                stream);
          }

          // uint64 max_loops = 40 [json_name = "maxLoops", (.buf.validate.field) = {
          if (this_._internal_max_loops() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                40, this_._internal_max_loops(), target);
          }

          // uint32 netlinkers = 50 [json_name = "netlinkers", (.buf.validate.field) = {
          if (this_._internal_netlinkers() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                50, this_._internal_netlinkers(), target);
          }

          // uint32 netlinkers_done_chan_size = 51 [json_name = "netlinkersDoneChanSize", (.buf.validate.field) = {
          if (this_._internal_netlinkers_done_chan_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                51, this_._internal_netlinkers_done_chan_size(), target);
          }

          // uint32 nlmsg_seq = 60 [json_name = "nlmsgSeq", (.buf.validate.field) = {
          if (this_._internal_nlmsg_seq() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                60, this_._internal_nlmsg_seq(), target);
          }

          // uint64 packet_size = 70 [json_name = "packetSize", (.buf.validate.field) = {
          if (this_._internal_packet_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                70, this_._internal_packet_size(), target);
          }

          // uint32 packet_size_mply = 80 [json_name = "packetSizeMply", (.buf.validate.field) = {
          if (this_._internal_packet_size_mply() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                80, this_._internal_packet_size_mply(), target);
          }

          // uint32 write_files = 90 [json_name = "writeFiles", (.buf.validate.field) = {
          if (this_._internal_write_files() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                90, this_._internal_write_files(), target);
          }

          // string capture_path = 100 [json_name = "capturePath", (.buf.validate.field) = {
          if (!this_._internal_capture_path().empty()) {
            const std::string& _s = this_._internal_capture_path();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xtcp_config.v1.XtcpConfig.capture_path");
            target = stream->WriteStringMaybeAliased(100, _s, target);
          }

          // uint64 modulus = 110 [json_name = "modulus", (.buf.validate.field) = {
          if (this_._internal_modulus() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                110, this_._internal_modulus(), target);
          }

          // string marshal_to = 120 [json_name = "marshalTo", (.buf.validate.field) = {
          if (!this_._internal_marshal_to().empty()) {
            const std::string& _s = this_._internal_marshal_to();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xtcp_config.v1.XtcpConfig.marshal_to");
            target = stream->WriteStringMaybeAliased(120, _s, target);
          }

          // bool protobuf_list_length_delimit = 121 [json_name = "protobufListLengthDelimit", (.buf.validate.field) = {
          if (this_._internal_protobuf_list_length_delimit() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                121, this_._internal_protobuf_list_length_delimit(), target);
          }

          // string dest = 130 [json_name = "dest", (.buf.validate.field) = {
          if (!this_._internal_dest().empty()) {
            const std::string& _s = this_._internal_dest();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xtcp_config.v1.XtcpConfig.dest");
            target = stream->WriteStringMaybeAliased(130, _s, target);
          }

          // uint32 dest_write_files = 135 [json_name = "destWriteFiles", (.buf.validate.field) = {
          if (this_._internal_dest_write_files() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                135, this_._internal_dest_write_files(), target);
          }

          // string topic = 140 [json_name = "topic", (.buf.validate.field) = {
          if (!this_._internal_topic().empty()) {
            const std::string& _s = this_._internal_topic();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xtcp_config.v1.XtcpConfig.topic");
            target = stream->WriteStringMaybeAliased(140, _s, target);
          }

          // string xtcp_proto_file = 143 [json_name = "xtcpProtoFile", (.buf.validate.field) = {
          if (!this_._internal_xtcp_proto_file().empty()) {
            const std::string& _s = this_._internal_xtcp_proto_file();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xtcp_config.v1.XtcpConfig.xtcp_proto_file");
            target = stream->WriteStringMaybeAliased(143, _s, target);
          }

          // string kafka_schema_url = 145 [json_name = "kafkaSchemaUrl", (.buf.validate.field) = {
          if (!this_._internal_kafka_schema_url().empty()) {
            const std::string& _s = this_._internal_kafka_schema_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xtcp_config.v1.XtcpConfig.kafka_schema_url");
            target = stream->WriteStringMaybeAliased(145, _s, target);
          }

          // .google.protobuf.Duration kafka_produce_timeout = 150 [json_name = "kafkaProduceTimeout", (.buf.validate.field) = {
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                150, *this_._impl_.kafka_produce_timeout_, this_._impl_.kafka_produce_timeout_->GetCachedSize(), target,
                stream);
          }

          // uint32 debug_level = 160 [json_name = "debugLevel", (.buf.validate.field) = {
          if (this_._internal_debug_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                160, this_._internal_debug_level(), target);
          }

          // string label = 170 [json_name = "label", (.buf.validate.field) = {
          if (!this_._internal_label().empty()) {
            const std::string& _s = this_._internal_label();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xtcp_config.v1.XtcpConfig.label");
            target = stream->WriteStringMaybeAliased(170, _s, target);
          }

          // string tag = 180 [json_name = "tag", (.buf.validate.field) = {
          if (!this_._internal_tag().empty()) {
            const std::string& _s = this_._internal_tag();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xtcp_config.v1.XtcpConfig.tag");
            target = stream->WriteStringMaybeAliased(180, _s, target);
          }

          // uint32 grpc_port = 190 [json_name = "grpcPort", (.buf.validate.field) = {
          if (this_._internal_grpc_port() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                190, this_._internal_grpc_port(), target);
          }

          // .xtcp_config.v1.EnabledDeserializers enabled_deserializers = 200 [json_name = "enabledDeserializers", (.buf.validate.field) = {
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                200, *this_._impl_.enabled_deserializers_, this_._impl_.enabled_deserializers_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xtcp_config.v1.XtcpConfig)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t XtcpConfig::ByteSizeLong(const MessageLite& base) {
          const XtcpConfig& this_ = static_cast<const XtcpConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t XtcpConfig::ByteSizeLong() const {
          const XtcpConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xtcp_config.v1.XtcpConfig)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string capture_path = 100 [json_name = "capturePath", (.buf.validate.field) = {
            if (!this_._internal_capture_path().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_capture_path());
            }
            // string marshal_to = 120 [json_name = "marshalTo", (.buf.validate.field) = {
            if (!this_._internal_marshal_to().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_marshal_to());
            }
            // string dest = 130 [json_name = "dest", (.buf.validate.field) = {
            if (!this_._internal_dest().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_dest());
            }
            // string topic = 140 [json_name = "topic", (.buf.validate.field) = {
            if (!this_._internal_topic().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_topic());
            }
            // string xtcp_proto_file = 143 [json_name = "xtcpProtoFile", (.buf.validate.field) = {
            if (!this_._internal_xtcp_proto_file().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_xtcp_proto_file());
            }
            // string kafka_schema_url = 145 [json_name = "kafkaSchemaUrl", (.buf.validate.field) = {
            if (!this_._internal_kafka_schema_url().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_kafka_schema_url());
            }
            // string label = 170 [json_name = "label", (.buf.validate.field) = {
            if (!this_._internal_label().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_label());
            }
            // string tag = 180 [json_name = "tag", (.buf.validate.field) = {
            if (!this_._internal_tag().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_tag());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000000fu) {
            // .google.protobuf.Duration poll_frequency = 20 [json_name = "pollFrequency", (.buf.validate.field) = {
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.poll_frequency_);
            }
            // .google.protobuf.Duration poll_timeout = 30 [json_name = "pollTimeout", (.buf.validate.field) = {
            if (cached_has_bits & 0x00000002u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.poll_timeout_);
            }
            // .google.protobuf.Duration kafka_produce_timeout = 150 [json_name = "kafkaProduceTimeout", (.buf.validate.field) = {
            if (cached_has_bits & 0x00000004u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kafka_produce_timeout_);
            }
            // .xtcp_config.v1.EnabledDeserializers enabled_deserializers = 200 [json_name = "enabledDeserializers", (.buf.validate.field) = {
            if (cached_has_bits & 0x00000008u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.enabled_deserializers_);
            }
          }
           {
            // uint64 nl_timeout_milliseconds = 10 [json_name = "nlTimeoutMilliseconds", (.buf.validate.field) = {
            if (this_._internal_nl_timeout_milliseconds() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_nl_timeout_milliseconds());
            }
            // uint64 max_loops = 40 [json_name = "maxLoops", (.buf.validate.field) = {
            if (this_._internal_max_loops() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                              this_._internal_max_loops());
            }
            // uint32 netlinkers = 50 [json_name = "netlinkers", (.buf.validate.field) = {
            if (this_._internal_netlinkers() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_netlinkers());
            }
            // uint32 netlinkers_done_chan_size = 51 [json_name = "netlinkersDoneChanSize", (.buf.validate.field) = {
            if (this_._internal_netlinkers_done_chan_size() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_netlinkers_done_chan_size());
            }
            // uint64 packet_size = 70 [json_name = "packetSize", (.buf.validate.field) = {
            if (this_._internal_packet_size() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                              this_._internal_packet_size());
            }
            // uint32 nlmsg_seq = 60 [json_name = "nlmsgSeq", (.buf.validate.field) = {
            if (this_._internal_nlmsg_seq() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_nlmsg_seq());
            }
            // uint32 packet_size_mply = 80 [json_name = "packetSizeMply", (.buf.validate.field) = {
            if (this_._internal_packet_size_mply() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_packet_size_mply());
            }
            // uint32 write_files = 90 [json_name = "writeFiles", (.buf.validate.field) = {
            if (this_._internal_write_files() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_write_files());
            }
            // bool protobuf_list_length_delimit = 121 [json_name = "protobufListLengthDelimit", (.buf.validate.field) = {
            if (this_._internal_protobuf_list_length_delimit() != 0) {
              total_size += 3;
            }
            // uint64 modulus = 110 [json_name = "modulus", (.buf.validate.field) = {
            if (this_._internal_modulus() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                              this_._internal_modulus());
            }
            // uint32 dest_write_files = 135 [json_name = "destWriteFiles", (.buf.validate.field) = {
            if (this_._internal_dest_write_files() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_dest_write_files());
            }
            // uint32 debug_level = 160 [json_name = "debugLevel", (.buf.validate.field) = {
            if (this_._internal_debug_level() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_debug_level());
            }
            // uint32 grpc_port = 190 [json_name = "grpcPort", (.buf.validate.field) = {
            if (this_._internal_grpc_port() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_grpc_port());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void XtcpConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<XtcpConfig*>(&to_msg);
  auto& from = static_cast<const XtcpConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:xtcp_config.v1.XtcpConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_capture_path().empty()) {
    _this->_internal_set_capture_path(from._internal_capture_path());
  }
  if (!from._internal_marshal_to().empty()) {
    _this->_internal_set_marshal_to(from._internal_marshal_to());
  }
  if (!from._internal_dest().empty()) {
    _this->_internal_set_dest(from._internal_dest());
  }
  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  if (!from._internal_xtcp_proto_file().empty()) {
    _this->_internal_set_xtcp_proto_file(from._internal_xtcp_proto_file());
  }
  if (!from._internal_kafka_schema_url().empty()) {
    _this->_internal_set_kafka_schema_url(from._internal_kafka_schema_url());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.poll_frequency_ != nullptr);
      if (_this->_impl_.poll_frequency_ == nullptr) {
        _this->_impl_.poll_frequency_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.poll_frequency_);
      } else {
        _this->_impl_.poll_frequency_->MergeFrom(*from._impl_.poll_frequency_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.poll_timeout_ != nullptr);
      if (_this->_impl_.poll_timeout_ == nullptr) {
        _this->_impl_.poll_timeout_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.poll_timeout_);
      } else {
        _this->_impl_.poll_timeout_->MergeFrom(*from._impl_.poll_timeout_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.kafka_produce_timeout_ != nullptr);
      if (_this->_impl_.kafka_produce_timeout_ == nullptr) {
        _this->_impl_.kafka_produce_timeout_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.kafka_produce_timeout_);
      } else {
        _this->_impl_.kafka_produce_timeout_->MergeFrom(*from._impl_.kafka_produce_timeout_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.enabled_deserializers_ != nullptr);
      if (_this->_impl_.enabled_deserializers_ == nullptr) {
        _this->_impl_.enabled_deserializers_ =
            ::google::protobuf::Message::CopyConstruct<::xtcp_config::v1::EnabledDeserializers>(arena, *from._impl_.enabled_deserializers_);
      } else {
        _this->_impl_.enabled_deserializers_->MergeFrom(*from._impl_.enabled_deserializers_);
      }
    }
  }
  if (from._internal_nl_timeout_milliseconds() != 0) {
    _this->_impl_.nl_timeout_milliseconds_ = from._impl_.nl_timeout_milliseconds_;
  }
  if (from._internal_max_loops() != 0) {
    _this->_impl_.max_loops_ = from._impl_.max_loops_;
  }
  if (from._internal_netlinkers() != 0) {
    _this->_impl_.netlinkers_ = from._impl_.netlinkers_;
  }
  if (from._internal_netlinkers_done_chan_size() != 0) {
    _this->_impl_.netlinkers_done_chan_size_ = from._impl_.netlinkers_done_chan_size_;
  }
  if (from._internal_packet_size() != 0) {
    _this->_impl_.packet_size_ = from._impl_.packet_size_;
  }
  if (from._internal_nlmsg_seq() != 0) {
    _this->_impl_.nlmsg_seq_ = from._impl_.nlmsg_seq_;
  }
  if (from._internal_packet_size_mply() != 0) {
    _this->_impl_.packet_size_mply_ = from._impl_.packet_size_mply_;
  }
  if (from._internal_write_files() != 0) {
    _this->_impl_.write_files_ = from._impl_.write_files_;
  }
  if (from._internal_protobuf_list_length_delimit() != 0) {
    _this->_impl_.protobuf_list_length_delimit_ = from._impl_.protobuf_list_length_delimit_;
  }
  if (from._internal_modulus() != 0) {
    _this->_impl_.modulus_ = from._impl_.modulus_;
  }
  if (from._internal_dest_write_files() != 0) {
    _this->_impl_.dest_write_files_ = from._impl_.dest_write_files_;
  }
  if (from._internal_debug_level() != 0) {
    _this->_impl_.debug_level_ = from._impl_.debug_level_;
  }
  if (from._internal_grpc_port() != 0) {
    _this->_impl_.grpc_port_ = from._impl_.grpc_port_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void XtcpConfig::CopyFrom(const XtcpConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xtcp_config.v1.XtcpConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void XtcpConfig::InternalSwap(XtcpConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.capture_path_, &other->_impl_.capture_path_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.marshal_to_, &other->_impl_.marshal_to_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dest_, &other->_impl_.dest_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_, &other->_impl_.topic_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xtcp_proto_file_, &other->_impl_.xtcp_proto_file_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.kafka_schema_url_, &other->_impl_.kafka_schema_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, &other->_impl_.label_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, &other->_impl_.tag_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.grpc_port_)
      + sizeof(XtcpConfig::_impl_.grpc_port_)
      - PROTOBUF_FIELD_OFFSET(XtcpConfig, _impl_.poll_frequency_)>(
          reinterpret_cast<char*>(&_impl_.poll_frequency_),
          reinterpret_cast<char*>(&other->_impl_.poll_frequency_));
}

::google::protobuf::Metadata XtcpConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              EnabledDeserializers_EnabledEntry_DoNotUse::EnabledDeserializers_EnabledEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              EnabledDeserializers_EnabledEntry_DoNotUse::EnabledDeserializers_EnabledEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              EnabledDeserializers_EnabledEntry_DoNotUse::EnabledDeserializers_EnabledEntry_DoNotUse() : SuperType() {}
              EnabledDeserializers_EnabledEntry_DoNotUse::EnabledDeserializers_EnabledEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* EnabledDeserializers_EnabledEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) EnabledDeserializers_EnabledEntry_DoNotUse(arena);
              }
              constexpr auto EnabledDeserializers_EnabledEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(EnabledDeserializers_EnabledEntry_DoNotUse),
                                                          alignof(EnabledDeserializers_EnabledEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull EnabledDeserializers_EnabledEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_EnabledDeserializers_EnabledEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &EnabledDeserializers_EnabledEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<EnabledDeserializers_EnabledEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &EnabledDeserializers_EnabledEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &EnabledDeserializers_EnabledEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(EnabledDeserializers_EnabledEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &EnabledDeserializers_EnabledEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* EnabledDeserializers_EnabledEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 60, 2> EnabledDeserializers_EnabledEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EnabledDeserializers_EnabledEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xtcp_config::v1::EnabledDeserializers_EnabledEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool value = 2 [json_name = "value"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EnabledDeserializers_EnabledEntry_DoNotUse, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(EnabledDeserializers_EnabledEntry_DoNotUse, _impl_.value_)}},
    // string key = 1 [json_name = "key"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EnabledDeserializers_EnabledEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1 [json_name = "key"];
    {PROTOBUF_FIELD_OFFSET(EnabledDeserializers_EnabledEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool value = 2 [json_name = "value"];
    {PROTOBUF_FIELD_OFFSET(EnabledDeserializers_EnabledEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\60\3\0\0\0\0\0\0"
    "xtcp_config.v1.EnabledDeserializers.EnabledEntry"
    "key"
  }},
};

// ===================================================================

class EnabledDeserializers::_Internal {
 public:
};

EnabledDeserializers::EnabledDeserializers(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:xtcp_config.v1.EnabledDeserializers)
}
inline PROTOBUF_NDEBUG_INLINE EnabledDeserializers::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::xtcp_config::v1::EnabledDeserializers& from_msg)
      : enabled_{visibility, arena, from.enabled_},
        _cached_size_{0} {}

EnabledDeserializers::EnabledDeserializers(
    ::google::protobuf::Arena* arena,
    const EnabledDeserializers& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EnabledDeserializers* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:xtcp_config.v1.EnabledDeserializers)
}
inline PROTOBUF_NDEBUG_INLINE EnabledDeserializers::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : enabled_{visibility, arena},
        _cached_size_{0} {}

inline void EnabledDeserializers::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EnabledDeserializers::~EnabledDeserializers() {
  // @@protoc_insertion_point(destructor:xtcp_config.v1.EnabledDeserializers)
  SharedDtor(*this);
}
inline void EnabledDeserializers::SharedDtor(MessageLite& self) {
  EnabledDeserializers& this_ = static_cast<EnabledDeserializers&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* EnabledDeserializers::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EnabledDeserializers(arena);
}
constexpr auto EnabledDeserializers::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(EnabledDeserializers, _impl_.enabled_) +
          decltype(EnabledDeserializers::_impl_.enabled_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(EnabledDeserializers, _impl_.enabled_) +
          decltype(EnabledDeserializers::_impl_.enabled_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(EnabledDeserializers), alignof(EnabledDeserializers), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&EnabledDeserializers::PlacementNew_,
                                 sizeof(EnabledDeserializers),
                                 alignof(EnabledDeserializers));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EnabledDeserializers::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EnabledDeserializers_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EnabledDeserializers::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EnabledDeserializers>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EnabledDeserializers::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EnabledDeserializers>(), &EnabledDeserializers::ByteSizeLong,
            &EnabledDeserializers::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EnabledDeserializers, _impl_._cached_size_),
        false,
    },
    &EnabledDeserializers::kDescriptorMethods,
    &descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EnabledDeserializers::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 51, 2> EnabledDeserializers::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::xtcp_config::v1::EnabledDeserializers>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // map<string, bool> enabled = 1 [json_name = "enabled"];
    {PROTOBUF_FIELD_OFFSET(EnabledDeserializers, _impl_.enabled_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(EnabledDeserializers()._impl_.enabled_)>(
        1, 0, 0, 9,
        8)},
  }}, {{
    "\43\7\0\0\0\0\0\0"
    "xtcp_config.v1.EnabledDeserializers"
    "enabled"
  }},
};

PROTOBUF_NOINLINE void EnabledDeserializers::Clear() {
// @@protoc_insertion_point(message_clear_start:xtcp_config.v1.EnabledDeserializers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enabled_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EnabledDeserializers::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EnabledDeserializers& this_ = static_cast<const EnabledDeserializers&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EnabledDeserializers::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EnabledDeserializers& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:xtcp_config.v1.EnabledDeserializers)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // map<string, bool> enabled = 1 [json_name = "enabled"];
          if (!this_._internal_enabled().empty()) {
            using MapType = ::google::protobuf::Map<std::string, bool>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, bool,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_BOOL>;
            const auto& field = this_._internal_enabled();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    1, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xtcp_config.v1.EnabledDeserializers.enabled");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    1, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "xtcp_config.v1.EnabledDeserializers.enabled");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:xtcp_config.v1.EnabledDeserializers)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EnabledDeserializers::ByteSizeLong(const MessageLite& base) {
          const EnabledDeserializers& this_ = static_cast<const EnabledDeserializers&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EnabledDeserializers::ByteSizeLong() const {
          const EnabledDeserializers& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:xtcp_config.v1.EnabledDeserializers)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, bool> enabled = 1 [json_name = "enabled"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_enabled_size());
              for (const auto& entry : this_._internal_enabled()) {
                total_size += _pbi::MapEntryFuncs<std::string, bool,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_BOOL>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EnabledDeserializers::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EnabledDeserializers*>(&to_msg);
  auto& from = static_cast<const EnabledDeserializers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:xtcp_config.v1.EnabledDeserializers)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enabled_.MergeFrom(from._impl_.enabled_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EnabledDeserializers::CopyFrom(const EnabledDeserializers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xtcp_config.v1.EnabledDeserializers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EnabledDeserializers::InternalSwap(EnabledDeserializers* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.enabled_.InternalSwap(&other->_impl_.enabled_);
}

::google::protobuf::Metadata EnabledDeserializers::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace xtcp_config
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_xtcp_5fconfig_2fv1_2fxtcp_5fconfig_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
