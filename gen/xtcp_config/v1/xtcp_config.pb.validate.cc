// Code generated by protoc-gen-validate
// source: xtcp_config/v1/xtcp_config.proto
// DO NOT EDIT!!!

#include "xtcp_config/v1/xtcp_config.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::xtcp_config::v1::GetRequest> validator___xtcp_config__v1__GetRequest(static_cast<bool(*)(const ::xtcp_config::v1::GetRequest&, pgv::ValidationMsg*)>(::xtcp_config::v1::Validate));
pgv::Validator<::xtcp_config::v1::GetResponse> validator___xtcp_config__v1__GetResponse(static_cast<bool(*)(const ::xtcp_config::v1::GetResponse&, pgv::ValidationMsg*)>(::xtcp_config::v1::Validate));
pgv::Validator<::xtcp_config::v1::SetRequest> validator___xtcp_config__v1__SetRequest(static_cast<bool(*)(const ::xtcp_config::v1::SetRequest&, pgv::ValidationMsg*)>(::xtcp_config::v1::Validate));
pgv::Validator<::xtcp_config::v1::SetResponse> validator___xtcp_config__v1__SetResponse(static_cast<bool(*)(const ::xtcp_config::v1::SetResponse&, pgv::ValidationMsg*)>(::xtcp_config::v1::Validate));
pgv::Validator<::xtcp_config::v1::SetPollFrequencyRequest> validator___xtcp_config__v1__SetPollFrequencyRequest(static_cast<bool(*)(const ::xtcp_config::v1::SetPollFrequencyRequest&, pgv::ValidationMsg*)>(::xtcp_config::v1::Validate));
pgv::Validator<::xtcp_config::v1::SetPollFrequencyResponse> validator___xtcp_config__v1__SetPollFrequencyResponse(static_cast<bool(*)(const ::xtcp_config::v1::SetPollFrequencyResponse&, pgv::ValidationMsg*)>(::xtcp_config::v1::Validate));
pgv::Validator<::xtcp_config::v1::XtcpConfig> validator___xtcp_config__v1__XtcpConfig(static_cast<bool(*)(const ::xtcp_config::v1::XtcpConfig&, pgv::ValidationMsg*)>(::xtcp_config::v1::Validate));
pgv::Validator<::xtcp_config::v1::EnabledDeserializers> validator___xtcp_config__v1__EnabledDeserializers(static_cast<bool(*)(const ::xtcp_config::v1::EnabledDeserializers&, pgv::ValidationMsg*)>(::xtcp_config::v1::Validate));


} // namespace validate
} // namespace pgv


namespace xtcp_config {
namespace v1 {


// Validate checks the field values on ::xtcp_config::v1::GetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.


bool Validate(const ::xtcp_config::v1::GetRequest& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
		
	return true;
}

// Validate checks the field values on ::xtcp_config::v1::GetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	



bool Validate(const ::xtcp_config::v1::GetResponse& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_config() && !pgv::BaseValidator::AbstractCheckMessage(m.config(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "GetResponseValidationError" << "." << "Config";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

		
	return true;
}

// Validate checks the field values on ::xtcp_config::v1::SetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	



bool Validate(const ::xtcp_config::v1::SetRequest& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_config() && !pgv::BaseValidator::AbstractCheckMessage(m.config(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "SetRequestValidationError" << "." << "Config";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

		
	return true;
}

// Validate checks the field values on ::xtcp_config::v1::SetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	



bool Validate(const ::xtcp_config::v1::SetResponse& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_config() && !pgv::BaseValidator::AbstractCheckMessage(m.config(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "SetResponseValidationError" << "." << "Config";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

		
	return true;
}

// Validate checks the field values on
// ::xtcp_config::v1::SetPollFrequencyRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the return
// value is false and an error message is written to the input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::xtcp_config::v1::SetPollFrequencyRequest& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_poll_frequency() && !pgv::BaseValidator::AbstractCheckMessage(m.poll_frequency(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "SetPollFrequencyRequestValidationError" << "." << "PollFrequency";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_poll_timeout() && !pgv::BaseValidator::AbstractCheckMessage(m.poll_timeout(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "SetPollFrequencyRequestValidationError" << "." << "PollTimeout";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

		
	return true;
}

// Validate checks the field values on
// ::xtcp_config::v1::SetPollFrequencyResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the return
// value is false and an error message is written to the input string argument.

	

	

	

	

        

	

	

	



bool Validate(const ::xtcp_config::v1::SetPollFrequencyResponse& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_config() && !pgv::BaseValidator::AbstractCheckMessage(m.config(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "SetPollFrequencyResponseValidationError" << "." << "Config";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

		
	return true;
}

// Validate checks the field values on ::xtcp_config::v1::XtcpConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the return value is false and an error message is written to the
// input string argument.

	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	


	

	

	

	

        

	

	

	



bool Validate(const ::xtcp_config::v1::XtcpConfig& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;// no validation rules for nl_timeout_milliseconds
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_poll_frequency() && !pgv::BaseValidator::AbstractCheckMessage(m.poll_frequency(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "XtcpConfigValidationError" << "." << "PollFrequency";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_poll_timeout() && !pgv::BaseValidator::AbstractCheckMessage(m.poll_timeout(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "XtcpConfigValidationError" << "." << "PollTimeout";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	
// no validation rules for max_loops// no validation rules for netlinkers// no validation rules for netlinkers_done_chan_size// no validation rules for nlmsg_seq// no validation rules for packet_size// no validation rules for packet_size_mply// no validation rules for write_files// no validation rules for capture_path// no validation rules for modulus// no validation rules for marshal_to// no validation rules for dest// no validation rules for dest_write_files// no validation rules for topic
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_kafka_produce_timeout() && !pgv::BaseValidator::AbstractCheckMessage(m.kafka_produce_timeout(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "XtcpConfigValidationError" << "." << "KafkaProduceTimeout";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	
// no validation rules for debug_level// no validation rules for label// no validation rules for tag// no validation rules for grpc_port
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_enabled_deserializers() && !pgv::BaseValidator::AbstractCheckMessage(m.enabled_deserializers(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "XtcpConfigValidationError" << "." << "EnabledDeserializers";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

		
	return true;
}

// Validate checks the field values on ::xtcp_config::v1::EnabledDeserializers
// with the rules defined in the proto definition for this message. If any
// rules are violated, the return value is false and an error message is
// written to the input string argument.

	

	

	

	

        

	

	

	



bool Validate(const ::xtcp_config::v1::EnabledDeserializers& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;// no validation rules for enabled
		
	return true;
}


} // namespace
} // namespace

