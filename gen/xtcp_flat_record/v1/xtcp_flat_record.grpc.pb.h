// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: xtcp_flat_record/v1/xtcp_flat_record.proto
// Original file comments:
//
// xTCP - eXport TCP Inet Diagnostic messages
//
// These are all the structs relating to the TCP diagnotic module in the kernel
//
// Please note that protobufs smallest size is 32 bits, so we actually expand uint8/16 to uint32s.
// In the protos below, I've commented which ones are uint8/16
//
// There are links to the kernel source showing where the struct came from.
//
// Build this using buf build ( https://buf.build/ ), see the buf config in the root folder
//
// Little reminder on compiling
// https://developers.google.com/protocol-buffers/docs/gotutorial
// go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
// protoc --go_out=paths=source_relative:. xtcppb.proto
//
// https://protobuf.dev/programming-guides/encoding/#structure
//
#ifndef GRPC_xtcp_5fflat_5frecord_2fv1_2fxtcp_5fflat_5frecord_2eproto__INCLUDED
#define GRPC_xtcp_5fflat_5frecord_2fv1_2fxtcp_5fflat_5frecord_2eproto__INCLUDED

#include "xtcp_flat_record/v1/xtcp_flat_record.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace xtcp_flat_record {
namespace v1 {

// https://github.com/bufbuild/protovalidate
// https://buf.build/bufbuild/protovalidate/docs/main:buf.validate
// https://github.com/bufbuild/protovalidate/tree/main/examples
// https://buf.build/docs/lint/rules/?h=protovalidate#protovalidate
// import "buf/validate/validate.proto";
//
class XTCPFlatRecordService final {
 public:
  static constexpr char const* service_full_name() {
    return "xtcp_flat_record.v1.XTCPFlatRecordService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // If xtcp is polling, this will return the stream
    std::unique_ptr< ::grpc::ClientReaderInterface< ::xtcp_flat_record::v1::FlatRecordsResponse>> FlatRecords(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::xtcp_flat_record::v1::FlatRecordsResponse>>(FlatRecordsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::xtcp_flat_record::v1::FlatRecordsResponse>> AsyncFlatRecords(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::xtcp_flat_record::v1::FlatRecordsResponse>>(AsyncFlatRecordsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::xtcp_flat_record::v1::FlatRecordsResponse>> PrepareAsyncFlatRecords(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::xtcp_flat_record::v1::FlatRecordsResponse>>(PrepareAsyncFlatRecordsRaw(context, request, cq));
    }
    // If xtcp is not polling, this allows the client to send a poll request
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>> PollFlatRecords(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>>(PollFlatRecordsRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>> AsyncPollFlatRecords(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>>(AsyncPollFlatRecordsRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>> PrepareAsyncPollFlatRecords(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>>(PrepareAsyncPollFlatRecordsRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // If xtcp is polling, this will return the stream
      virtual void FlatRecords(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest* request, ::grpc::ClientReadReactor< ::xtcp_flat_record::v1::FlatRecordsResponse>* reactor) = 0;
      // If xtcp is not polling, this allows the client to send a poll request
      virtual void PollFlatRecords(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::xtcp_flat_record::v1::PollFlatRecordsRequest,::xtcp_flat_record::v1::PollFlatRecordsResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::xtcp_flat_record::v1::FlatRecordsResponse>* FlatRecordsRaw(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::xtcp_flat_record::v1::FlatRecordsResponse>* AsyncFlatRecordsRaw(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::xtcp_flat_record::v1::FlatRecordsResponse>* PrepareAsyncFlatRecordsRaw(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>* PollFlatRecordsRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>* AsyncPollFlatRecordsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>* PrepareAsyncPollFlatRecordsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::xtcp_flat_record::v1::FlatRecordsResponse>> FlatRecords(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::xtcp_flat_record::v1::FlatRecordsResponse>>(FlatRecordsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::xtcp_flat_record::v1::FlatRecordsResponse>> AsyncFlatRecords(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::xtcp_flat_record::v1::FlatRecordsResponse>>(AsyncFlatRecordsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::xtcp_flat_record::v1::FlatRecordsResponse>> PrepareAsyncFlatRecords(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::xtcp_flat_record::v1::FlatRecordsResponse>>(PrepareAsyncFlatRecordsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>> PollFlatRecords(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>>(PollFlatRecordsRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>> AsyncPollFlatRecords(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>>(AsyncPollFlatRecordsRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>> PrepareAsyncPollFlatRecords(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>>(PrepareAsyncPollFlatRecordsRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void FlatRecords(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest* request, ::grpc::ClientReadReactor< ::xtcp_flat_record::v1::FlatRecordsResponse>* reactor) override;
      void PollFlatRecords(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::xtcp_flat_record::v1::PollFlatRecordsRequest,::xtcp_flat_record::v1::PollFlatRecordsResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::xtcp_flat_record::v1::FlatRecordsResponse>* FlatRecordsRaw(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request) override;
    ::grpc::ClientAsyncReader< ::xtcp_flat_record::v1::FlatRecordsResponse>* AsyncFlatRecordsRaw(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::xtcp_flat_record::v1::FlatRecordsResponse>* PrepareAsyncFlatRecordsRaw(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>* PollFlatRecordsRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>* AsyncPollFlatRecordsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>* PrepareAsyncPollFlatRecordsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FlatRecords_;
    const ::grpc::internal::RpcMethod rpcmethod_PollFlatRecords_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // If xtcp is polling, this will return the stream
    virtual ::grpc::Status FlatRecords(::grpc::ServerContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest* request, ::grpc::ServerWriter< ::xtcp_flat_record::v1::FlatRecordsResponse>* writer);
    // If xtcp is not polling, this allows the client to send a poll request
    virtual ::grpc::Status PollFlatRecords(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsResponse, ::xtcp_flat_record::v1::PollFlatRecordsRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_FlatRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FlatRecords() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FlatRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlatRecords(::grpc::ServerContext* /*context*/, const ::xtcp_flat_record::v1::FlatRecordsRequest* /*request*/, ::grpc::ServerWriter< ::xtcp_flat_record::v1::FlatRecordsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlatRecords(::grpc::ServerContext* context, ::xtcp_flat_record::v1::FlatRecordsRequest* request, ::grpc::ServerAsyncWriter< ::xtcp_flat_record::v1::FlatRecordsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PollFlatRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PollFlatRecords() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PollFlatRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollFlatRecords(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsResponse, ::xtcp_flat_record::v1::PollFlatRecordsRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPollFlatRecords(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsResponse, ::xtcp_flat_record::v1::PollFlatRecordsRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FlatRecords<WithAsyncMethod_PollFlatRecords<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_FlatRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FlatRecords() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::xtcp_flat_record::v1::FlatRecordsRequest, ::xtcp_flat_record::v1::FlatRecordsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest* request) { return this->FlatRecords(context, request); }));
    }
    ~WithCallbackMethod_FlatRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlatRecords(::grpc::ServerContext* /*context*/, const ::xtcp_flat_record::v1::FlatRecordsRequest* /*request*/, ::grpc::ServerWriter< ::xtcp_flat_record::v1::FlatRecordsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::xtcp_flat_record::v1::FlatRecordsResponse>* FlatRecords(
      ::grpc::CallbackServerContext* /*context*/, const ::xtcp_flat_record::v1::FlatRecordsRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PollFlatRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PollFlatRecords() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->PollFlatRecords(context); }));
    }
    ~WithCallbackMethod_PollFlatRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollFlatRecords(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsResponse, ::xtcp_flat_record::v1::PollFlatRecordsRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>* PollFlatRecords(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_FlatRecords<WithCallbackMethod_PollFlatRecords<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FlatRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FlatRecords() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FlatRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlatRecords(::grpc::ServerContext* /*context*/, const ::xtcp_flat_record::v1::FlatRecordsRequest* /*request*/, ::grpc::ServerWriter< ::xtcp_flat_record::v1::FlatRecordsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PollFlatRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PollFlatRecords() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PollFlatRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollFlatRecords(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsResponse, ::xtcp_flat_record::v1::PollFlatRecordsRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FlatRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FlatRecords() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FlatRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlatRecords(::grpc::ServerContext* /*context*/, const ::xtcp_flat_record::v1::FlatRecordsRequest* /*request*/, ::grpc::ServerWriter< ::xtcp_flat_record::v1::FlatRecordsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlatRecords(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PollFlatRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PollFlatRecords() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PollFlatRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollFlatRecords(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsResponse, ::xtcp_flat_record::v1::PollFlatRecordsRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPollFlatRecords(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FlatRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FlatRecords() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->FlatRecords(context, request); }));
    }
    ~WithRawCallbackMethod_FlatRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FlatRecords(::grpc::ServerContext* /*context*/, const ::xtcp_flat_record::v1::FlatRecordsRequest* /*request*/, ::grpc::ServerWriter< ::xtcp_flat_record::v1::FlatRecordsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* FlatRecords(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PollFlatRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PollFlatRecords() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->PollFlatRecords(context); }));
    }
    ~WithRawCallbackMethod_PollFlatRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollFlatRecords(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsResponse, ::xtcp_flat_record::v1::PollFlatRecordsRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* PollFlatRecords(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FlatRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_FlatRecords() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::xtcp_flat_record::v1::FlatRecordsRequest, ::xtcp_flat_record::v1::FlatRecordsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::xtcp_flat_record::v1::FlatRecordsRequest, ::xtcp_flat_record::v1::FlatRecordsResponse>* streamer) {
                       return this->StreamedFlatRecords(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_FlatRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FlatRecords(::grpc::ServerContext* /*context*/, const ::xtcp_flat_record::v1::FlatRecordsRequest* /*request*/, ::grpc::ServerWriter< ::xtcp_flat_record::v1::FlatRecordsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFlatRecords(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::xtcp_flat_record::v1::FlatRecordsRequest,::xtcp_flat_record::v1::FlatRecordsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FlatRecords<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_FlatRecords<Service > StreamedService;
};

}  // namespace v1
}  // namespace xtcp_flat_record


#endif  // GRPC_xtcp_5fflat_5frecord_2fv1_2fxtcp_5fflat_5frecord_2eproto__INCLUDED
