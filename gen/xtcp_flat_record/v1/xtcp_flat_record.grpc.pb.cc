// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: xtcp_flat_record/v1/xtcp_flat_record.proto

#include "xtcp_flat_record/v1/xtcp_flat_record.pb.h"
#include "xtcp_flat_record/v1/xtcp_flat_record.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace xtcp_flat_record {
namespace v1 {

static const char* XTCPFlatRecordService_method_names[] = {
  "/xtcp_flat_record.v1.XTCPFlatRecordService/FlatRecords",
  "/xtcp_flat_record.v1.XTCPFlatRecordService/PollFlatRecords",
};

std::unique_ptr< XTCPFlatRecordService::Stub> XTCPFlatRecordService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< XTCPFlatRecordService::Stub> stub(new XTCPFlatRecordService::Stub(channel, options));
  return stub;
}

XTCPFlatRecordService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_FlatRecords_(XTCPFlatRecordService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PollFlatRecords_(XTCPFlatRecordService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReader< ::xtcp_flat_record::v1::FlatRecordsResponse>* XTCPFlatRecordService::Stub::FlatRecordsRaw(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::xtcp_flat_record::v1::FlatRecordsResponse>::Create(channel_.get(), rpcmethod_FlatRecords_, context, request);
}

void XTCPFlatRecordService::Stub::async::FlatRecords(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest* request, ::grpc::ClientReadReactor< ::xtcp_flat_record::v1::FlatRecordsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::xtcp_flat_record::v1::FlatRecordsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_FlatRecords_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::xtcp_flat_record::v1::FlatRecordsResponse>* XTCPFlatRecordService::Stub::AsyncFlatRecordsRaw(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::xtcp_flat_record::v1::FlatRecordsResponse>::Create(channel_.get(), cq, rpcmethod_FlatRecords_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::xtcp_flat_record::v1::FlatRecordsResponse>* XTCPFlatRecordService::Stub::PrepareAsyncFlatRecordsRaw(::grpc::ClientContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::xtcp_flat_record::v1::FlatRecordsResponse>::Create(channel_.get(), cq, rpcmethod_FlatRecords_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>* XTCPFlatRecordService::Stub::PollFlatRecordsRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>::Create(channel_.get(), rpcmethod_PollFlatRecords_, context);
}

void XTCPFlatRecordService::Stub::async::PollFlatRecords(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::xtcp_flat_record::v1::PollFlatRecordsRequest,::xtcp_flat_record::v1::PollFlatRecordsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::xtcp_flat_record::v1::PollFlatRecordsRequest,::xtcp_flat_record::v1::PollFlatRecordsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_PollFlatRecords_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>* XTCPFlatRecordService::Stub::AsyncPollFlatRecordsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>::Create(channel_.get(), cq, rpcmethod_PollFlatRecords_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>* XTCPFlatRecordService::Stub::PrepareAsyncPollFlatRecordsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>::Create(channel_.get(), cq, rpcmethod_PollFlatRecords_, context, false, nullptr);
}

XTCPFlatRecordService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XTCPFlatRecordService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< XTCPFlatRecordService::Service, ::xtcp_flat_record::v1::FlatRecordsRequest, ::xtcp_flat_record::v1::FlatRecordsResponse>(
          [](XTCPFlatRecordService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::xtcp_flat_record::v1::FlatRecordsRequest* req,
             ::grpc::ServerWriter<::xtcp_flat_record::v1::FlatRecordsResponse>* writer) {
               return service->FlatRecords(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XTCPFlatRecordService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< XTCPFlatRecordService::Service, ::xtcp_flat_record::v1::PollFlatRecordsRequest, ::xtcp_flat_record::v1::PollFlatRecordsResponse>(
          [](XTCPFlatRecordService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::xtcp_flat_record::v1::PollFlatRecordsResponse,
             ::xtcp_flat_record::v1::PollFlatRecordsRequest>* stream) {
               return service->PollFlatRecords(ctx, stream);
             }, this)));
}

XTCPFlatRecordService::Service::~Service() {
}

::grpc::Status XTCPFlatRecordService::Service::FlatRecords(::grpc::ServerContext* context, const ::xtcp_flat_record::v1::FlatRecordsRequest* request, ::grpc::ServerWriter< ::xtcp_flat_record::v1::FlatRecordsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XTCPFlatRecordService::Service::PollFlatRecords(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::xtcp_flat_record::v1::PollFlatRecordsResponse, ::xtcp_flat_record::v1::PollFlatRecordsRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace xtcp_flat_record
}  // namespace v1

