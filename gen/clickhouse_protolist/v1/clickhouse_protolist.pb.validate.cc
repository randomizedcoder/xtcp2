// Code generated by protoc-gen-validate
// source: clickhouse_protolist/v1/clickhouse_protolist.proto
// DO NOT EDIT!!!

#include "clickhouse_protolist/v1/clickhouse_protolist.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>
#include "re2/re2.h"

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

// define the regex for a UUID once up-front
const re2::RE2 _uuidPattern("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");

pgv::Validator<::clickhouse_protolist::v1::Record> validator___clickhouse_protolist__v1__Record(static_cast<bool(*)(const ::clickhouse_protolist::v1::Record&, pgv::ValidationMsg*)>(::clickhouse_protolist::v1::Validate));
pgv::Validator<::clickhouse_protolist::v1::Envelope> validator___clickhouse_protolist__v1__Envelope(static_cast<bool(*)(const ::clickhouse_protolist::v1::Envelope&, pgv::ValidationMsg*)>(::clickhouse_protolist::v1::Validate));


} // namespace validate
} // namespace pgv


namespace clickhouse_protolist {
namespace v1 {


// Validate checks the field values on ::clickhouse_protolist::v1::Record with
// the rules defined in the proto definition for this message. If any rules
// are violated, the return value is false and an error message is written to
// the input string argument.

	

	

	

	

        

	

	

	



bool Validate(const ::clickhouse_protolist::v1::Record& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;// no validation rules for my_uint32
		
	return true;
}

// Validate checks the field values on ::clickhouse_protolist::v1::Envelope
// with the rules defined in the proto definition for this message. If any
// rules are violated, the return value is false and an error message is
// written to the input string argument.

	

	

	

	

        

	

	

	



bool Validate(const ::clickhouse_protolist::v1::Envelope& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	

	

	
		for (int i = 0; i < m.Rows().size(); i++) {
			const auto& item = m.Rows().Get(i);
			(void)item;

			

			
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (true && !pgv::BaseValidator::AbstractCheckMessage(item, &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "EnvelopeValidationError" << "." << "Rows";
msg << "[" << i << "]";
msg << ": " << "embedded message failed validation";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

		}
	
	

		
	return true;
}


} // namespace
} // namespace

